import { StrategyProgram } from '../constants';
import ApricotWithoutLMHandler from './apricotWithoutLM';
import FranciumHandler from './francium';
import MangoHandler from './mango';
import PortWithLMHandler from './portWithLM';
import PortWithoutLMHandler from './portWithoutLM';
import SolendWithLMHandler from './solendWithLM';
import SolendWithoutLMHandler from './solendWithoutLM';
import VaultHandler from './vault';
export const getStrategyType = (strategyResponse) => {
    return Object.keys(strategyResponse)[0];
};
export const getStrategyHandler = (strategyType, cluster, connection) => {
    const strategyProgramAddresses = StrategyProgram[cluster !== null && cluster !== void 0 ? cluster : 'mainnet-beta'];
    switch (strategyType) {
        case 'solendWithoutLm':
            return new SolendWithoutLMHandler(strategyProgramAddresses.solend);
        case 'solendWithLm':
            return new SolendWithLMHandler(strategyProgramAddresses.solend);
        case 'portFinanceWithoutLm':
            return new PortWithoutLMHandler(strategyProgramAddresses.portFinance);
        case 'portFinanceWithLm':
            return new PortWithLMHandler(strategyProgramAddresses.portFinance);
        case 'francium':
            return new FranciumHandler(connection);
        case 'apricotWithoutLM':
            return new ApricotWithoutLMHandler();
        case 'mango':
            return new MangoHandler();
        case 'vault':
            return new VaultHandler();
        default:
            return null;
    }
};
//# sourceMappingURL=index.js.map