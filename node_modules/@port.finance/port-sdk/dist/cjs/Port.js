"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Port = exports.LENDING_MARKET_LEN = void 0;
const web3_js_1 = require("@solana/web3.js");
const structs_1 = require("./structs");
const models_1 = require("./models");
const Environment_1 = require("./Environment");
const constants_1 = require("./constants");
const Instructions_1 = require("./utils/Instructions");
const anchor_1 = require("@project-serum/anchor");
const _1 = require(".");
const spl_token_1 = require("@solana/spl-token");
const solana_contrib_1 = require("@saberhq/solana-contrib");
const token_utils_1 = require("@saberhq/token-utils");
const tiny_invariant_1 = __importDefault(require("tiny-invariant"));
exports.LENDING_MARKET_LEN = 258;
class Port {
    constructor(connection, environment, lendingMarket) {
        this.connection = connection;
        this.environment = environment;
        this.lendingMarket = lendingMarket;
    }
    setConnection(connection) {
        this.connection = connection;
    }
    setLendingMarket(lendingMarket) {
        this.lendingMarket = lendingMarket;
    }
    static forMainNet({ connection = new web3_js_1.Connection("https://api.mainnet-beta.solana.com"), profile = Environment_1.Environment.forMainNet(), lendingMarket = constants_1.DEFAULT_PORT_LENDING_MARKET, }) {
        return new Port(connection, profile, lendingMarket);
    }
    getEnvironment() {
        return this.environment;
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            this.reserveContext = yield this.getReserveContext();
        });
    }
    getTotalMarketCap() {
        return __awaiter(this, void 0, void 0, function* () {
            const context = yield this.getReserveContext();
            return context
                .getAllReserves()
                .map((r) => r.getMarketCap())
                .map((c) => c.getValue())
                .reduce(models_1.QuoteValue.sum, models_1.QuoteValue.zero());
        });
    }
    getShareAccount(walletId, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const shareMintPks = context
                .getAllReserves()
                .map((r) => r.getShareMintId())
                .map((s) => s.getAccess(Instructions_1.AccessType.READ).pubkey);
            const programId = this.environment.getTokenProgramPk();
            const result = yield this.connection.getTokenAccountsByOwner(walletId.getAccess(Instructions_1.AccessType.READ).pubkey, {
                programId,
            });
            const raw = result.value;
            return raw
                .map((a) => models_1.TokenAccount.fromRaw(a))
                .filter((p) => p &&
                shareMintPks.find((k) => k.equals(p.getMintId().getAccess(Instructions_1.AccessType.READ).pubkey)));
        });
    }
    getPortProfile(walletId) {
        return __awaiter(this, void 0, void 0, function* () {
            const raw = yield this.connection.getProgramAccounts(this.environment.getLendingProgramPk(), {
                filters: [
                    {
                        memcmp: {
                            // eslint-disable-next-line
                            offset: structs_1.ObligationLayout.offsetOf("owner"),
                            bytes: walletId.toBase58(),
                        },
                    },
                    {
                        memcmp: {
                            // eslint-disable-next-line
                            offset: structs_1.ObligationLayout.offsetOf("lendingMarket"),
                            bytes: this.lendingMarket.toBase58(),
                        },
                    },
                    {
                        dataSize: structs_1.PORT_PROFILE_DATA_SIZE,
                    },
                ],
            });
            const parsed = raw.map((a) => models_1.PortProfile.fromRaw(a)).filter((p) => !!p);
            return parsed.length > 0 ? parsed[0] : undefined;
        });
    }
    getReserveContext() {
        return __awaiter(this, void 0, void 0, function* () {
            const raw = yield this.connection.getProgramAccounts(this.environment.getLendingProgramPk(), {
                filters: [
                    {
                        dataSize: structs_1.RESERVE_DATA_SIZE,
                    },
                    {
                        memcmp: {
                            // eslint-disable-next-line
                            offset: structs_1.ReserveLayout.offsetOf("lendingMarket"),
                            bytes: this.lendingMarket.toBase58(),
                        },
                    },
                ],
            });
            const parsed = raw.map((a) => models_1.ReserveInfo.fromRaw(a)).filter((p) => !!p);
            return models_1.ReserveContext.index(parsed);
        });
    }
    getStakingPoolContext() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.environment.getStakingProgramPk() === undefined) {
                Promise.resolve();
            }
            const raw = yield this.connection.getProgramAccounts(
            // eslint-disable-next-line
            this.environment.getStakingProgramPk(), {
                filters: [
                    {
                        dataSize: structs_1.STAKING_POOL_DATA_SIZE,
                    },
                ],
            });
            const parsed = raw.map((a) => models_1.StakingPool.fromRaw(a)).filter((p) => !!p);
            return models_1.StakingPoolContext.index(parsed);
        });
    }
    getAllPortProfiles() {
        return __awaiter(this, void 0, void 0, function* () {
            const raw = yield this.connection.getProgramAccounts(this.environment.getLendingProgramPk(), {
                filters: [
                    {
                        dataSize: structs_1.PORT_PROFILE_DATA_SIZE,
                    },
                    {
                        memcmp: {
                            // eslint-disable-next-line
                            offset: structs_1.ObligationLayout.offsetOf("lendingMarket"),
                            bytes: this.lendingMarket.toBase58(),
                        },
                    },
                ],
            });
            const parsed = raw.map((p) => models_1.PortProfile.fromRaw(p)).filter((p) => !!p);
            return parsed;
        });
    }
    getStakingPool(stakingPoolKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const raw = yield this.connection.getAccountInfo(stakingPoolKey);
            if (!raw) {
                return Promise.reject(new Error("no reserve found"));
            }
            return models_1.StakingPool.fromRaw({
                pubkey: stakingPoolKey,
                account: raw,
            });
        });
    }
    getReserve(reserveKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const raw = yield this.connection.getAccountInfo(reserveKey);
            if (!raw) {
                return Promise.reject(new Error("no reserve found"));
            }
            return models_1.ReserveInfo.fromRaw({
                pubkey: reserveKey,
                account: raw,
            });
        });
    }
    createLendingMarket({ provider, owner = provider.wallet.publicKey, }) {
        return __awaiter(this, void 0, void 0, function* () {
            let tx = new solana_contrib_1.TransactionEnvelope(provider, []);
            const [createTx, lendingMarketPubkey] = yield this.createAccount({
                provider,
                space: exports.LENDING_MARKET_LEN,
                owner: _1.PORT_LENDING,
            });
            const createLendingMarketIx = (0, _1.initLendingMarketInstruction)(owner, Buffer.from("USD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", "ascii"), lendingMarketPubkey);
            tx = tx.combine(createTx);
            tx.addInstructions(createLendingMarketIx);
            return [tx, lendingMarketPubkey];
        });
    }
    createReserve({ provider, reserveConfig, transferAuthority, sourceTokenWallet, initialLiquidity, oracle, price, }) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, tiny_invariant_1.default)(!!oracle !== !!price, "Oracle and price can't both be present");
            const [createReserveAccountIx, reservePubKey] = yield this.createAccount({
                provider,
                space: structs_1.ReserveLayout.span,
                owner: _1.PORT_LENDING,
            });
            const [collateralMintIx, collateralMintPubKey] = yield this.createAccount({
                provider,
                space: spl_token_1.MintLayout.span,
                owner: spl_token_1.TOKEN_PROGRAM_ID,
            });
            const [liquiditySupplyIx, liquiditySupplyPubKey] = yield this.createAccount({
                provider,
                space: spl_token_1.AccountLayout.span,
                owner: spl_token_1.TOKEN_PROGRAM_ID,
            });
            const [collateralSupplyIx, collateralSupplyPubKey] = yield this.createAccount({
                provider,
                space: spl_token_1.AccountLayout.span,
                owner: spl_token_1.TOKEN_PROGRAM_ID,
            });
            const [userCollateralIx, userCollateralPubKey] = yield this.createAccount({
                provider,
                space: spl_token_1.AccountLayout.span,
                owner: spl_token_1.TOKEN_PROGRAM_ID,
            });
            const [feeReceiverIx, feeReceiverPubkey] = yield this.createAccount({
                provider,
                space: spl_token_1.AccountLayout.span,
                owner: spl_token_1.TOKEN_PROGRAM_ID,
            });
            const tokenAccount = yield (0, token_utils_1.getTokenAccount)(provider, sourceTokenWallet);
            const initReserveIx = (0, _1.initReserveInstruction)(initialLiquidity, oracle ? 0 : 1, // price Option
            price !== null && price !== void 0 ? price : new anchor_1.BN(1), reserveConfig, sourceTokenWallet, collateralSupplyPubKey, reservePubKey, tokenAccount.mint, liquiditySupplyPubKey, feeReceiverPubkey, oracle !== null && oracle !== void 0 ? oracle : web3_js_1.Keypair.generate().publicKey, collateralMintPubKey, userCollateralPubKey, this.lendingMarket, (yield this.getLendingMarketAuthority())[0], provider.wallet.publicKey, transferAuthority);
            let tx1 = new solana_contrib_1.TransactionEnvelope(provider, []);
            tx1 = tx1.combine(createReserveAccountIx);
            tx1 = tx1.combine(collateralMintIx);
            tx1 = tx1.combine(liquiditySupplyIx);
            tx1 = tx1.combine(collateralSupplyIx);
            tx1 = tx1.combine(userCollateralIx);
            let tx2 = new solana_contrib_1.TransactionEnvelope(provider, []);
            tx2 = tx2.combine(feeReceiverIx);
            tx2 = tx2.addInstructions(initReserveIx);
            return [[tx1, tx2], reservePubKey];
        });
    }
    getLendingMarketAuthority() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield web3_js_1.PublicKey.findProgramAddress([this.lendingMarket.toBuffer()], _1.PORT_LENDING);
        });
    }
    createAccount({ provider, space, owner, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const newAccount = web3_js_1.Keypair.generate();
            const tx = new solana_contrib_1.TransactionEnvelope(provider, [
                web3_js_1.SystemProgram.createAccount({
                    fromPubkey: provider.wallet.publicKey,
                    newAccountPubkey: newAccount.publicKey,
                    programId: owner,
                    lamports: yield provider.connection.getMinimumBalanceForRentExemption(space),
                    space,
                }),
            ], [newAccount]);
            return [tx, newAccount.publicKey];
        });
    }
}
exports.Port = Port;
//# sourceMappingURL=Port.js.map