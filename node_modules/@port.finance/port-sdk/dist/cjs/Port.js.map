{"version":3,"file":"Port.js","sourceRoot":"","sources":["../../src/Port.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,6CAAgF;AAChF,uCAOmB;AACnB,qCASkB;AAClB,+CAA4C;AAC5C,2CAA0D;AAC1D,uDAAkD;AAClD,kDAA2C;AAC3C,wBAIW;AACX,iDAAgF;AAChF,4DAAwE;AACxE,sDAAuD;AACvD,oEAAuC;AAE1B,QAAA,kBAAkB,GAAG,GAAG,CAAC;AAEtC,MAAa,IAAI;IAMf,YACE,UAAsB,EACtB,WAAwB,EACxB,aAAwB;QAExB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACrC,CAAC;IAEM,aAAa,CAAC,UAAsB;QACzC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAEM,gBAAgB,CAAC,aAAwB;QAC9C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACrC,CAAC;IAEM,MAAM,CAAC,UAAU,CAAC,EACvB,UAAU,GAAG,IAAI,oBAAU,CAAC,qCAAqC,CAAC,EAClE,OAAO,GAAG,yBAAW,CAAC,UAAU,EAAE,EAClC,aAAa,GAAG,uCAA2B,GAK5C;QACC,OAAO,IAAI,IAAI,CAAC,UAAU,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC;IACtD,CAAC;IAEM,cAAc;QACnB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAEY,IAAI;;YACf,IAAI,CAAC,cAAc,GAAG,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACvD,CAAC;KAAA;IAEY,iBAAiB;;YAC5B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC/C,OAAO,OAAO;iBACX,cAAc,EAAE;iBAChB,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC;iBAC5B,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;iBACxB,MAAM,CAAC,mBAAU,CAAC,GAAG,EAAE,mBAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QAC/C,CAAC;KAAA;IAEY,eAAe,CAC1B,QAAkB,EAClB,OAAuB;;YAEvB,MAAM,YAAY,GAAG,OAAO;iBACzB,cAAc,EAAE;iBAChB,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC;iBAC9B,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,yBAAU,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;YACnD,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC;YACvD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAC1D,QAAQ,CAAC,SAAS,CAAC,yBAAU,CAAC,IAAI,CAAC,CAAC,MAAM,EAC1C;gBACE,SAAS;aACV,CACF,CAAC;YACF,MAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC;YACzB,OAAO,GAAG;iBACP,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,qBAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;iBACnC,MAAM,CACL,CAAC,CAAC,EAAE,EAAE,CACJ,CAAC;gBACD,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CACtB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC,yBAAU,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAC1D,CACJ,CAAC;QACN,CAAC;KAAA;IAEY,cAAc,CACzB,QAAkB;;YAElB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAClD,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,EACtC;gBACE,OAAO,EAAE;oBACP;wBACE,MAAM,EAAE;4BACN,2BAA2B;4BAC3B,MAAM,EAAE,0BAAgB,CAAC,QAAQ,CAAC,OAAO,CAAE;4BAC3C,KAAK,EAAE,QAAQ,CAAC,QAAQ,EAAE;yBAC3B;qBACF;oBACD;wBACE,MAAM,EAAE;4BACN,2BAA2B;4BAC3B,MAAM,EAAE,0BAAgB,CAAC,QAAQ,CAAC,eAAe,CAAE;4BACnD,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;yBACrC;qBACF;oBACD;wBACE,QAAQ,EAAE,gCAAsB;qBACjC;iBACF;aACF,CACF,CAAC;YACF,MAAM,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,oBAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzE,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACnD,CAAC;KAAA;IAEY,iBAAiB;;YAC5B,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAClD,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,EACtC;gBACE,OAAO,EAAE;oBACP;wBACE,QAAQ,EAAE,2BAAiB;qBAC5B;oBACD;wBACE,MAAM,EAAE;4BACN,2BAA2B;4BAC3B,MAAM,EAAE,uBAAa,CAAC,QAAQ,CAAC,eAAe,CAAE;4BAChD,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;yBACrC;qBACF;iBACF;aACF,CACF,CAAC;YACF,MAAM,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,oBAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzE,OAAO,uBAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACtC,CAAC;KAAA;IAEY,qBAAqB;;YAChC,IAAI,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,KAAK,SAAS,EAAE;gBACxD,OAAO,CAAC,OAAO,EAAE,CAAC;aACnB;YAED,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,kBAAkB;YAClD,2BAA2B;YAC3B,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAG,EACvC;gBACE,OAAO,EAAE;oBACP;wBACE,QAAQ,EAAE,gCAAsB;qBACjC;iBACF;aACF,CACF,CAAC;YACF,MAAM,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,oBAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzE,OAAO,2BAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC1C,CAAC;KAAA;IAEY,kBAAkB;;YAC7B,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAClD,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,EACtC;gBACE,OAAO,EAAE;oBACP;wBACE,QAAQ,EAAE,gCAAsB;qBACjC;oBACD;wBACE,MAAM,EAAE;4BACN,2BAA2B;4BAC3B,MAAM,EAAE,0BAAgB,CAAC,QAAQ,CAAC,eAAe,CAAE;4BACnD,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;yBACrC;qBACF;iBACF;aACF,CACF,CAAC;YACF,MAAM,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,oBAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzE,OAAO,MAAM,CAAC;QAChB,CAAC;KAAA;IAEY,cAAc,CAAC,cAAyB;;YACnD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YACjE,IAAI,CAAC,GAAG,EAAE;gBACR,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC;aACtD;YACD,OAAO,oBAAW,CAAC,OAAO,CAAC;gBACzB,MAAM,EAAE,cAAc;gBACtB,OAAO,EAAE,GAAG;aACb,CAAC,CAAC;QACL,CAAC;KAAA;IAEY,UAAU,CAAC,UAAqB;;YAC3C,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAC7D,IAAI,CAAC,GAAG,EAAE;gBACR,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC;aACtD;YACD,OAAO,oBAAW,CAAC,OAAO,CAAC;gBACzB,MAAM,EAAE,UAAU;gBAClB,OAAO,EAAE,GAAG;aACb,CAAC,CAAC;QACL,CAAC;KAAA;IAEY,mBAAmB,CAAC,EAC/B,QAAQ,EACR,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,GAIlC;;YACC,IAAI,EAAE,GAAG,IAAI,oCAAmB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAC/C,MAAM,CAAC,QAAQ,EAAE,mBAAmB,CAAC,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC;gBAC/D,QAAQ;gBACR,KAAK,EAAE,0BAAkB;gBACzB,KAAK,EAAE,eAAY;aACpB,CAAC,CAAC;YACH,MAAM,qBAAqB,GAAG,IAAA,+BAA4B,EACxD,KAAK,EACL,MAAM,CAAC,IAAI,CACT,+DAA+D,EAC/D,OAAO,CACR,EACD,mBAAmB,CACpB,CAAC;YACF,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1B,EAAE,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC;YAC1C,OAAO,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC;QACnC,CAAC;KAAA;IAEY,aAAa,CAAC,EACzB,QAAQ,EACR,aAAa,EACb,iBAAiB,EACjB,iBAAiB,EACjB,gBAAgB,EAChB,MAAM,EACN,KAAK,GASN;;YACC,IAAA,wBAAS,EAAC,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,KAAK,EAAE,wCAAwC,CAAC,CAAC;YAE1E,MAAM,CAAC,sBAAsB,EAAE,aAAa,CAAC,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC;gBACvE,QAAQ;gBACR,KAAK,EAAE,uBAAa,CAAC,IAAI;gBACzB,KAAK,EAAE,eAAY;aACpB,CAAC,CAAC;YACH,MAAM,CAAC,gBAAgB,EAAE,oBAAoB,CAAC,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC;gBACxE,QAAQ;gBACR,KAAK,EAAE,sBAAU,CAAC,IAAI;gBACtB,KAAK,EAAE,4BAAgB;aACxB,CAAC,CAAC;YACH,MAAM,CAAC,iBAAiB,EAAE,qBAAqB,CAAC,GAAG,MAAM,IAAI,CAAC,aAAa,CACzE;gBACE,QAAQ;gBACR,KAAK,EAAE,yBAAa,CAAC,IAAI;gBACzB,KAAK,EAAE,4BAAgB;aACxB,CACF,CAAC;YACF,MAAM,CAAC,kBAAkB,EAAE,sBAAsB,CAAC,GAChD,MAAM,IAAI,CAAC,aAAa,CAAC;gBACvB,QAAQ;gBACR,KAAK,EAAE,yBAAa,CAAC,IAAI;gBACzB,KAAK,EAAE,4BAAgB;aACxB,CAAC,CAAC;YACL,MAAM,CAAC,gBAAgB,EAAE,oBAAoB,CAAC,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC;gBACxE,QAAQ;gBACR,KAAK,EAAE,yBAAa,CAAC,IAAI;gBACzB,KAAK,EAAE,4BAAgB;aACxB,CAAC,CAAC;YACH,MAAM,CAAC,aAAa,EAAE,iBAAiB,CAAC,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC;gBAClE,QAAQ;gBACR,KAAK,EAAE,yBAAa,CAAC,IAAI;gBACzB,KAAK,EAAE,4BAAgB;aACxB,CAAC,CAAC;YAEH,MAAM,YAAY,GAAG,MAAM,IAAA,6BAAe,EAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;YAExE,MAAM,aAAa,GAAG,IAAA,yBAAsB,EAC1C,gBAAgB,EAChB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,eAAe;YAC/B,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,IAAI,WAAE,CAAC,CAAC,CAAC,EAClB,aAAa,EACb,iBAAiB,EACjB,sBAAsB,EACtB,aAAa,EACb,YAAY,CAAC,IAAI,EACjB,qBAAqB,EACrB,iBAAiB,EACjB,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,iBAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,EACtC,oBAAoB,EACpB,oBAAoB,EACpB,IAAI,CAAC,aAAa,EAClB,CAAC,MAAM,IAAI,CAAC,yBAAyB,EAAE,CAAC,CAAC,CAAC,CAAC,EAC3C,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,iBAAiB,CAClB,CAAC;YAEF,IAAI,GAAG,GAAG,IAAI,oCAAmB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAChD,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;YAC1C,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;YACpC,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;YACrC,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;YACtC,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;YAEpC,IAAI,GAAG,GAAG,IAAI,oCAAmB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAChD,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YACjC,GAAG,GAAG,GAAG,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YAEzC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,aAAa,CAAC,CAAC;QACrC,CAAC;KAAA;IAEY,yBAAyB;;YACpC,OAAO,MAAM,mBAAS,CAAC,kBAAkB,CACvC,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,EAC/B,eAAY,CACb,CAAC;QACJ,CAAC;KAAA;IAEa,aAAa,CAAC,EAC1B,QAAQ,EACR,KAAK,EACL,KAAK,GAKN;;YACC,MAAM,UAAU,GAAG,iBAAO,CAAC,QAAQ,EAAE,CAAC;YACtC,MAAM,EAAE,GAAG,IAAI,oCAAmB,CAChC,QAAQ,EACR;gBACE,uBAAa,CAAC,aAAa,CAAC;oBAC1B,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,SAAS;oBACrC,gBAAgB,EAAE,UAAU,CAAC,SAAS;oBACtC,SAAS,EAAE,KAAK;oBAChB,QAAQ,EAAE,MAAM,QAAQ,CAAC,UAAU,CAAC,iCAAiC,CACnE,KAAK,CACN;oBACD,KAAK;iBACN,CAAC;aACH,EACD,CAAC,UAAU,CAAC,CACb,CAAC;YACF,OAAO,CAAC,EAAE,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC;QACpC,CAAC;KAAA;CACF;AA1VD,oBA0VC","sourcesContent":["import { Connection, Keypair, PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport {\n  RESERVE_DATA_SIZE,\n  ReserveLayout,\n  STAKING_POOL_DATA_SIZE,\n  PORT_PROFILE_DATA_SIZE,\n  ObligationLayout,\n  ReserveConfigProto,\n} from \"./structs\";\nimport {\n  ReserveInfo,\n  ReserveContext,\n  QuoteValue,\n  WalletId,\n  TokenAccount,\n  PortProfile,\n  StakingPool,\n  StakingPoolContext,\n} from \"./models\";\nimport { Environment } from \"./Environment\";\nimport { DEFAULT_PORT_LENDING_MARKET } from \"./constants\";\nimport { AccessType } from \"./utils/Instructions\";\nimport { BN } from \"@project-serum/anchor\";\nimport {\n  initLendingMarketInstruction,\n  initReserveInstruction,\n  PORT_LENDING,\n} from \".\";\nimport { AccountLayout, MintLayout, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { TransactionEnvelope, Provider } from \"@saberhq/solana-contrib\";\nimport { getTokenAccount } from \"@saberhq/token-utils\";\nimport invariant from \"tiny-invariant\";\n\nexport const LENDING_MARKET_LEN = 258;\n\nexport class Port {\n  public readonly environment: Environment;\n  public lendingMarket: PublicKey;\n  public connection: Connection;\n  public reserveContext?: ReserveContext;\n\n  constructor(\n    connection: Connection,\n    environment: Environment,\n    lendingMarket: PublicKey\n  ) {\n    this.connection = connection;\n    this.environment = environment;\n    this.lendingMarket = lendingMarket;\n  }\n\n  public setConnection(connection: Connection): void {\n    this.connection = connection;\n  }\n\n  public setLendingMarket(lendingMarket: PublicKey): void {\n    this.lendingMarket = lendingMarket;\n  }\n\n  public static forMainNet({\n    connection = new Connection(\"https://api.mainnet-beta.solana.com\"),\n    profile = Environment.forMainNet(),\n    lendingMarket = DEFAULT_PORT_LENDING_MARKET,\n  }: {\n    connection?: Connection;\n    profile?: Environment;\n    lendingMarket?: PublicKey;\n  }): Port {\n    return new Port(connection, profile, lendingMarket);\n  }\n\n  public getEnvironment(): Environment {\n    return this.environment;\n  }\n\n  public async load(): Promise<void> {\n    this.reserveContext = await this.getReserveContext();\n  }\n\n  public async getTotalMarketCap(): Promise<QuoteValue> {\n    const context = await this.getReserveContext();\n    return context\n      .getAllReserves()\n      .map((r) => r.getMarketCap())\n      .map((c) => c.getValue())\n      .reduce(QuoteValue.sum, QuoteValue.zero());\n  }\n\n  public async getShareAccount(\n    walletId: WalletId,\n    context: ReserveContext\n  ): Promise<TokenAccount[]> {\n    const shareMintPks = context\n      .getAllReserves()\n      .map((r) => r.getShareMintId())\n      .map((s) => s.getAccess(AccessType.READ).pubkey);\n    const programId = this.environment.getTokenProgramPk();\n    const result = await this.connection.getTokenAccountsByOwner(\n      walletId.getAccess(AccessType.READ).pubkey,\n      {\n        programId,\n      }\n    );\n    const raw = result.value;\n    return raw\n      .map((a) => TokenAccount.fromRaw(a))\n      .filter(\n        (p) =>\n          p &&\n          shareMintPks.find((k) =>\n            k.equals(p.getMintId().getAccess(AccessType.READ).pubkey)\n          )\n      );\n  }\n\n  public async getPortProfile(\n    walletId: WalletId\n  ): Promise<PortProfile | undefined> {\n    const raw = await this.connection.getProgramAccounts(\n      this.environment.getLendingProgramPk(),\n      {\n        filters: [\n          {\n            memcmp: {\n              // eslint-disable-next-line\n              offset: ObligationLayout.offsetOf(\"owner\")!,\n              bytes: walletId.toBase58(),\n            },\n          },\n          {\n            memcmp: {\n              // eslint-disable-next-line\n              offset: ObligationLayout.offsetOf(\"lendingMarket\")!,\n              bytes: this.lendingMarket.toBase58(),\n            },\n          },\n          {\n            dataSize: PORT_PROFILE_DATA_SIZE,\n          },\n        ],\n      }\n    );\n    const parsed = raw.map((a) => PortProfile.fromRaw(a)).filter((p) => !!p);\n    return parsed.length > 0 ? parsed[0] : undefined;\n  }\n\n  public async getReserveContext(): Promise<ReserveContext> {\n    const raw = await this.connection.getProgramAccounts(\n      this.environment.getLendingProgramPk(),\n      {\n        filters: [\n          {\n            dataSize: RESERVE_DATA_SIZE,\n          },\n          {\n            memcmp: {\n              // eslint-disable-next-line\n              offset: ReserveLayout.offsetOf(\"lendingMarket\")!,\n              bytes: this.lendingMarket.toBase58(),\n            },\n          },\n        ],\n      }\n    );\n    const parsed = raw.map((a) => ReserveInfo.fromRaw(a)).filter((p) => !!p);\n    return ReserveContext.index(parsed);\n  }\n\n  public async getStakingPoolContext(): Promise<StakingPoolContext> {\n    if (this.environment.getStakingProgramPk() === undefined) {\n      Promise.resolve();\n    }\n\n    const raw = await this.connection.getProgramAccounts(\n      // eslint-disable-next-line\n      this.environment.getStakingProgramPk()!,\n      {\n        filters: [\n          {\n            dataSize: STAKING_POOL_DATA_SIZE,\n          },\n        ],\n      }\n    );\n    const parsed = raw.map((a) => StakingPool.fromRaw(a)).filter((p) => !!p);\n    return StakingPoolContext.index(parsed);\n  }\n\n  public async getAllPortProfiles(): Promise<PortProfile[]> {\n    const raw = await this.connection.getProgramAccounts(\n      this.environment.getLendingProgramPk(),\n      {\n        filters: [\n          {\n            dataSize: PORT_PROFILE_DATA_SIZE,\n          },\n          {\n            memcmp: {\n              // eslint-disable-next-line\n              offset: ObligationLayout.offsetOf(\"lendingMarket\")!,\n              bytes: this.lendingMarket.toBase58(),\n            },\n          },\n        ],\n      }\n    );\n    const parsed = raw.map((p) => PortProfile.fromRaw(p)).filter((p) => !!p);\n    return parsed;\n  }\n\n  public async getStakingPool(stakingPoolKey: PublicKey): Promise<StakingPool> {\n    const raw = await this.connection.getAccountInfo(stakingPoolKey);\n    if (!raw) {\n      return Promise.reject(new Error(\"no reserve found\"));\n    }\n    return StakingPool.fromRaw({\n      pubkey: stakingPoolKey,\n      account: raw,\n    });\n  }\n\n  public async getReserve(reserveKey: PublicKey): Promise<ReserveInfo> {\n    const raw = await this.connection.getAccountInfo(reserveKey);\n    if (!raw) {\n      return Promise.reject(new Error(\"no reserve found\"));\n    }\n    return ReserveInfo.fromRaw({\n      pubkey: reserveKey,\n      account: raw,\n    });\n  }\n\n  public async createLendingMarket({\n    provider,\n    owner = provider.wallet.publicKey,\n  }: {\n    provider: Provider;\n    owner?: PublicKey;\n  }): Promise<[TransactionEnvelope, PublicKey]> {\n    let tx = new TransactionEnvelope(provider, []);\n    const [createTx, lendingMarketPubkey] = await this.createAccount({\n      provider,\n      space: LENDING_MARKET_LEN,\n      owner: PORT_LENDING,\n    });\n    const createLendingMarketIx = initLendingMarketInstruction(\n      owner,\n      Buffer.from(\n        \"USD\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\",\n        \"ascii\"\n      ),\n      lendingMarketPubkey\n    );\n    tx = tx.combine(createTx);\n    tx.addInstructions(createLendingMarketIx);\n    return [tx, lendingMarketPubkey];\n  }\n\n  public async createReserve({\n    provider,\n    reserveConfig,\n    transferAuthority,\n    sourceTokenWallet,\n    initialLiquidity,\n    oracle,\n    price,\n  }: {\n    provider: Provider;\n    reserveConfig: ReserveConfigProto;\n    transferAuthority: PublicKey;\n    sourceTokenWallet: PublicKey;\n    initialLiquidity: number | BN;\n    oracle?: PublicKey;\n    price?: BN;\n  }): Promise<[TransactionEnvelope[], PublicKey]> {\n    invariant(!!oracle !== !!price, \"Oracle and price can't both be present\");\n\n    const [createReserveAccountIx, reservePubKey] = await this.createAccount({\n      provider,\n      space: ReserveLayout.span,\n      owner: PORT_LENDING,\n    });\n    const [collateralMintIx, collateralMintPubKey] = await this.createAccount({\n      provider,\n      space: MintLayout.span,\n      owner: TOKEN_PROGRAM_ID,\n    });\n    const [liquiditySupplyIx, liquiditySupplyPubKey] = await this.createAccount(\n      {\n        provider,\n        space: AccountLayout.span,\n        owner: TOKEN_PROGRAM_ID,\n      }\n    );\n    const [collateralSupplyIx, collateralSupplyPubKey] =\n      await this.createAccount({\n        provider,\n        space: AccountLayout.span,\n        owner: TOKEN_PROGRAM_ID,\n      });\n    const [userCollateralIx, userCollateralPubKey] = await this.createAccount({\n      provider,\n      space: AccountLayout.span,\n      owner: TOKEN_PROGRAM_ID,\n    });\n    const [feeReceiverIx, feeReceiverPubkey] = await this.createAccount({\n      provider,\n      space: AccountLayout.span,\n      owner: TOKEN_PROGRAM_ID,\n    });\n\n    const tokenAccount = await getTokenAccount(provider, sourceTokenWallet);\n\n    const initReserveIx = initReserveInstruction(\n      initialLiquidity,\n      oracle ? 0 : 1, // price Option\n      price ?? new BN(1),\n      reserveConfig,\n      sourceTokenWallet,\n      collateralSupplyPubKey,\n      reservePubKey,\n      tokenAccount.mint,\n      liquiditySupplyPubKey,\n      feeReceiverPubkey,\n      oracle ?? Keypair.generate().publicKey,\n      collateralMintPubKey,\n      userCollateralPubKey,\n      this.lendingMarket,\n      (await this.getLendingMarketAuthority())[0],\n      provider.wallet.publicKey,\n      transferAuthority\n    );\n\n    let tx1 = new TransactionEnvelope(provider, []);\n    tx1 = tx1.combine(createReserveAccountIx);\n    tx1 = tx1.combine(collateralMintIx);\n    tx1 = tx1.combine(liquiditySupplyIx);\n    tx1 = tx1.combine(collateralSupplyIx);\n    tx1 = tx1.combine(userCollateralIx);\n\n    let tx2 = new TransactionEnvelope(provider, []);\n    tx2 = tx2.combine(feeReceiverIx);\n    tx2 = tx2.addInstructions(initReserveIx);\n\n    return [[tx1, tx2], reservePubKey];\n  }\n\n  public async getLendingMarketAuthority(): Promise<[PublicKey, number]> {\n    return await PublicKey.findProgramAddress(\n      [this.lendingMarket.toBuffer()],\n      PORT_LENDING\n    );\n  }\n\n  private async createAccount({\n    provider,\n    space,\n    owner,\n  }: {\n    provider: Provider;\n    space: number;\n    owner: PublicKey;\n  }): Promise<[TransactionEnvelope, PublicKey]> {\n    const newAccount = Keypair.generate();\n    const tx = new TransactionEnvelope(\n      provider,\n      [\n        SystemProgram.createAccount({\n          fromPubkey: provider.wallet.publicKey,\n          newAccountPubkey: newAccount.publicKey,\n          programId: owner,\n          lamports: await provider.connection.getMinimumBalanceForRentExemption(\n            space\n          ),\n          space,\n        }),\n      ],\n      [newAccount]\n    );\n    return [tx, newAccount.publicKey];\n  }\n}\n"]}