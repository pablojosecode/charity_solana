{"version":3,"file":"StakingPoolData.js","sourceRoot":"","sources":["../../../src/structs/StakingPoolData.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oEAAsD;AACtD,uDAAoD;AACpD,2CAA0C;AAC1C,yDAAsD;AACtD,yCAAsC;AACtC,6DAA0D;AAC1D,sDAAmD;AAEtC,QAAA,iBAAiB,GAAG,YAAY,CAAC,MAAM,CAAC;IACnD,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC;IAC1B,yBAAW,CAAC,KAAK,CAAC,gBAAgB,CAAC;IACnC,yBAAW,CAAC,KAAK,CAAC,gBAAgB,CAAC;IACnC,+BAAc,CAAC,KAAK,CAAC,iBAAiB,CAAC;IACvC,WAAI,CAAC,KAAK,CAAC,YAAY,CAAC;IACxB,WAAI,CAAC,KAAK,CAAC,SAAS,CAAC;IACrB,WAAI,CAAC,KAAK,CAAC,UAAU,CAAC;IACtB,WAAI,CAAC,KAAK,CAAC,yBAAyB,CAAC;IACrC,2BAAY,CAAC,KAAK,CAAC,iBAAO,CAAC,IAAI,EAAE,aAAa,CAAC;IAC/C,2BAAY,CAAC,KAAK,CAAC,iBAAO,CAAC,IAAI,EAAE,gBAAgB,CAAC;IAClD,eAAO,CAAC,KAAK,CAAC,iBAAO,CAAC,GAAG,EAAE,UAAU,CAAC;IACtC,YAAY,CAAC,EAAE,CAAC,wBAAwB,CAAC;IACzC,YAAY,CAAC,EAAE,CAAC,0BAA0B,CAAC;IAC3C,+BAAc,CAAC,KAAK,CAAC,oBAAoB,CAAC;IAC1C,YAAY,CAAC,EAAE,CAAC,sBAAsB,CAAC;IACvC,2BAAY,CAAC,KAAK,CAAC,iBAAO,CAAC,IAAI,EAAE,gBAAgB,CAAC;IAClD,YAAY,CAAC,EAAE,CAAC,yBAAyB,CAAC;IAC1C,2BAAY,CAAC,KAAK,CAAC,iBAAO,CAAC,IAAI,EAAE,mBAAmB,CAAC;IACrD,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,eAAe,CAAC;IACtC,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,eAAe,CAAC;CACvC,CAAC,CAAC;AAuBU,QAAA,sBAAsB,GAAG,yBAAiB,CAAC,IAAI,CAAC","sourcesContent":["import * as BufferLayout from \"@solana/buffer-layout\";\nimport { AuthorityId } from \"../models/AuthorityId\";\nimport { Lamport } from \"../models/basic\";\nimport { ExchangeRate } from \"../models/ExchangeRate\";\nimport { Slot } from \"../models/Slot\";\nimport { TokenAccountId } from \"../models/TokenAccountId\";\nimport { BigType } from \"../serialization/BigType\";\n\nexport const StakingPoolLayout = BufferLayout.struct([\n  BufferLayout.u8(\"version\"),\n  AuthorityId.field(\"ownerAuthority\"),\n  AuthorityId.field(\"adminAuthority\"),\n  TokenAccountId.field(\"rewardTokenPool\"),\n  Slot.field(\"lastUpdate\"),\n  Slot.field(\"endTime\"),\n  Slot.field(\"duration\"),\n  Slot.field(\"earliestRewardClaimTime\"),\n  ExchangeRate.field(BigType.D128, \"ratePerSlot\"),\n  ExchangeRate.field(BigType.D128, \"cumulativeRate\"),\n  Lamport.field(BigType.U64, \"poolSize\"),\n  BufferLayout.u8(\"bumpSeedStakingProgram\"),\n  BufferLayout.u8(\"subRewardTokenPoolOption\"),\n  TokenAccountId.field(\"subRewardTokenPool\"),\n  BufferLayout.u8(\"subRatePerSlotOption\"),\n  ExchangeRate.field(BigType.D128, \"subRatePerSlot\"),\n  BufferLayout.u8(\"subCumulativeRateOption\"),\n  ExchangeRate.field(BigType.D128, \"subCumulativeRate\"),\n  BufferLayout.blob(32, \"reserveField3\"),\n  BufferLayout.blob(29, \"reserveField4\"),\n]);\n\nexport interface StakingPoolProto {\n  version: number;\n  ownerAuthority: AuthorityId;\n  adminAuthority: AuthorityId;\n  rewardTokenPool: TokenAccountId;\n  lastUpdate: Slot;\n  endTime: Slot;\n  earliestRewardClaimTime: Slot;\n  duration: Slot;\n  ratePerSlot: ExchangeRate;\n  cumulativeRate: ExchangeRate;\n  poolSize: Lamport;\n  bumpSeedStakingProgram: number;\n  subRewardTokenPoolOption: number;\n  subRewardTokenPool: TokenAccountId;\n  subRatePerSlotOption: number;\n  subRatePerSlot: ExchangeRate;\n  subCumulativeRateOption: number;\n  subCumulativeRate: ExchangeRate;\n}\n\nexport const STAKING_POOL_DATA_SIZE = StakingPoolLayout.span;\n"]}