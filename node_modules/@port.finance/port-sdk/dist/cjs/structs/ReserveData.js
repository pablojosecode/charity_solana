"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RESERVE_DATA_SIZE = exports.isReserve = exports.ReserveLayout = exports.ReserveConfigLayout = exports.ReserveFeesLayout = exports.ReserveCollateralLayout = exports.ReserveLiquidityLayout = exports.ReserveConfigProtoLayout = void 0;
const BufferLayout = __importStar(require("@solana/buffer-layout"));
const basic_1 = require("../models/basic");
const ExchangeRate_1 = require("../models/ExchangeRate");
const MintId_1 = require("../models/MintId");
const staking_1 = require("../models/staking");
const TokenAccountId_1 = require("../models/TokenAccountId");
const BigField_1 = require("../serialization/BigField");
const BigType_1 = require("../serialization/BigType");
const Optional_1 = require("../serialization/Optional");
const Layout = __importStar(require("../serialization/layout"));
const SlotInfo_1 = require("./SlotInfo");
// only use in create-reserve instruction.
const ReserveConfigProtoLayout = (property) => BufferLayout.struct([
    BufferLayout.u8("optimalUtilizationRate"),
    BufferLayout.u8("loanToValueRatio"),
    BufferLayout.u8("liquidationBonus"),
    BufferLayout.u8("liquidationThreshold"),
    BufferLayout.u8("minBorrowRate"),
    BufferLayout.u8("optimalBorrowRate"),
    BufferLayout.u8("maxBorrowRate"),
    ReserveFeesProtoLayout("fees"),
    BufferLayout.u8("stakingPoolOption"),
    Layout.publicKey("stakingPool"),
], property);
exports.ReserveConfigProtoLayout = ReserveConfigProtoLayout;
// only use in create-reserve instruction.
const ReserveFeesProtoLayout = (property) => BufferLayout.struct([
    Layout.uint64("borrowFeeWad"),
    Layout.uint64("flashLoanFeeWad"),
    BufferLayout.u8("hostFeePercentage"),
], property);
const ReserveLiquidityLayout = (property) => BufferLayout.struct([
    MintId_1.MintId.field("mintPubkey"),
    BufferLayout.u8("mintDecimals"),
    TokenAccountId_1.TokenAccountId.field("supplyPubkey"),
    TokenAccountId_1.TokenAccountId.field("feeReceiver"),
    BufferLayout.u32("oracleOption"),
    Layout.publicKey("oraclePubkey"),
    basic_1.Lamport.field(BigType_1.BigType.U64, "availableAmount"),
    basic_1.Lamport.field(BigType_1.BigType.D128, "borrowedAmountWads"),
    ExchangeRate_1.ExchangeRate.field(BigType_1.BigType.D128, "cumulativeBorrowRateWads"),
    BigField_1.BigField.forType(BigType_1.BigType.D128, "marketPrice"),
], property);
exports.ReserveLiquidityLayout = ReserveLiquidityLayout;
const ReserveCollateralLayout = (property) => BufferLayout.struct([
    MintId_1.MintId.field("mintPubkey"),
    basic_1.Lamport.field(BigType_1.BigType.U64, "mintTotalSupply"),
    TokenAccountId_1.TokenAccountId.field("supplyPubkey"),
], property);
exports.ReserveCollateralLayout = ReserveCollateralLayout;
const ReserveFeesLayout = (property) => BufferLayout.struct([
    BigField_1.BigField.forType(BigType_1.BigType.D64, "borrowFeeWad"),
    BigField_1.BigField.forType(BigType_1.BigType.D64, "flashLoanFeeWad"),
    BufferLayout.u8("hostFeePercentage"),
], property);
exports.ReserveFeesLayout = ReserveFeesLayout;
const ReserveConfigLayout = (property) => BufferLayout.struct([
    basic_1.Percentage.field("optimalUtilizationRate"),
    basic_1.Percentage.field("loanToValueRatio"),
    basic_1.Percentage.field("liquidationBonus"),
    basic_1.Percentage.field("liquidationThreshold"),
    basic_1.Percentage.field("minBorrowRate"),
    basic_1.Percentage.field("optimalBorrowRate"),
    basic_1.Percentage.field("maxBorrowRate"),
    (0, exports.ReserveFeesLayout)("fees"),
    Optional_1.Optional.of(staking_1.StakingPoolId.field("stakingPoolId")),
], property);
exports.ReserveConfigLayout = ReserveConfigLayout;
exports.ReserveLayout = BufferLayout.struct([
    BufferLayout.u8("version"),
    (0, SlotInfo_1.SlotInfoLayout)("lastUpdate"),
    Layout.publicKey("lendingMarket"),
    (0, exports.ReserveLiquidityLayout)("liquidity"),
    (0, exports.ReserveCollateralLayout)("collateral"),
    (0, exports.ReserveConfigLayout)("config"),
    BufferLayout.blob(215, "padding2"),
]);
const isReserve = (info) => {
    return info.data.length === exports.ReserveLayout.span;
};
exports.isReserve = isReserve;
exports.RESERVE_DATA_SIZE = exports.ReserveLayout.span;
//# sourceMappingURL=ReserveData.js.map