"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.STAKING_POOL_DATA_SIZE = exports.StakingPoolLayout = void 0;
const BufferLayout = __importStar(require("@solana/buffer-layout"));
const AuthorityId_1 = require("../models/AuthorityId");
const basic_1 = require("../models/basic");
const ExchangeRate_1 = require("../models/ExchangeRate");
const Slot_1 = require("../models/Slot");
const TokenAccountId_1 = require("../models/TokenAccountId");
const BigType_1 = require("../serialization/BigType");
exports.StakingPoolLayout = BufferLayout.struct([
    BufferLayout.u8("version"),
    AuthorityId_1.AuthorityId.field("ownerAuthority"),
    AuthorityId_1.AuthorityId.field("adminAuthority"),
    TokenAccountId_1.TokenAccountId.field("rewardTokenPool"),
    Slot_1.Slot.field("lastUpdate"),
    Slot_1.Slot.field("endTime"),
    Slot_1.Slot.field("duration"),
    Slot_1.Slot.field("earliestRewardClaimTime"),
    ExchangeRate_1.ExchangeRate.field(BigType_1.BigType.D128, "ratePerSlot"),
    ExchangeRate_1.ExchangeRate.field(BigType_1.BigType.D128, "cumulativeRate"),
    basic_1.Lamport.field(BigType_1.BigType.U64, "poolSize"),
    BufferLayout.u8("bumpSeedStakingProgram"),
    BufferLayout.u8("subRewardTokenPoolOption"),
    TokenAccountId_1.TokenAccountId.field("subRewardTokenPool"),
    BufferLayout.u8("subRatePerSlotOption"),
    ExchangeRate_1.ExchangeRate.field(BigType_1.BigType.D128, "subRatePerSlot"),
    BufferLayout.u8("subCumulativeRateOption"),
    ExchangeRate_1.ExchangeRate.field(BigType_1.BigType.D128, "subCumulativeRate"),
    BufferLayout.blob(32, "reserveField3"),
    BufferLayout.blob(29, "reserveField4"),
]);
exports.STAKING_POOL_DATA_SIZE = exports.StakingPoolLayout.span;
//# sourceMappingURL=StakingPoolData.js.map