{"version":3,"file":"TokenAccountContext.js","sourceRoot":"","sources":["../../../src/models/TokenAccountContext.ts"],"names":[],"mappings":";;;AAIA,MAAa,mBAAmB;IAQ9B,YACE,QAAwB,EACxB,cAAyC;QAEzC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAEM,MAAM,CAAC,KAAK;QACjB,OAAO,mBAAmB,CAAC,yBAAyB,CAAC;IACvD,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,QAAwB;QAC1C,MAAM,cAAc,GAAG,IAAI,GAAG,EAAwB,CAAC;QACvD,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CACrB,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CACtD,CAAC;QACF,OAAO,IAAI,mBAAmB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;IAC3D,CAAC;IAEM,OAAO;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;IAClC,CAAC;IAEM,mBAAmB;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAEM,aAAa,CAAC,YAA4B;QAC/C,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;QACjD,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,kBAAkB,YAAY,EAAE,CAAC,CAAC;SACnD;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAEM,cAAc,CACnB,YAA4B;QAE5B,MAAM,GAAG,GAAG,YAAY,CAAC,QAAQ,EAAE,CAAC;QACpC,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACtC,CAAC;IAEM,qBAAqB,CAAC,MAAc;QACzC,MAAM,MAAM,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;QACnD,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,uBAAuB,MAAM,EAAE,CAAC,CAAC;SAClD;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAEM,sBAAsB,CAAC,MAAc;QAC1C,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ;aAC3B,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;aACvD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;QACzD,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;;AAlEH,kDAmEC;AAlEyB,6CAAyB,GAAG,mBAAmB,CAAC,KAAK,CAC3E,EAAE,CACH,CAAC","sourcesContent":["import { MintId } from \"./MintId\";\nimport { TokenAccount } from \"./TokenAccount\";\nimport { TokenAccountId } from \"./TokenAccountId\";\n\nexport class TokenAccountContext {\n  private static readonly SPL_ACCOUNT_CONTEXT_EMPTY = TokenAccountContext.index(\n    []\n  );\n\n  private readonly accounts: TokenAccount[];\n  private readonly bySplAccountId: Map<string, TokenAccount>;\n\n  private constructor(\n    accounts: TokenAccount[],\n    bySplAccountId: Map<string, TokenAccount>\n  ) {\n    this.accounts = accounts;\n    this.bySplAccountId = bySplAccountId;\n  }\n\n  public static empty(): TokenAccountContext {\n    return TokenAccountContext.SPL_ACCOUNT_CONTEXT_EMPTY;\n  }\n\n  public static index(accounts: TokenAccount[]): TokenAccountContext {\n    const bySplAccountId = new Map<string, TokenAccount>();\n    accounts.forEach((a) =>\n      bySplAccountId.set(a.getSplAccountId().toString(), a)\n    );\n    return new TokenAccountContext(accounts, bySplAccountId);\n  }\n\n  public isReady(): boolean {\n    return this.accounts.length > 0;\n  }\n\n  public getAllTokenAccounts(): TokenAccount[] {\n    return this.accounts;\n  }\n\n  public getSplAccount(splAccountId: TokenAccountId): TokenAccount {\n    const result = this.findSplAccount(splAccountId);\n    if (!result) {\n      throw new Error(`No account for ${splAccountId}`);\n    }\n\n    return result;\n  }\n\n  public findSplAccount(\n    splAccountId: TokenAccountId\n  ): TokenAccount | undefined {\n    const key = splAccountId.toString();\n    return this.bySplAccountId.get(key);\n  }\n\n  public getSplAccountByMintId(mintId: MintId): TokenAccount {\n    const result = this.findSplAccountByMintId(mintId);\n    if (!result) {\n      throw new Error(`No account for mint ${mintId}`);\n    }\n\n    return result;\n  }\n\n  public findSplAccountByMintId(mintId: MintId): TokenAccount | undefined {\n    const accounts = this.accounts\n      .filter((account) => account.getMintId().equals(mintId))\n      .sort((a, b) => -a.getAmount().compare(b.getAmount()));\n    return accounts[0];\n  }\n}\n"]}