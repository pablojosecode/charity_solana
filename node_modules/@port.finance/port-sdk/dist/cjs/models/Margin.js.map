{"version":3,"file":"Margin.js","sourceRoot":"","sources":["../../../src/models/Margin.ts"],"names":[],"mappings":";;;AAEA,mCAAgC;AAChC,+CAA4C;AAC5C,mCAAmD;AACnD,sDAAmD;AAEnD,6CAA0C;AAE1C,MAAa,MAAO,SAAQ,aAAa;IAGvC,YAAoB,KAAgB;QAClC,KAAK,CAAC,KAAK,CAAC,CAAC;IACf,CAAC;IAEM,MAAM,CAAC,EAAE,CAAC,GAAQ;QACvB,OAAO,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;IAEM,MAAM,CAAC,IAAI;QAChB,OAAO,MAAM,CAAC,WAAW,CAAC;IAC5B,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,QAAgB;QAClC,OAAO,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAEM,iBAAiB,CAAC,WAAuB;QAC9C,OAAO,uBAAU,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAChE,CAAC;IAEM,cAAc,CAAC,SAAiB;QACrC,IAAI,SAAS,CAAC,MAAM,EAAE,EAAE;YACtB,OAAO,yBAAW,CAAC,EAAE,EAAE,CAAC;SACzB;QAED,OAAO,yBAAW,CAAC,EAAE,CACnB,kBAAU,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAC1D,CAAC;IACJ,CAAC;IAEM,gBAAgB,CAAC,KAAgB;QACtC,OAAO,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;;AAnCH,wBAoCC;AAnCgB,kBAAW,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AAqC7C,MAAM,WAAY,SAAQ,oBAAoB;IAC5C,YAAmB,QAAgB;QACjC,KAAK,CAAC,iBAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAChC,CAAC;IAES,OAAO,CAAC,GAAQ;QACxB,OAAO,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;CACF","sourcesContent":["import Big, { BigSource } from \"big.js\";\n\nimport { Value } from \"./Value\";\nimport { MarginRatio } from \"./MarginRatio\";\nimport { Percentage, DecimalField } from \"./basic\";\nimport { BigType } from \"../serialization/BigType\";\nimport { Field } from \"../serialization/Field\";\nimport { QuoteValue } from \"./QuoteValue\";\n\nexport class Margin extends Value<Margin> {\n  private static MARGIN_ZERO = new Margin(0);\n\n  private constructor(value: BigSource) {\n    super(value);\n  }\n\n  public static of(raw: Big): Margin {\n    return new Margin(raw);\n  }\n\n  public static zero(): Margin {\n    return Margin.MARGIN_ZERO;\n  }\n\n  public static field(property: string): Field<Margin> {\n    return new MarginField(property);\n  }\n\n  public toCollateralValue(loanToValue: Percentage): QuoteValue {\n    return QuoteValue.of(this.getRaw().div(loanToValue.getRaw()));\n  }\n\n  public toRatioAgainst(threshold: Margin): MarginRatio {\n    if (threshold.isZero()) {\n      return MarginRatio.na();\n    }\n\n    return MarginRatio.of(\n      Percentage.fromOneBased(this.getRaw().div(threshold.raw))\n    );\n  }\n\n  public replaceWithValue(value: BigSource): Margin {\n    return new Margin(value);\n  }\n}\n\nclass MarginField extends DecimalField<Margin> {\n  public constructor(property: string) {\n    super(BigType.D128, property);\n  }\n\n  protected fromBig(big: Big): Margin {\n    return Margin.of(big);\n  }\n}\n"]}