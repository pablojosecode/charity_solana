{"version":3,"file":"TokenAccount.js","sourceRoot":"","sources":["../../../src/models/TokenAccount.ts"],"names":[],"mappings":";;;AAAA,qDAAkD;AAClD,qCAAkC;AAClC,mCAAkC;AAElC,yCAAsC;AAEtC,iDAAuD;AACvD,6CAA4C;AAE5C,MAAa,YAAY;IAMvB,YACE,SAAyB,EACzB,QAAkB,EAClB,MAAc,EACd,MAAe;QAEf,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;QAC9B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEM,MAAM,CAAC,SAAS,CAAC,GAAY;QAClC,OAAO,IAAI,YAAY,CACrB,+BAAc,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,EAC7B,mBAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,EACvB,eAAM,CAAC,MAAM,EAAE,EACf,eAAO,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CACjC,CAAC;IACJ,CAAC;IAEM,MAAM,CAAC,OAAO,CAAC,GAAY;QAChC,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7C,MAAM,WAAW,GAAG,yBAAa,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAEjD,WAAW,CAAC,IAAI,GAAG,IAAI,mBAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACnD,WAAW,CAAC,KAAK,GAAG,IAAI,mBAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACrD,WAAW,CAAC,MAAM,GAAG,eAAG,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAExD,OAAO,IAAI,YAAY,CACrB,+BAAc,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,EAC7B,mBAAQ,CAAC,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,EAC9B,eAAM,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,EAC3B,eAAO,CAAC,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,CAC/B,CAAC;IACJ,CAAC;IAEM,KAAK;QACV,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC;IAChC,CAAC;IAEM,eAAe;QACpB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAEM,WAAW;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAEM,QAAQ;QACb,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,QAAQ,EAAE,CAAC;IACrC,CAAC;IAEM,SAAS;QACd,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEM,UAAU;QACf,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;IAClC,CAAC;IAEM,SAAS;QACd,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;CACF;AAtED,oCAsEC","sourcesContent":["import { TokenAccountId } from \"./TokenAccountId\";\nimport { MintId } from \"./MintId\";\nimport { Lamport } from \"./basic\";\nimport { Parsed } from \"../serialization/Parsed\";\nimport { WalletId } from \"./WalletId\";\nimport { RawData } from \"../serialization/RawData\";\nimport { AccountLayout, u64 } from \"@solana/spl-token\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nexport class TokenAccount implements Parsed<TokenAccountId> {\n  private readonly splAccountId: TokenAccountId;\n  private readonly walletId: WalletId;\n  private readonly mintId: MintId;\n  private readonly amount: Lamport;\n\n  public constructor(\n    balanceId: TokenAccountId,\n    walletId: WalletId,\n    mintId: MintId,\n    amount: Lamport\n  ) {\n    this.splAccountId = balanceId;\n    this.walletId = walletId;\n    this.mintId = mintId;\n    this.amount = amount;\n  }\n\n  public static forNative(raw: RawData): TokenAccount {\n    return new TokenAccount(\n      TokenAccountId.of(raw.pubkey),\n      WalletId.of(raw.pubkey),\n      MintId.native(),\n      Lamport.of(raw.account.lamports)\n    );\n  }\n\n  public static fromRaw(raw: RawData): TokenAccount {\n    const buffer = Buffer.from(raw.account.data);\n    const accountInfo = AccountLayout.decode(buffer);\n\n    accountInfo.mint = new PublicKey(accountInfo.mint);\n    accountInfo.owner = new PublicKey(accountInfo.owner);\n    accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n    return new TokenAccount(\n      TokenAccountId.of(raw.pubkey),\n      WalletId.of(accountInfo.owner),\n      MintId.of(accountInfo.mint),\n      Lamport.of(accountInfo.amount)\n    );\n  }\n\n  public getId(): TokenAccountId {\n    return this.getSplAccountId();\n  }\n\n  public getSplAccountId(): TokenAccountId {\n    return this.splAccountId;\n  }\n\n  public getWalletId(): WalletId {\n    return this.walletId;\n  }\n\n  public isNative(): boolean {\n    return this.getMintId().isNative();\n  }\n\n  public getMintId(): MintId {\n    return this.mintId;\n  }\n\n  public isPositive(): boolean {\n    return this.amount.isPositive();\n  }\n\n  public getAmount(): Lamport {\n    return this.amount;\n  }\n}\n"]}