import { TokenAccountId } from "./TokenAccountId";
import { MintId } from "./MintId";
import { Lamport } from "./basic";
import { Parsed } from "../serialization/Parsed";
import { WalletId } from "./WalletId";
import { RawData } from "../serialization/RawData";
export declare class TokenAccount implements Parsed<TokenAccountId> {
    private readonly splAccountId;
    private readonly walletId;
    private readonly mintId;
    private readonly amount;
    constructor(balanceId: TokenAccountId, walletId: WalletId, mintId: MintId, amount: Lamport);
    static forNative(raw: RawData): TokenAccount;
    static fromRaw(raw: RawData): TokenAccount;
    getId(): TokenAccountId;
    getSplAccountId(): TokenAccountId;
    getWalletId(): WalletId;
    isNative(): boolean;
    getMintId(): MintId;
    isPositive(): boolean;
    getAmount(): Lamport;
}
//# sourceMappingURL=TokenAccount.d.ts.map