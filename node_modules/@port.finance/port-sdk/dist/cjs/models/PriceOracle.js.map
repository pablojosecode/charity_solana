{"version":3,"file":"PriceOracle.js","sourceRoot":"","sources":["../../../src/models/PriceOracle.ts"],"names":[],"mappings":";;;AAGA,MAAa,WAAW;IAGtB,YAAY,KAA8B;QACxC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,MAAoB;QACtC,MAAM,KAAK,GAAG,IAAI,GAAG,EAAsB,CAAC;QAC5C,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;QAC1E,OAAO,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAEM,QAAQ,CAAC,MAAc;QAC5B,MAAM,GAAG,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAC9B,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC;CACF;AAjBD,kCAiBC","sourcesContent":["import { AssetPrice } from \"./AssetPrice\";\nimport { MintId } from \"./MintId\";\n\nexport class PriceOracle {\n  private readonly cache: Map<string, AssetPrice>;\n\n  constructor(cache: Map<string, AssetPrice>) {\n    this.cache = cache;\n  }\n\n  public static index(prices: AssetPrice[]): PriceOracle {\n    const cache = new Map<string, AssetPrice>();\n    prices.forEach((price) => cache.set(price.getMintId().toString(), price));\n    return new PriceOracle(cache);\n  }\n\n  public getPrice(mintId: MintId): AssetPrice | undefined {\n    const key = mintId.toString();\n    return this.cache.get(key);\n  }\n}\n"]}