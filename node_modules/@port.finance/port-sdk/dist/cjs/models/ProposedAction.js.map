{"version":3,"file":"ProposedAction.js","sourceRoot":"","sources":["../../../src/models/ProposedAction.ts"],"names":[],"mappings":"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","sourcesContent":["import { Loan } from \"./Loan\";\nimport { Collateral } from \"./Collateral\";\nimport { ProfileEntry } from \"./ProfileEntry\";\nimport { Asset } from \"./Asset\";\nimport { Share } from \"./Share\";\nimport { MintId } from \"./MintId\";\nimport { ReserveId } from \"./ReserveId\";\n\nexport class ProposedAction {\n  private readonly assets: Asset[];\n  private readonly shares: Share[];\n  private readonly collaterals: Collateral[];\n  private readonly loans: Loan[];\n\n  constructor(\n    assets: Asset[],\n    shares: Share[],\n    collaterals: Collateral[],\n    loans: Loan[]\n  ) {\n    this.assets = assets;\n    this.shares = shares;\n    this.collaterals = collaterals;\n    this.loans = loans;\n  }\n\n  public static newProposal(args: {\n    newAsset?: Asset;\n    newShare?: Share;\n    newCollateral?: Collateral;\n    newLoan?: Loan;\n  }): ProposedAction {\n    const assets: Asset[] = [];\n    const shares: Share[] = [];\n    const collaterals: Collateral[] = [];\n    const loans: Loan[] = [];\n    if (args.newAsset) {\n      assets.push(args.newAsset);\n    }\n    if (args.newShare) {\n      shares.push(args.newShare);\n    }\n    if (args.newCollateral) {\n      collaterals.push(args.newCollateral);\n    }\n    if (args.newLoan) {\n      loans.push(args.newLoan);\n    }\n    return new ProposedAction(assets, shares, collaterals, loans);\n  }\n\n  public getUpdatedAsset(assetMintId: MintId): Asset | undefined {\n    return this.assets.find((a) => a.getMintId().equals(assetMintId));\n  }\n\n  public getUpdatedShare(shareMintId: MintId): Share | undefined {\n    return this.shares.find((s) => s.getMintId().equals(shareMintId));\n  }\n\n  public getUpdatedCollateral(reserveId: ReserveId): Collateral | undefined {\n    return this.collaterals.find((c) => c.getReserveId().equals(reserveId));\n  }\n\n  public getUpdatedLoan(reserveId: ReserveId): Loan | undefined {\n    return this.loans.find((l) => l.getReserveId().equals(reserveId));\n  }\n\n  public getUpdatedCollaterals(collaterals: Collateral[]): Collateral[] {\n    return ProposedAction.proposal(collaterals, this.collaterals);\n  }\n\n  public getUpdatedLoans(loans: Loan[]): Loan[] {\n    return ProposedAction.proposal(loans, this.loans);\n  }\n\n  private static proposal<T extends ProfileEntry<T>>(\n    entries: T[],\n    proposal: T[]\n  ): T[] {\n    if (!proposal.length) {\n      return entries;\n    }\n\n    const map = new Map<string, T>();\n    for (const e of entries) {\n      map.set(e.getReserveId().toBase58(), e);\n    }\n    for (const e of proposal) {\n      map.set(e.getReserveId().toBase58(), e);\n    }\n    return Array.from(map.values());\n  }\n}\n"]}