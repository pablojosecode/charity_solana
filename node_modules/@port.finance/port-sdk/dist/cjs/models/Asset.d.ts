import { Token, Lamport, Percentage } from "./basic";
import { Apy } from "./Apy";
import { QuoteValue } from "./QuoteValue";
import { AssetPrice } from "./AssetPrice";
import { QuantityContext } from "./QuantityContext";
import { Share } from "./Share";
import { AssetExchangeRate } from "./AssetExchangeRate";
import { MintId } from "./MintId";
import { TokenAccount } from "./TokenAccount";
export declare class Asset extends Token<Asset> {
    static readonly MIN_NATIVE_LAMPORT: Asset;
    private static SIGNIFICANT_DIGITS;
    private static LARGE_THRESHOLD;
    private static FORMATTER_NORMAL;
    private static FORMATTER_LARGE;
    private constructor();
    static fromString(str: string, mintId: MintId, context: QuantityContext): Asset;
    static zero(mintId: MintId): Asset;
    static max(mintId: MintId): Asset;
    static native(lamport: Lamport): Asset;
    static fromTokenAccount(account: TokenAccount): Asset;
    static of(mintId: MintId, lamport?: Lamport): Asset;
    isNative(): boolean;
    toValue(price: AssetPrice, quantityContext: QuantityContext): QuoteValue;
    toInterest(supplyApy: Apy): Asset;
    toShare(exchangeRatio: AssetExchangeRate): Share;
    addFee(pct: Percentage): Asset;
    toNumber(context: QuantityContext): number;
    plain(context: QuantityContext): string;
    toLimitRoundNumber(context: QuantityContext): number;
    print(context: QuantityContext | undefined, symbol?: string): string;
    protected wrap(value: Lamport): Asset;
}
//# sourceMappingURL=Asset.d.ts.map