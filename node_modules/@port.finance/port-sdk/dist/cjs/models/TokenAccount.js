"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenAccount = void 0;
const TokenAccountId_1 = require("./TokenAccountId");
const MintId_1 = require("./MintId");
const basic_1 = require("./basic");
const WalletId_1 = require("./WalletId");
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
class TokenAccount {
    constructor(balanceId, walletId, mintId, amount) {
        this.splAccountId = balanceId;
        this.walletId = walletId;
        this.mintId = mintId;
        this.amount = amount;
    }
    static forNative(raw) {
        return new TokenAccount(TokenAccountId_1.TokenAccountId.of(raw.pubkey), WalletId_1.WalletId.of(raw.pubkey), MintId_1.MintId.native(), basic_1.Lamport.of(raw.account.lamports));
    }
    static fromRaw(raw) {
        const buffer = Buffer.from(raw.account.data);
        const accountInfo = spl_token_1.AccountLayout.decode(buffer);
        accountInfo.mint = new web3_js_1.PublicKey(accountInfo.mint);
        accountInfo.owner = new web3_js_1.PublicKey(accountInfo.owner);
        accountInfo.amount = spl_token_1.u64.fromBuffer(accountInfo.amount);
        return new TokenAccount(TokenAccountId_1.TokenAccountId.of(raw.pubkey), WalletId_1.WalletId.of(accountInfo.owner), MintId_1.MintId.of(accountInfo.mint), basic_1.Lamport.of(accountInfo.amount));
    }
    getId() {
        return this.getSplAccountId();
    }
    getSplAccountId() {
        return this.splAccountId;
    }
    getWalletId() {
        return this.walletId;
    }
    isNative() {
        return this.getMintId().isNative();
    }
    getMintId() {
        return this.mintId;
    }
    isPositive() {
        return this.amount.isPositive();
    }
    getAmount() {
        return this.amount;
    }
}
exports.TokenAccount = TokenAccount;
//# sourceMappingURL=TokenAccount.js.map