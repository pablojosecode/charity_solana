"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PortProfile = void 0;
const PortProfileId_1 = require("./PortProfileId");
const Collateral_1 = require("./Collateral");
const Loan_1 = require("./Loan");
const ReserveId_1 = require("./ReserveId");
const Margin_1 = require("./Margin");
const BufferLayout = __importStar(require("@solana/buffer-layout"));
const structs_1 = require("../structs");
class PortProfile {
    constructor(profileId, collaterals, loans, loanMargin, initialMargin, maintenanceMargin, owner, depositedValue) {
        this.profileId = profileId;
        this.collaterals = collaterals;
        this.loans = loans;
        this.loanMargin = loanMargin;
        this.initialMargin = initialMargin;
        this.maintenanceMargin = maintenanceMargin;
        this.owner = owner;
        this.depositedValue = depositedValue;
    }
    static newAccount(profileId) {
        return new PortProfile(profileId, [], [], Margin_1.Margin.zero(), Margin_1.Margin.zero(), Margin_1.Margin.zero());
    }
    static fromRaw(raw) {
        const profileId = PortProfileId_1.PortProfileId.of(raw.pubkey);
        // eslint-disable-next-line new-cap
        const proto = PortProfileParser(raw.account.data);
        const collaterals = proto.deposits.map((c) => new Collateral_1.Collateral(ReserveId_1.ReserveId.of(c.depositReserve), c.depositedAmount));
        const loans = proto.borrows.map((l) => new Loan_1.Loan(l.borrowReserve, l.borrowedAmountWads, l.cumulativeBorrowRateWads));
        const loanMargin = proto.borrowedValue;
        const initialMargin = proto.allowedBorrowValue;
        const maintenanceMargin = proto.unhealthyBorrowValue;
        const depositedValue = proto.depositedValue;
        const owner = proto.owner;
        return new PortProfile(profileId, collaterals, loans, loanMargin, initialMargin, maintenanceMargin, owner, depositedValue);
    }
    getDepositedValue() {
        return this.depositedValue;
    }
    getOwner() {
        return this.owner;
    }
    getId() {
        return this.getProfileId();
    }
    getProfileId() {
        return this.profileId;
    }
    getCollateral(reserveId) {
        return this.getCollaterals().find((c) => c.getReserveId().equals(reserveId));
    }
    getCollateralReserveIds() {
        return this.getCollaterals().map((c) => c.getReserveId());
    }
    getCollaterals() {
        return this.collaterals;
    }
    getLoan(reserveId) {
        return this.getLoans().find((l) => l.getReserveId().equals(reserveId));
    }
    getLoanReserveIds() {
        return this.getLoans().map((l) => l.getReserveId());
    }
    getLoans() {
        return this.loans;
    }
    getLoanMargin() {
        return this.loanMargin;
    }
    getInitialMargin() {
        return this.initialMargin;
    }
    getMaintenanceMargin() {
        return this.maintenanceMargin;
    }
    getRiskFactor() {
        return this.getLoanMargin().toRatioAgainst(this.getMaintenanceMargin());
    }
    getLoanToValue() {
        return this.getLoanMargin().toRatioAgainst(this.getInitialMargin());
    }
}
exports.PortProfile = PortProfile;
const PortProfileParser = (buffer) => {
    const { version, lastUpdate, lendingMarket, owner, depositedValue, borrowedValue, allowedBorrowValue, unhealthyBorrowValue, depositsLen, borrowsLen, dataFlat, } = structs_1.ObligationLayout.decode(buffer);
    const depositsBuffer = dataFlat.slice(0, depositsLen * structs_1.ObligationCollateralLayout.span);
    const deposits = BufferLayout.seq(structs_1.ObligationCollateralLayout, depositsLen).decode(depositsBuffer);
    const borrowsBuffer = dataFlat.slice(depositsBuffer.length, depositsBuffer.length + borrowsLen * structs_1.ObligationLiquidityLayout.span);
    const borrows = BufferLayout.seq(structs_1.ObligationLiquidityLayout, borrowsLen).decode(borrowsBuffer);
    return {
        version,
        lastUpdate,
        lendingMarket,
        owner,
        depositedValue,
        borrowedValue,
        allowedBorrowValue,
        unhealthyBorrowValue,
        deposits,
        borrows,
    };
};
//# sourceMappingURL=PortProfile.js.map