"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Margin = void 0;
const Value_1 = require("./Value");
const MarginRatio_1 = require("./MarginRatio");
const basic_1 = require("./basic");
const BigType_1 = require("../serialization/BigType");
const QuoteValue_1 = require("./QuoteValue");
class Margin extends Value_1.Value {
    constructor(value) {
        super(value);
    }
    static of(raw) {
        return new Margin(raw);
    }
    static zero() {
        return Margin.MARGIN_ZERO;
    }
    static field(property) {
        return new MarginField(property);
    }
    toCollateralValue(loanToValue) {
        return QuoteValue_1.QuoteValue.of(this.getRaw().div(loanToValue.getRaw()));
    }
    toRatioAgainst(threshold) {
        if (threshold.isZero()) {
            return MarginRatio_1.MarginRatio.na();
        }
        return MarginRatio_1.MarginRatio.of(basic_1.Percentage.fromOneBased(this.getRaw().div(threshold.raw)));
    }
    replaceWithValue(value) {
        return new Margin(value);
    }
}
exports.Margin = Margin;
Margin.MARGIN_ZERO = new Margin(0);
class MarginField extends basic_1.DecimalField {
    constructor(property) {
        super(BigType_1.BigType.D128, property);
    }
    fromBig(big) {
        return Margin.of(big);
    }
}
//# sourceMappingURL=Margin.js.map