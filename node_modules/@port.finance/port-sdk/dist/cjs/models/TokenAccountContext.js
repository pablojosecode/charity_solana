"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenAccountContext = void 0;
class TokenAccountContext {
    constructor(accounts, bySplAccountId) {
        this.accounts = accounts;
        this.bySplAccountId = bySplAccountId;
    }
    static empty() {
        return TokenAccountContext.SPL_ACCOUNT_CONTEXT_EMPTY;
    }
    static index(accounts) {
        const bySplAccountId = new Map();
        accounts.forEach((a) => bySplAccountId.set(a.getSplAccountId().toString(), a));
        return new TokenAccountContext(accounts, bySplAccountId);
    }
    isReady() {
        return this.accounts.length > 0;
    }
    getAllTokenAccounts() {
        return this.accounts;
    }
    getSplAccount(splAccountId) {
        const result = this.findSplAccount(splAccountId);
        if (!result) {
            throw new Error(`No account for ${splAccountId}`);
        }
        return result;
    }
    findSplAccount(splAccountId) {
        const key = splAccountId.toString();
        return this.bySplAccountId.get(key);
    }
    getSplAccountByMintId(mintId) {
        const result = this.findSplAccountByMintId(mintId);
        if (!result) {
            throw new Error(`No account for mint ${mintId}`);
        }
        return result;
    }
    findSplAccountByMintId(mintId) {
        const accounts = this.accounts
            .filter((account) => account.getMintId().equals(mintId))
            .sort((a, b) => -a.getAmount().compare(b.getAmount()));
        return accounts[0];
    }
}
exports.TokenAccountContext = TokenAccountContext;
TokenAccountContext.SPL_ACCOUNT_CONTEXT_EMPTY = TokenAccountContext.index([]);
//# sourceMappingURL=TokenAccountContext.js.map