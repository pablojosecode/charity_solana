"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuoteValue = void 0;
const Value_1 = require("./Value");
const ValueRatio_1 = require("./ValueRatio");
const basic_1 = require("./basic");
const BigType_1 = require("../serialization/BigType");
const Margin_1 = require("./Margin");
class QuoteValue extends Value_1.Value {
    constructor(raw) {
        super(raw);
    }
    static of(raw) {
        const result = new QuoteValue(raw);
        if (result.isZero()) {
            return QuoteValue.zero();
        }
        return result;
    }
    static zero() {
        return QuoteValue.QUOTE_VALUE_ZERO;
    }
    static field(property) {
        return new QuoteValueField(property);
    }
    toCollateralMargin(loanToValue) {
        return Margin_1.Margin.of(this.getRaw().mul(loanToValue.getRaw()));
    }
    toLoanMargin() {
        return Margin_1.Margin.of(this.getRaw());
    }
    toRatioAgainst(threshold) {
        if (threshold.isZero()) {
            return ValueRatio_1.ValueRatio.na();
        }
        const pct = basic_1.Percentage.fromOneBased(this.getRaw().div(threshold.raw));
        return ValueRatio_1.ValueRatio.of(pct);
    }
    replaceWithValue(value) {
        return new QuoteValue(value);
    }
}
exports.QuoteValue = QuoteValue;
QuoteValue.QUOTE_VALUE_ZERO = new QuoteValue(0);
class QuoteValueField extends basic_1.DecimalField {
    constructor(property) {
        super(BigType_1.BigType.D128, property);
    }
    fromBig(big) {
        return QuoteValue.of(big);
    }
}
//# sourceMappingURL=QuoteValue.js.map