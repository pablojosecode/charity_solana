{"version":3,"file":"PortProfile.js","sourceRoot":"","sources":["../../../src/models/PortProfile.ts"],"names":[],"mappings":"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","sourcesContent":["import { PortProfileId } from \"./PortProfileId\";\nimport { Collateral } from \"./Collateral\";\nimport { Loan } from \"./Loan\";\nimport { ReserveId } from \"./ReserveId\";\nimport { Margin } from \"./Margin\";\nimport { MarginRatio } from \"./MarginRatio\";\nimport { Parsed } from \"../serialization/Parsed\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport { RawData } from \"../serialization/RawData\";\nimport {\n  ObligationCollateralLayout,\n  ObligationLayout,\n  ObligationLiquidityLayout,\n  PortProfileCollateralData,\n  PortProfileData,\n  PortProfileLoanData,\n  ProtoObligation,\n} from \"../structs\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { QuoteValue } from \"./QuoteValue\";\n\nexport class PortProfile implements Parsed<PortProfileId> {\n  private readonly profileId: PortProfileId;\n  private readonly collaterals: Collateral[];\n  private readonly loans: Loan[];\n  private readonly loanMargin: Margin;\n  private readonly initialMargin: Margin;\n  private readonly maintenanceMargin: Margin;\n\n  // use in api-server\n  private readonly owner: PublicKey | undefined;\n  private readonly depositedValue: QuoteValue | undefined;\n\n  private constructor(\n    profileId: PortProfileId,\n    collaterals: Collateral[],\n    loans: Loan[],\n    loanMargin: Margin,\n    initialMargin: Margin,\n    maintenanceMargin: Margin,\n    owner?: PublicKey,\n    depositedValue?: QuoteValue\n  ) {\n    this.profileId = profileId;\n    this.collaterals = collaterals;\n    this.loans = loans;\n    this.loanMargin = loanMargin;\n    this.initialMargin = initialMargin;\n    this.maintenanceMargin = maintenanceMargin;\n    this.owner = owner;\n    this.depositedValue = depositedValue;\n  }\n\n  public static newAccount(profileId: PortProfileId): PortProfile {\n    return new PortProfile(\n      profileId,\n      [],\n      [],\n      Margin.zero(),\n      Margin.zero(),\n      Margin.zero()\n    );\n  }\n\n  public static fromRaw(raw: RawData): PortProfile {\n    const profileId = PortProfileId.of(raw.pubkey);\n    // eslint-disable-next-line new-cap\n    const proto = PortProfileParser(raw.account.data);\n\n    const collaterals = proto.deposits.map(\n      (c) => new Collateral(ReserveId.of(c.depositReserve), c.depositedAmount)\n    );\n    const loans = proto.borrows.map(\n      (l) =>\n        new Loan(\n          l.borrowReserve,\n          l.borrowedAmountWads,\n          l.cumulativeBorrowRateWads\n        )\n    );\n    const loanMargin = proto.borrowedValue;\n    const initialMargin = proto.allowedBorrowValue;\n    const maintenanceMargin = proto.unhealthyBorrowValue;\n    const depositedValue = proto.depositedValue;\n    const owner = proto.owner;\n    return new PortProfile(\n      profileId,\n      collaterals,\n      loans,\n      loanMargin,\n      initialMargin,\n      maintenanceMargin,\n      owner,\n      depositedValue\n    );\n  }\n\n  public getDepositedValue(): QuoteValue | undefined {\n    return this.depositedValue;\n  }\n\n  public getOwner(): PublicKey | undefined {\n    return this.owner;\n  }\n\n  public getId(): PortProfileId {\n    return this.getProfileId();\n  }\n\n  public getProfileId(): PortProfileId {\n    return this.profileId;\n  }\n\n  public getCollateral(reserveId: ReserveId): Collateral | undefined {\n    return this.getCollaterals().find((c) =>\n      c.getReserveId().equals(reserveId)\n    );\n  }\n\n  public getCollateralReserveIds(): ReserveId[] {\n    return this.getCollaterals().map((c) => c.getReserveId());\n  }\n\n  public getCollaterals(): Collateral[] {\n    return this.collaterals;\n  }\n\n  public getLoan(reserveId: ReserveId): Loan | undefined {\n    return this.getLoans().find((l) => l.getReserveId().equals(reserveId));\n  }\n\n  public getLoanReserveIds(): ReserveId[] {\n    return this.getLoans().map((l) => l.getReserveId());\n  }\n\n  public getLoans(): Loan[] {\n    return this.loans;\n  }\n\n  public getLoanMargin(): Margin {\n    return this.loanMargin;\n  }\n\n  public getInitialMargin(): Margin {\n    return this.initialMargin;\n  }\n\n  public getMaintenanceMargin(): Margin {\n    return this.maintenanceMargin;\n  }\n\n  public getRiskFactor(): MarginRatio {\n    return this.getLoanMargin().toRatioAgainst(this.getMaintenanceMargin());\n  }\n\n  public getLoanToValue(): MarginRatio {\n    return this.getLoanMargin().toRatioAgainst(this.getInitialMargin());\n  }\n}\n\nconst PortProfileParser = (buffer: Buffer) => {\n  const {\n    version,\n    lastUpdate,\n    lendingMarket,\n    owner,\n    depositedValue,\n    borrowedValue,\n    allowedBorrowValue,\n    unhealthyBorrowValue,\n    depositsLen,\n    borrowsLen,\n    dataFlat,\n  } = ObligationLayout.decode(buffer) as ProtoObligation;\n\n  const depositsBuffer = dataFlat.slice(\n    0,\n    depositsLen * ObligationCollateralLayout.span\n  );\n  const deposits = BufferLayout.seq(\n    ObligationCollateralLayout,\n    depositsLen\n  ).decode(depositsBuffer) as PortProfileCollateralData[];\n\n  const borrowsBuffer = dataFlat.slice(\n    depositsBuffer.length,\n    depositsBuffer.length + borrowsLen * ObligationLiquidityLayout.span\n  );\n  const borrows = BufferLayout.seq(\n    ObligationLiquidityLayout,\n    borrowsLen\n  ).decode(borrowsBuffer) as PortProfileLoanData[];\n\n  return {\n    version,\n    lastUpdate,\n    lendingMarket,\n    owner,\n    depositedValue,\n    borrowedValue,\n    allowedBorrowValue,\n    unhealthyBorrowValue,\n    deposits,\n    borrows,\n  } as PortProfileData;\n};\n"]}