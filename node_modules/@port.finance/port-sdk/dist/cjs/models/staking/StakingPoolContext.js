"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StakingPoolContext = void 0;
class StakingPoolContext {
    constructor(pools, byStakingPoolId) {
        this.pools = pools;
        this.byStakingPoolId = byStakingPoolId;
    }
    static empty() {
        return StakingPoolContext.STAKING_POOL_CONTEXT_EMPTY;
    }
    static index(accounts) {
        if (!accounts.length) {
            return StakingPoolContext.empty();
        }
        const byStakingPoolId = new Map();
        accounts.forEach((a) => byStakingPoolId.set(a.getStakingPoolId().toString(), a));
        return new StakingPoolContext(accounts, byStakingPoolId);
    }
    getAllStakingPools() {
        return this.pools;
    }
    getStakingPool(stakingPoolId) {
        const result = this.findStakingPool(stakingPoolId);
        if (!result) {
            throw new Error(`No staking pool for ${stakingPoolId}`);
        }
        return result;
    }
    findStakingPool(stakingPoolId) {
        const key = stakingPoolId.toString();
        return this.byStakingPoolId.get(key);
    }
}
exports.StakingPoolContext = StakingPoolContext;
StakingPoolContext.STAKING_POOL_CONTEXT_EMPTY = new StakingPoolContext([], new Map());
//# sourceMappingURL=StakingPoolContext.js.map