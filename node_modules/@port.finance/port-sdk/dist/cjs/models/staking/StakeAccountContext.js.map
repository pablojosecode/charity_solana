{"version":3,"file":"StakeAccountContext.js","sourceRoot":"","sources":["../../../../src/models/staking/StakeAccountContext.ts"],"names":[],"mappings":";;;AAIA,MAAa,mBAAmB;IAW9B,YACE,QAAwB,EACxB,gBAA2C,EAC3C,eAA0C;QAE1C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IACzC,CAAC;IAEM,MAAM,CAAC,KAAK;QACjB,OAAO,mBAAmB,CAAC,2BAA2B,CAAC;IACzD,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,QAAwB;QAC1C,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACpB,OAAO,mBAAmB,CAAC,KAAK,EAAE,CAAC;SACpC;QAED,MAAM,gBAAgB,GAAG,IAAI,GAAG,EAAwB,CAAC;QACzD,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CACrB,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAC1D,CAAC;QACF,MAAM,eAAe,GAAG,IAAI,GAAG,EAAwB,CAAC;QACxD,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CACrB,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,gBAAgB,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CACxD,CAAC;QACF,OAAO,IAAI,mBAAmB,CAAC,QAAQ,EAAE,gBAAgB,EAAE,eAAe,CAAC,CAAC;IAC9E,CAAC;IAEM,mBAAmB;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAEM,eAAe,CAAC,cAA8B;QACnD,MAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;QACrD,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,kBAAkB,cAAc,EAAE,CAAC,CAAC;SACrD;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAEM,8BAA8B,CACnC,aAA4B;QAE5B,MAAM,MAAM,GAAG,IAAI,CAAC,+BAA+B,CAAC,aAAa,CAAC,CAAC;QACnE,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,+BAA+B,aAAa,EAAE,CAAC,CAAC;SACjE;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAEM,gBAAgB,CACrB,cAA8B;QAE9B,MAAM,GAAG,GAAG,cAAc,CAAC,QAAQ,EAAE,CAAC;QACtC,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACxC,CAAC;IAEM,+BAA+B,CACpC,aAA4B;QAE5B,MAAM,GAAG,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;QACrC,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACvC,CAAC;;AA7EH,kDA8EC;AA7EyB,+CAA2B,GAAG,IAAI,mBAAmB,CAC3E,EAAE,EACF,IAAI,GAAG,EAAE,EACT,IAAI,GAAG,EAAE,CACV,CAAC","sourcesContent":["import { StakeAccount } from \"./StakeAccount\";\nimport { StakeAccountId } from \"./StakeAccountId\";\nimport { StakingPoolId } from \"./StakingPoolId\";\n\nexport class StakeAccountContext {\n  private static readonly STAKE_ACCOUNT_CONTEXT_EMPTY = new StakeAccountContext(\n    [],\n    new Map(),\n    new Map()\n  );\n\n  private readonly accounts: StakeAccount[];\n  private readonly byStakeAccountId: Map<string, StakeAccount>;\n  private readonly byStakingPoolId: Map<string, StakeAccount>;\n\n  private constructor(\n    accounts: StakeAccount[],\n    byStakeAccountId: Map<string, StakeAccount>,\n    byStakingPoolId: Map<string, StakeAccount>\n  ) {\n    this.accounts = accounts;\n    this.byStakeAccountId = byStakeAccountId;\n    this.byStakingPoolId = byStakingPoolId;\n  }\n\n  public static empty(): StakeAccountContext {\n    return StakeAccountContext.STAKE_ACCOUNT_CONTEXT_EMPTY;\n  }\n\n  public static index(accounts: StakeAccount[]): StakeAccountContext {\n    if (!accounts.length) {\n      return StakeAccountContext.empty();\n    }\n\n    const byStakeAccountId = new Map<string, StakeAccount>();\n    accounts.forEach((a) =>\n      byStakeAccountId.set(a.getStakeAccountId().toString(), a)\n    );\n    const byStakingPoolId = new Map<string, StakeAccount>();\n    accounts.forEach((a) =>\n      byStakingPoolId.set(a.getStakingPoolId().toString(), a)\n    );\n    return new StakeAccountContext(accounts, byStakeAccountId, byStakingPoolId);\n  }\n\n  public getAllStakeAccounts(): StakeAccount[] {\n    return this.accounts;\n  }\n\n  public getStakeAccount(stakeAccountId: StakeAccountId): StakeAccount {\n    const result = this.findStakeAccount(stakeAccountId);\n    if (!result) {\n      throw new Error(`No account for ${stakeAccountId}`);\n    }\n\n    return result;\n  }\n\n  public getStakeAccountByStakingPoolId(\n    stakingPoolId: StakingPoolId\n  ): StakeAccount {\n    const result = this.findStakeAccountByStakingPoolId(stakingPoolId);\n    if (!result) {\n      throw new Error(`No account for staking pool ${stakingPoolId}`);\n    }\n\n    return result;\n  }\n\n  public findStakeAccount(\n    stakeAccountId: StakeAccountId\n  ): StakeAccount | undefined {\n    const key = stakeAccountId.toString();\n    return this.byStakeAccountId.get(key);\n  }\n\n  public findStakeAccountByStakingPoolId(\n    stakingPoolId: StakingPoolId\n  ): StakeAccount | undefined {\n    const key = stakingPoolId.toString();\n    return this.byStakingPoolId.get(key);\n  }\n}\n"]}