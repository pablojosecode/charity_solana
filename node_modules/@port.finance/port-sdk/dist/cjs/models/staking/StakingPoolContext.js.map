{"version":3,"file":"StakingPoolContext.js","sourceRoot":"","sources":["../../../../src/models/staking/StakingPoolContext.ts"],"names":[],"mappings":";;;AAGA,MAAa,kBAAkB;IAS7B,YACE,KAAoB,EACpB,eAAyC;QAEzC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IACzC,CAAC;IAEM,MAAM,CAAC,KAAK;QACjB,OAAO,kBAAkB,CAAC,0BAA0B,CAAC;IACvD,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,QAAuB;QACzC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACpB,OAAO,kBAAkB,CAAC,KAAK,EAAE,CAAC;SACnC;QAED,MAAM,eAAe,GAAG,IAAI,GAAG,EAAuB,CAAC;QACvD,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CACrB,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,gBAAgB,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CACxD,CAAC;QACF,OAAO,IAAI,kBAAkB,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;IAC3D,CAAC;IAEM,kBAAkB;QACvB,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAEM,cAAc,CAAC,aAA4B;QAChD,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;QACnD,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,uBAAuB,aAAa,EAAE,CAAC,CAAC;SACzD;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAEM,eAAe,CACpB,aAA4B;QAE5B,MAAM,GAAG,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;QACrC,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACvC,CAAC;;AAnDH,gDAoDC;AAnDyB,6CAA0B,GAAG,IAAI,kBAAkB,CACzE,EAAE,EACF,IAAI,GAAG,EAAE,CACV,CAAC","sourcesContent":["import { StakingPool } from \"./StakingPool\";\nimport { StakingPoolId } from \"./StakingPoolId\";\n\nexport class StakingPoolContext {\n  private static readonly STAKING_POOL_CONTEXT_EMPTY = new StakingPoolContext(\n    [],\n    new Map()\n  );\n\n  private readonly pools: StakingPool[];\n  private readonly byStakingPoolId: Map<string, StakingPool>;\n\n  private constructor(\n    pools: StakingPool[],\n    byStakingPoolId: Map<string, StakingPool>\n  ) {\n    this.pools = pools;\n    this.byStakingPoolId = byStakingPoolId;\n  }\n\n  public static empty(): StakingPoolContext {\n    return StakingPoolContext.STAKING_POOL_CONTEXT_EMPTY;\n  }\n\n  public static index(accounts: StakingPool[]): StakingPoolContext {\n    if (!accounts.length) {\n      return StakingPoolContext.empty();\n    }\n\n    const byStakingPoolId = new Map<string, StakingPool>();\n    accounts.forEach((a) =>\n      byStakingPoolId.set(a.getStakingPoolId().toString(), a)\n    );\n    return new StakingPoolContext(accounts, byStakingPoolId);\n  }\n\n  public getAllStakingPools(): StakingPool[] {\n    return this.pools;\n  }\n\n  public getStakingPool(stakingPoolId: StakingPoolId): StakingPool {\n    const result = this.findStakingPool(stakingPoolId);\n    if (!result) {\n      throw new Error(`No staking pool for ${stakingPoolId}`);\n    }\n\n    return result;\n  }\n\n  public findStakingPool(\n    stakingPoolId: StakingPoolId\n  ): StakingPool | undefined {\n    const key = stakingPoolId.toString();\n    return this.byStakingPoolId.get(key);\n  }\n}\n"]}