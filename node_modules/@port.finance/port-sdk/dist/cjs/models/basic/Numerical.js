"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Numerical = void 0;
const big_js_1 = __importDefault(require("big.js"));
const Comparable_1 = require("./Comparable");
class Numerical extends Comparable_1.Comparable {
    constructor() {
        super();
    }
    static sum(a, b) {
        return a.add(b);
    }
    min(that) {
        this.checkCompatible(that);
        if (this.getRaw().lte(that.getRaw())) {
            return this.replaceWithValue(this.getRaw());
        }
        return this.replaceWithValue(that.getRaw());
    }
    max(that) {
        this.checkCompatible(that);
        if (this.getRaw().gte(that.getRaw())) {
            return this.replaceWithValue(this.getRaw());
        }
        return this.replaceWithValue(that.getRaw());
    }
    add(that) {
        this.checkCompatible(that);
        return this.replaceWithValue(this.getRaw().add(that.getRaw()));
    }
    subtract(that) {
        this.checkCompatible(that);
        return this.replaceWithValue(this.getRaw().sub(that.getRaw()));
    }
    multiply(pct) {
        return this.replaceWithValue(this.getRaw().mul(pct));
    }
    divide(pct) {
        return this.replaceWithValue(this.getRaw().div(pct));
    }
    compare(that) {
        return this.compareRaw(that.getRaw());
    }
    isZero() {
        return this.getSignum() === 0;
    }
    isPositive() {
        return this.getSignum() > 0;
    }
    isNegative() {
        return this.getSignum() < 0;
    }
    getSignum() {
        return this.compareRaw(Numerical.BIG_ZERO);
    }
    compareRaw(raw) {
        return this.getRaw().cmp(raw);
    }
}
exports.Numerical = Numerical;
Numerical.BIG_ZERO = new big_js_1.default(0);
//# sourceMappingURL=Numerical.js.map