{"version":3,"file":"Comparable.js","sourceRoot":"","sources":["../../../../src/models/basic/Comparable.ts"],"names":[],"mappings":";;;AAEA,MAAsB,UAAU;IACvB,EAAE,CAAC,IAAQ;QAChB,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;IAEM,EAAE,CAAC,IAAQ;QAChB,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxC,CAAC;IAEM,GAAG,CAAC,IAAQ;QACjB,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAEM,EAAE,CAAC,IAAQ;QAChB,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxC,CAAC;IAEM,GAAG,CAAC,IAAQ;QACjB,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAMS,eAAe,CAAC,IAAO;QAC/B,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9C,CAAC;IAEO,eAAe,CAAC,IAAO;QAC7B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAC3B,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;CACF;AAhDD,gCAgDC","sourcesContent":["import { Comparison } from \"big.js\";\n\nexport abstract class Comparable<C extends Comparable<C>> {\n  public eq(that?: C): boolean {\n    if (!that) {\n      return false;\n    }\n    return this.checkAndCompare(that) === 0;\n  }\n\n  public lt(that?: C): boolean {\n    if (!that) {\n      return false;\n    }\n    return this.checkAndCompare(that) < 0;\n  }\n\n  public lte(that?: C): boolean {\n    if (!that) {\n      return false;\n    }\n    return this.checkAndCompare(that) <= 0;\n  }\n\n  public gt(that?: C): boolean {\n    if (!that) {\n      return false;\n    }\n    return this.checkAndCompare(that) > 0;\n  }\n\n  public gte(that?: C): boolean {\n    if (!that) {\n      return false;\n    }\n    return this.checkAndCompare(that) >= 0;\n  }\n\n  protected abstract compare(that: C): Comparison;\n\n  protected abstract isCompatibleWith(that: C): boolean;\n\n  protected checkCompatible(that: C): void {\n    console.assert(this.isCompatibleWith(that));\n  }\n\n  private checkAndCompare(that: C): Comparison {\n    this.checkCompatible(that);\n    return this.compare(that);\n  }\n}\n"]}