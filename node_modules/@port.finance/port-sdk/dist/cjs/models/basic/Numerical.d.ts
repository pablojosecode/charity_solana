import Big, { BigSource, Comparison } from "big.js";
import { Comparable } from "./Comparable";
export declare abstract class Numerical<N extends Numerical<N>> extends Comparable<N> {
    private static readonly BIG_ZERO;
    protected constructor();
    static sum<D extends Numerical<D>>(a: D, b: D): D;
    min(that: N): N;
    max(that: N): N;
    add(that: N): N;
    subtract(that: N): N;
    multiply(pct: BigSource): N;
    divide(pct: BigSource): N;
    compare(that: N): Comparison;
    isZero(): boolean;
    isPositive(): boolean;
    isNegative(): boolean;
    getSignum(): number;
    abstract getRaw(): Big;
    abstract replaceWithValue(value: BigSource): N;
    private compareRaw;
}
//# sourceMappingURL=Numerical.d.ts.map