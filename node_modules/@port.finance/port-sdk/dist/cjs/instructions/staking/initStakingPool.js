"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initStakingPoolInstruction = void 0;
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const BufferLayout = __importStar(require("@solana/buffer-layout"));
const bn_js_1 = __importDefault(require("bn.js"));
const Layout = __importStar(require("../../serialization/layout"));
const constants_1 = require("../../constants");
const instruction_1 = require("./instruction");
const Instructions_1 = require("../../utils/Instructions");
// interface Data {
//   instruction: number;
//   supply: number;
//   duration: number;
//   earliestRewardTime: number;
//   bumpSeed: number;
//   poolOwnerAuthority: PublicKey;
//   adminAuthority: PublicKey;
// }
const DataLayout = BufferLayout.struct([
    BufferLayout.u8("instruction"),
    Layout.uint64("supply"),
    Layout.uint64("duration"),
    Layout.uint64("earliestRewardTime"),
    BufferLayout.u8("bumpSeed"),
    Layout.publicKey("poolOwnerAuthority"),
    Layout.publicKey("adminAuthority"),
]);
// Accounts expected by this instruction:
//   0. `[signer]` Transfer reward token authority.
//   1. `[writable]` Reward token supply.
//   2. `[writable]` Reward token pool - uninitialized.
//   3. `[writable]` Staking pool - uninitialized.
//   4. `[]` Reward token mint.
//   5. `[]` Staking program derived that owns reward token pool.
//   6. `[]` Rent sysvar .
//   7. `[]` Token program.
const initStakingPoolInstruction = (supply, duration, earliestRewardTime, bumpSeed, transferRewardSupply, rewardTokenSupply, rewardTokenPool, stakingPool, rewardTokenMint, derivedStakingProgram, poolOwnerAuthority, adminAuthority, stakingProgramId = constants_1.PORT_STAKING) => {
    const data = Buffer.alloc(DataLayout.span);
    DataLayout.encode({
        instruction: instruction_1.StakingInstructions.InitStakingPool,
        supply: new bn_js_1.default(supply),
        duration: new bn_js_1.default(duration),
        earliestRewardTime: new bn_js_1.default(earliestRewardTime),
        bumpSeed,
        poolOwnerAuthority,
        adminAuthority,
    }, data);
    const keys = [
        // signer
        (0, Instructions_1.getAccess)(transferRewardSupply, Instructions_1.AccessType.SIGNER),
        // write accounts
        (0, Instructions_1.getAccess)(rewardTokenSupply, Instructions_1.AccessType.WRITE),
        (0, Instructions_1.getAccess)(rewardTokenPool, Instructions_1.AccessType.WRITE),
        (0, Instructions_1.getAccess)(stakingPool, Instructions_1.AccessType.WRITE),
        // read accounts
        (0, Instructions_1.getAccess)(rewardTokenMint, Instructions_1.AccessType.READ),
        (0, Instructions_1.getAccess)(derivedStakingProgram, Instructions_1.AccessType.READ),
        (0, Instructions_1.getAccess)(web3_js_1.SYSVAR_RENT_PUBKEY, Instructions_1.AccessType.READ),
        (0, Instructions_1.getAccess)(spl_token_1.TOKEN_PROGRAM_ID, Instructions_1.AccessType.READ),
    ];
    return new web3_js_1.TransactionInstruction({
        keys,
        programId: stakingProgramId,
        data,
    });
};
exports.initStakingPoolInstruction = initStakingPoolInstruction;
//# sourceMappingURL=initStakingPool.js.map