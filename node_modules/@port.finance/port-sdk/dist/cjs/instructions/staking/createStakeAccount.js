"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStakeAccountInstruction = void 0;
const web3_js_1 = require("@solana/web3.js");
const BufferLayout = __importStar(require("@solana/buffer-layout"));
const constants_1 = require("../../constants");
const Instructions_1 = require("../../utils/Instructions");
const instruction_1 = require("./instruction");
// Accounts expected by this instruction:
//
//   0. `[writable]` Stake account - uninitialized.
//   1. `[]` Staking Pool.
//   2. `[]` Stake account owner.
//   3. `[]` Rent sysvar.
function createStakeAccountInstruction(stakeAccountPubkey, // 0
stakingPoolPubkey, // 1
stakeAccountOwnerPubkey, // 2
stakingProgramId = constants_1.PORT_STAKING) {
    const dataLayout = BufferLayout.struct([BufferLayout.u8("instruction")]);
    const data = Buffer.alloc(dataLayout.span);
    dataLayout.encode({ instruction: instruction_1.StakingInstructions.CreateStakeAccount }, data);
    const keys = [
        (0, Instructions_1.getAccess)(stakeAccountPubkey, Instructions_1.AccessType.WRITE),
        (0, Instructions_1.getAccess)(stakingPoolPubkey, Instructions_1.AccessType.READ),
        (0, Instructions_1.getAccess)(stakeAccountOwnerPubkey, Instructions_1.AccessType.READ),
        (0, Instructions_1.getAccess)(web3_js_1.SYSVAR_RENT_PUBKEY, Instructions_1.AccessType.READ),
    ];
    return new web3_js_1.TransactionInstruction({
        keys,
        programId: stakingProgramId,
        data,
    });
}
exports.createStakeAccountInstruction = createStakeAccountInstruction;
//# sourceMappingURL=createStakeAccount.js.map