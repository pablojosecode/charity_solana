{"version":3,"file":"refreshReserve.js","sourceRoot":"","sources":["../../../../src/instructions/lending/refreshReserve.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAIyB;AACzB,oEAAsD;AACtD,+CAA+C;AAC/C,2DAAiE;AACjE,+CAAmD;AAEnD,mBAAmB;AACnB,yBAAyB;AACzB,IAAI;AAEJ,MAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;AAEzE,qEAAqE;AACrE,EAAE;AACF,yCAAyC;AACzC,EAAE;AACF,qCAAqC;AACrC,0BAA0B;AAC1B,8CAA8C;AAC9C,uEAAuE;AAChE,MAAM,yBAAyB,GAAG,CACvC,OAAkB,EAClB,MAAwB,EACxB,mBAA8B,wBAAY,EAClB,EAAE;IAC1B,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC3C,UAAU,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,gCAAkB,CAAC,cAAc,EAAE,EAAE,IAAI,CAAC,CAAC;IAE5E,MAAM,IAAI,GAAG;QACX,IAAA,wBAAS,EAAC,OAAO,EAAE,yBAAU,CAAC,KAAK,CAAC;QACpC,IAAA,wBAAS,EAAC,6BAAmB,EAAE,yBAAU,CAAC,IAAI,CAAC;KAChD,CAAC;IAEF,IAAI,MAAM,EAAE;QACV,IAAI,CAAC,IAAI,CAAC,IAAA,wBAAS,EAAC,MAAM,EAAE,yBAAU,CAAC,IAAI,CAAC,CAAC,CAAC;KAC/C;IAED,OAAO,IAAI,gCAAsB,CAAC;QAChC,IAAI;QACJ,SAAS,EAAE,gBAAgB;QAC3B,IAAI;KACL,CAAC,CAAC;AACL,CAAC,CAAC;AAtBW,QAAA,yBAAyB,6BAsBpC","sourcesContent":["import {\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport { PORT_LENDING } from \"../../constants\";\nimport { AccessType, getAccess } from \"../../utils/Instructions\";\nimport { LendingInstruction } from \"./instruction\";\n\n// interface Data {\n//   instruction: number;\n// }\n\nconst DataLayout = BufferLayout.struct([BufferLayout.u8(\"instruction\")]);\n\n// Accrue interest and update market price of liquidity on a reserve.\n//\n// Accounts expected by this instruction:\n//\n//   0. `[writable]` Reserve account.\n//   1. `[]` Clock sysvar.\n//   2. `[]` Reserve liquidity oracle account.\n//             Must be the Pyth price account specified at InitReserve.\nexport const refreshReserveInstruction = (\n  reserve: PublicKey,\n  oracle: PublicKey | null,\n  lendingProgramId: PublicKey = PORT_LENDING\n): TransactionInstruction => {\n  const data = Buffer.alloc(DataLayout.span);\n  DataLayout.encode({ instruction: LendingInstruction.RefreshReserve }, data);\n\n  const keys = [\n    getAccess(reserve, AccessType.WRITE),\n    getAccess(SYSVAR_CLOCK_PUBKEY, AccessType.READ),\n  ];\n\n  if (oracle) {\n    keys.push(getAccess(oracle, AccessType.READ));\n  }\n\n  return new TransactionInstruction({\n    keys,\n    programId: lendingProgramId,\n    data,\n  });\n};\n"]}