"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.depositReserveLiquidityAndAddCollateralInstruction = void 0;
const web3_js_1 = require("@solana/web3.js");
const spl_token_1 = require("@solana/spl-token");
const BufferLayout = __importStar(require("@solana/buffer-layout"));
const Layout = __importStar(require("../../serialization/layout"));
const instruction_1 = require("./instruction");
const Instructions_1 = require("../../utils/Instructions");
const bn_js_1 = __importDefault(require("bn.js"));
const constants_1 = require("../../constants");
// Combines DepositReserveLiquidity and DepositObligationCollateral
//
// Accounts expected by this instruction:
//
//   0. `[writable]` Source liquidity token account.
//                     $authority can transfer $liquidity_amount.
//   1. `[writable]` Destination collateral token account.
//   2. `[writable]` Reserve account.
//   3. `[writable]` Reserve liquidity supply SPL Token account.
//   4. `[writable]` Reserve collateral SPL Token mint.
//   5. `[]` Lending market account.
//   6. `[]` Derived lending market authority.
//   7. `[writable]` Destination deposit reserve collateral supply SPL Token account.
//   8. `[writable]` Obligation account.
//   9. `[signer]` Obligation owner.
//   10 `[signer]` User transfer authority ($authority).
//   11 `[]` Clock sysvar.
//   12 `[]` Token program id.
//   13 `[writable, optional]` Stake account.
//   14 `[writable, optional]` Staking pool.
//   15 `[optional]` staking program id.
const depositReserveLiquidityAndAddCollateralInstruction = (liquidityAmount, srcLiquidityPubkey, // 0
dstCollateralPubkey, // 1
reservePubkey, // 2
reserveLiquiditySupplyPubkey, // 3
reserveCollateralMintPubkey, // 4
lendingMarketPubkey, // 5
lendingMarketAuthorityPubkey, // 6
dstDepositCollateralPubkey, // 7
obligationPubkey, // 8
obligationOwnerPubkey, // 9
transferAuthorityPubkey, // 10
lendingProgramId = constants_1.PORT_LENDING, optStakeAccountPubkey, // 13
optStakingPoolPubkey, // 14
stakingProgramId = constants_1.PORT_STAKING) => {
    const dataLayout = BufferLayout.struct([
        BufferLayout.u8("instruction"),
        Layout.uint64("liquidityAmount"),
    ]);
    const data = Buffer.alloc(dataLayout.span);
    dataLayout.encode({
        instruction: instruction_1.LendingInstruction.DepositReserveLiquidityAndAddCollateral,
        liquidityAmount: new bn_js_1.default(liquidityAmount),
    }, data);
    const keys = [
        (0, Instructions_1.getAccess)(srcLiquidityPubkey, Instructions_1.AccessType.WRITE),
        (0, Instructions_1.getAccess)(dstCollateralPubkey, Instructions_1.AccessType.WRITE),
        (0, Instructions_1.getAccess)(reservePubkey, Instructions_1.AccessType.WRITE),
        (0, Instructions_1.getAccess)(reserveLiquiditySupplyPubkey, Instructions_1.AccessType.WRITE),
        (0, Instructions_1.getAccess)(reserveCollateralMintPubkey, Instructions_1.AccessType.WRITE),
        (0, Instructions_1.getAccess)(lendingMarketPubkey, Instructions_1.AccessType.READ),
        (0, Instructions_1.getAccess)(lendingMarketAuthorityPubkey, Instructions_1.AccessType.READ),
        (0, Instructions_1.getAccess)(dstDepositCollateralPubkey, Instructions_1.AccessType.WRITE),
        (0, Instructions_1.getAccess)(obligationPubkey, Instructions_1.AccessType.WRITE),
        (0, Instructions_1.getAccess)(obligationOwnerPubkey, Instructions_1.AccessType.SIGNER),
        (0, Instructions_1.getAccess)(transferAuthorityPubkey, Instructions_1.AccessType.SIGNER),
        (0, Instructions_1.getAccess)(web3_js_1.SYSVAR_CLOCK_PUBKEY, Instructions_1.AccessType.READ),
        (0, Instructions_1.getAccess)(spl_token_1.TOKEN_PROGRAM_ID, Instructions_1.AccessType.READ),
    ];
    if (optStakeAccountPubkey && optStakingPoolPubkey) {
        keys.push((0, Instructions_1.getAccess)(optStakeAccountPubkey, Instructions_1.AccessType.WRITE), (0, Instructions_1.getAccess)(optStakingPoolPubkey, Instructions_1.AccessType.WRITE), (0, Instructions_1.getAccess)(stakingProgramId, Instructions_1.AccessType.READ));
    }
    return new web3_js_1.TransactionInstruction({
        keys,
        programId: lendingProgramId,
        data,
    });
};
exports.depositReserveLiquidityAndAddCollateralInstruction = depositReserveLiquidityAndAddCollateralInstruction;
//# sourceMappingURL=depositReserveLiquidityAndAddCollateral.js.map