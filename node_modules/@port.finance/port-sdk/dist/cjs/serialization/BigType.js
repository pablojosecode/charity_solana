"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BigType = void 0;
const big_js_1 = __importDefault(require("big.js"));
const BufferLayout = __importStar(require("@solana/buffer-layout"));
const UIntField_1 = require("./UIntField");
class BigType {
    constructor(bytes, multiplier) {
        this.bytes = bytes;
        this.multiplier = multiplier;
    }
    getLayout() {
        if (this.bytes === 1) {
            return BufferLayout.u8();
        }
        if (this.bytes === 2) {
            return BufferLayout.u16();
        }
        if (this.bytes === 3) {
            return BufferLayout.u24();
        }
        if (this.bytes === 4) {
            return BufferLayout.u32();
        }
        return new UIntField_1.UintField(this.bytes);
    }
    getBytes() {
        return this.bytes;
    }
    getMultiplier() {
        return this.multiplier;
    }
}
exports.BigType = BigType;
BigType.WAD = new big_js_1.default(10).pow(18);
BigType.U8 = new BigType(1);
BigType.U16 = new BigType(2);
BigType.U32 = new BigType(4);
BigType.U64 = new BigType(8);
BigType.U128 = new BigType(16);
BigType.D64 = new BigType(8, BigType.WAD);
BigType.D128 = new BigType(16, BigType.WAD);
//# sourceMappingURL=BigType.js.map