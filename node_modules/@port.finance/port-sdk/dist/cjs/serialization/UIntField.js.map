{"version":3,"file":"UIntField.js","sourceRoot":"","sources":["../../../src/serialization/UIntField.ts"],"names":[],"mappings":";;;;;;AAAA,2CAAwC;AACxC,kDAAuB;AAEvB,MAAa,SAAU,SAAQ,qBAAa;IAC1C,YAAmB,KAAa,EAAE,QAAiB;QACjD,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACzB,CAAC;IAES,UAAU,CAAC,MAAc;QACjC,OAAO,IAAI,eAAE,CACX,CAAC,GAAG,MAAM,CAAC;aACR,OAAO,EAAE;aACT,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;aAC3C,IAAI,CAAC,EAAE,CAAC,EACX,EAAE,CACH,CAAC;IACJ,CAAC;CACF;AAdD,8BAcC","sourcesContent":["import { BlobField } from \"./BlobField\";\nimport BN from \"bn.js\";\n\nexport class UintField extends BlobField<BN> {\n  public constructor(bytes: number, property?: string) {\n    super(bytes, property);\n  }\n\n  protected fromBuffer(buffer: Buffer): BN {\n    return new BN(\n      [...buffer]\n        .reverse()\n        .map((i) => `00${i.toString(16)}`.slice(-2))\n        .join(\"\"),\n      16\n    );\n  }\n}\n"]}