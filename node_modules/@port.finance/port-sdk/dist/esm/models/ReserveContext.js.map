{"version":3,"file":"ReserveContext.js","sourceRoot":"","sources":["../../../src/models/ReserveContext.ts"],"names":[],"mappings":"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","sourcesContent":["import { MintId } from \"./MintId\";\nimport { ReserveInfo } from \"./ReserveInfo\";\nimport { ReserveId } from \"./ReserveId\";\nimport { StakingPoolId } from \"./staking/StakingPoolId\";\nimport { OracleId } from \"./OracleId\";\nimport type { TokenInfo } from \"@solana/spl-token-registry\";\n\nexport class ReserveContext {\n  private static readonly RESERVE_CONTEXT_EMPTY = new ReserveContext(\n    [],\n    new Map(),\n    new Map(),\n    new Map(),\n    new Map()\n  );\n\n  private readonly reserves: ReserveInfo[];\n  private readonly byReserveId: Map<string, ReserveInfo>;\n  private readonly byAssetMintId: Map<string, ReserveInfo>;\n  private readonly byShareMintId: Map<string, ReserveInfo>;\n  private readonly byStakingPoolId: Map<string, ReserveInfo>;\n\n  private constructor(\n    reserves: ReserveInfo[],\n    byReserveId: Map<string, ReserveInfo>,\n    byAssetMintId: Map<string, ReserveInfo>,\n    byShareMintId: Map<string, ReserveInfo>,\n    byStakingPoolId: Map<string, ReserveInfo>\n  ) {\n    this.reserves = reserves;\n    this.byReserveId = byReserveId;\n    this.byAssetMintId = byAssetMintId;\n    this.byShareMintId = byShareMintId;\n    this.byStakingPoolId = byStakingPoolId;\n  }\n\n  public static empty(): ReserveContext {\n    return ReserveContext.RESERVE_CONTEXT_EMPTY;\n  }\n\n  public static index(\n    reserves: ReserveInfo[],\n    tokenMap?: Map<string, TokenInfo>\n  ): ReserveContext {\n    if (!reserves.length) {\n      return ReserveContext.empty();\n    }\n\n    const readyToSortReserves = tokenMap\n      ? reserves.filter((r) => {\n          return tokenMap.has(r.getAssetMintId().toString());\n        })\n      : reserves;\n\n    const sorted = readyToSortReserves.sort(\n      (a, b) =>\n        -a.getMarketCap().getValue().compare(b.getMarketCap().getValue())\n    );\n\n    const byReserveId = new Map<string, ReserveInfo>();\n    const byAssetMintId = new Map<string, ReserveInfo>();\n    const byShareMintId = new Map<string, ReserveInfo>();\n    const byStakingPoolId = new Map<string, ReserveInfo>();\n    sorted.forEach((reserve) =>\n      byReserveId.set(reserve.getReserveId().toString(), reserve)\n    );\n    sorted.forEach((reserve) =>\n      byAssetMintId.set(reserve.getAssetMintId().toString(), reserve)\n    );\n    sorted.forEach((reserve) =>\n      byShareMintId.set(reserve.getShareMintId().toString(), reserve)\n    );\n    sorted.forEach((reserve) => {\n      const stakingPoolId = reserve.getStakingPoolId();\n      if (stakingPoolId) {\n        byStakingPoolId.set(stakingPoolId.toString(), reserve);\n      }\n    });\n    return new ReserveContext(\n      sorted,\n      byReserveId,\n      byAssetMintId,\n      byShareMintId,\n      byStakingPoolId\n    );\n  }\n\n  public isReady(): boolean {\n    return this.reserves.length > 0;\n  }\n\n  public getAllReserves(): ReserveInfo[] {\n    return this.reserves;\n  }\n\n  public getAllReservesPricePubKey(): (OracleId | null)[] {\n    return this.reserves.map((r) => r.getOracleId());\n  }\n\n  public getReserve(reserveId: ReserveId): ReserveInfo {\n    const result = this.findReserve(reserveId);\n    if (!result) {\n      throw new Error(`No reserve for ${reserveId}`);\n    }\n\n    return result;\n  }\n\n  public getByAssetMintId(mintId: MintId): ReserveInfo {\n    const result = this.findByAssetMintId(mintId);\n    if (!result) {\n      throw new Error(`No reserve for asset mint ${mintId}`);\n    }\n\n    return result;\n  }\n\n  public getByShareMintId(mintId: MintId): ReserveInfo {\n    const result = this.findByShareMintId(mintId);\n    if (!result) {\n      throw new Error(`No reserve for share mint ${mintId}`);\n    }\n\n    return result;\n  }\n\n  public findReserve(reserveId: ReserveId): ReserveInfo | undefined {\n    const key = reserveId.toString();\n    return this.byReserveId.get(key);\n  }\n\n  public findByAssetMintId(mintId: MintId): ReserveInfo | undefined {\n    const key = mintId.toString();\n    return this.byAssetMintId.get(key);\n  }\n\n  public findByShareMintId(mintId: MintId): ReserveInfo | undefined {\n    const key = mintId.toString();\n    return this.byShareMintId.get(key);\n  }\n\n  public findByStakingPoolId(\n    stakingPoolId: StakingPoolId\n  ): ReserveInfo | undefined {\n    if (!stakingPoolId) {\n      return undefined;\n    }\n\n    const key = stakingPoolId.toString();\n    return this.byStakingPoolId.get(key);\n  }\n}\n"]}