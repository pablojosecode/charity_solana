{"version":3,"file":"Share.js","sourceRoot":"","sources":["../../../src/models/Share.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAChC,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,SAAS,CAAC;AAGzC,MAAM,OAAO,KAAM,SAAQ,KAAY;IACrC,YAAoB,MAAc,EAAE,OAAgB;QAClD,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACzB,CAAC;IAEM,MAAM,CAAC,IAAI,CAAC,MAAc;QAC/B,OAAO,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;IAC1C,CAAC;IAEM,MAAM,CAAC,GAAG,CAAC,MAAc;QAC9B,OAAO,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;IACzC,CAAC;IAEM,MAAM,CAAC,gBAAgB,CAAC,OAAqB;QAClD,OAAO,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC;IAC5D,CAAC;IAEM,MAAM,CAAC,EAAE,CAAC,MAAc,EAAE,OAAgB;QAC/C,OAAO,IAAI,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACpC,CAAC;IAEM,OAAO,CAAC,aAAgC;QAC7C,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;QAExE,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,EAAE;YAC9B,OAAO,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC,CAAC;SACnD;QAED,MAAM,GAAG,GAAG,aAAa,CAAC,YAAY,EAAE,CAAC;QACzC,MAAM,OAAO,GAAG,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,OAAO,KAAK,CAAC,EAAE,CAAC,aAAa,CAAC,cAAc,EAAE,EAAE,OAAO,CAAC,CAAC;IAC3D,CAAC;IAES,IAAI,CAAC,KAAc;QAC3B,OAAO,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,CAAC;IAC3C,CAAC;CACF","sourcesContent":["import { MintId } from \"./MintId\";\nimport { AssetExchangeRate } from \"./AssetExchangeRate\";\nimport { Asset } from \"./Asset\";\nimport { Token, Lamport } from \"./basic\";\nimport { TokenAccount } from \"./TokenAccount\";\n\nexport class Share extends Token<Share> {\n  private constructor(mintId: MintId, lamport: Lamport) {\n    super(mintId, lamport);\n  }\n\n  public static zero(mintId: MintId): Share {\n    return Share.of(mintId, Lamport.zero());\n  }\n\n  public static max(mintId: MintId): Share {\n    return Share.of(mintId, Lamport.max());\n  }\n\n  public static fromTokenAccount(account: TokenAccount): Share {\n    return Share.of(account.getMintId(), account.getAmount());\n  }\n\n  public static of(mintId: MintId, lamport: Lamport): Share {\n    return new Share(mintId, lamport);\n  }\n\n  public toAsset(exchangeRatio: AssetExchangeRate): Asset {\n    console.assert(this.getMintId().equals(exchangeRatio.getShareMintId()));\n\n    if (!exchangeRatio.isPresent()) {\n      return Asset.zero(exchangeRatio.getAssetMintId());\n    }\n\n    const pct = exchangeRatio.getUnchecked();\n    const lamport = Lamport.of(this.getRaw().div(pct).round(0));\n    return Asset.of(exchangeRatio.getAssetMintId(), lamport);\n  }\n\n  protected wrap(value: Lamport): Share {\n    return Share.of(this.getMintId(), value);\n  }\n}\n"]}