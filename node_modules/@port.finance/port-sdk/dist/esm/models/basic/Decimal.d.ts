import Big, { BigSource } from "big.js";
import { Field } from "../../serialization/Field";
import { Numerical } from "./Numerical";
import { BigType } from "../../serialization/BigType";
export declare abstract class Decimal<D extends Decimal<D>> extends Numerical<D> {
    protected readonly raw: Big;
    protected constructor(raw: BigSource);
    getRaw(): Big;
    protected isCompatibleWith(that: D): boolean;
}
export declare abstract class DecimalField<T extends Decimal<any>> extends Field<T> {
    private readonly delegate;
    protected constructor(type: BigType, property: string);
    decode(b: Uint8Array, offset?: number): T;
    protected abstract fromBig(big: Big): T;
}
//# sourceMappingURL=Decimal.d.ts.map