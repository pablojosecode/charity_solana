{"version":3,"file":"Ratio.js","sourceRoot":"","sources":["../../../../src/models/basic/Ratio.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAE1C,MAAM,OAAgB,KAA0B,SAAQ,UAAa;IAGnE,YAAsB,GAAgB;QACpC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACjB,CAAC;IAEM,SAAS;QACd,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAC1B,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,SAAS,EAAE,CAAC;IACjC,CAAC;IAEM,SAAS;QACd,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;IACpB,CAAC;IAEM,UAAU;;QACf,OAAO,CAAC,CAAC,CAAA,MAAA,IAAI,CAAC,MAAM,EAAE,0CAAE,UAAU,EAAE,CAAA,CAAC;IACvC,CAAC;IAEM,UAAU;;QACf,OAAO,CAAC,CAAC,CAAA,MAAA,IAAI,CAAC,MAAM,EAAE,0CAAE,UAAU,EAAE,CAAA,CAAC;IACvC,CAAC;IAEM,YAAY;QACjB,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;SACvC;QAED,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;IAC3B,CAAC;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAEM,KAAK;QACV,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;IAC7C,CAAC;IAEM,OAAO,CAAC,IAAO;QACpB,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAC9B,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,EAAE;YACxB,OAAO,CAAC,CAAC;SACV;QAED,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC;IAEM,QAAQ;QACb,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC;IACtB,CAAC;CACF","sourcesContent":["import { Percentage } from \"./Percentage\";\nimport Big, { Comparison } from \"big.js\";\nimport { Comparable } from \"./Comparable\";\n\nexport abstract class Ratio<R extends Ratio<R>> extends Comparable<R> {\n  private readonly pct?: Percentage;\n\n  protected constructor(pct?: Percentage) {\n    super();\n    this.pct = pct;\n  }\n\n  public isTrivial(): boolean {\n    const pct = this.getPct();\n    return !pct || pct.isTrivial();\n  }\n\n  public isPresent(): boolean {\n    return !!this.pct;\n  }\n\n  public isPositive(): boolean {\n    return !!this.getPct()?.isPositive();\n  }\n\n  public isNegative(): boolean {\n    return !!this.getPct()?.isNegative();\n  }\n\n  public getUnchecked(): Big {\n    if (!this.pct) {\n      throw new Error(\"No value available\");\n    }\n\n    return this.pct.getRaw();\n  }\n\n  public getPct(): Percentage | undefined {\n    return this.pct;\n  }\n\n  public print(): string {\n    return !this.pct ? \"--\" : this.pct.print();\n  }\n\n  public compare(that: R): Comparison {\n    const thisPct = this.getPct();\n    const thatPct = that.getPct();\n    if (!thisPct || !thatPct) {\n      return 0;\n    }\n\n    return thisPct.compare(thatPct);\n  }\n\n  public toString(): string {\n    return this.print();\n  }\n}\n"]}