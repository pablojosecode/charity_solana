{"version":3,"file":"WrappedDecimal.js","sourceRoot":"","sources":["../../../../src/models/basic/WrappedDecimal.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAIxC,MAAM,OAAgB,cAGpB,SAAQ,SAAY;IAGpB,YAAsB,OAAU;QAC9B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC,MAAM,EAAE,CAAC;IACpC,CAAC;IAEM,UAAU;QACf,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAEM,gBAAgB,CAAC,KAAgB;QACtC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;IAC9D,CAAC;CAGF","sourcesContent":["import { Numerical } from \"./Numerical\";\nimport { Decimal } from \"./Decimal\";\nimport Big, { BigSource } from \"big.js\";\n\nexport abstract class WrappedDecimal<\n  D extends Decimal<D>,\n  W extends WrappedDecimal<D, W>\n> extends Numerical<W> {\n  private readonly wrapped: D;\n\n  protected constructor(wrapped: D) {\n    super();\n    this.wrapped = wrapped;\n  }\n\n  public getRaw(): Big {\n    return this.getWrapped().getRaw();\n  }\n\n  public getWrapped(): D {\n    return this.wrapped;\n  }\n\n  public replaceWithValue(value: BigSource): W {\n    return this.wrap(this.getWrapped().replaceWithValue(value));\n  }\n\n  protected abstract wrap(value: D): W;\n}\n"]}