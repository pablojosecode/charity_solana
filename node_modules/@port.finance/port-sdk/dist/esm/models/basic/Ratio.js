import { Comparable } from "./Comparable";
export class Ratio extends Comparable {
    constructor(pct) {
        super();
        this.pct = pct;
    }
    isTrivial() {
        const pct = this.getPct();
        return !pct || pct.isTrivial();
    }
    isPresent() {
        return !!this.pct;
    }
    isPositive() {
        var _a;
        return !!((_a = this.getPct()) === null || _a === void 0 ? void 0 : _a.isPositive());
    }
    isNegative() {
        var _a;
        return !!((_a = this.getPct()) === null || _a === void 0 ? void 0 : _a.isNegative());
    }
    getUnchecked() {
        if (!this.pct) {
            throw new Error("No value available");
        }
        return this.pct.getRaw();
    }
    getPct() {
        return this.pct;
    }
    print() {
        return !this.pct ? "--" : this.pct.print();
    }
    compare(that) {
        const thisPct = this.getPct();
        const thatPct = that.getPct();
        if (!thisPct || !thatPct) {
            return 0;
        }
        return thisPct.compare(thatPct);
    }
    toString() {
        return this.print();
    }
}
//# sourceMappingURL=Ratio.js.map