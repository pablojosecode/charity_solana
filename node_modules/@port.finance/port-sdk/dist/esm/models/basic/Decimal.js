import Big from "big.js";
import { BigField } from "../../serialization/BigField";
import { Field } from "../../serialization/Field";
import { Numerical } from "./Numerical";
export class Decimal extends Numerical {
    constructor(raw) {
        super();
        this.raw = new Big(raw);
    }
    getRaw() {
        return this.raw;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    isCompatibleWith(that) {
        return true;
    }
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export class DecimalField extends Field {
    constructor(type, property) {
        super(type.getBytes(), property);
        this.delegate = BigField.forType(type, property);
    }
    decode(b, offset) {
        return this.fromBig(this.delegate.decode(b, offset));
    }
}
//# sourceMappingURL=Decimal.js.map