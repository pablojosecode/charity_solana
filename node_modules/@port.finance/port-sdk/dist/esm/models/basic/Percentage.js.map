{"version":3,"file":"Percentage.js","sourceRoot":"","sources":["../../../../src/models/basic/Percentage.ts"],"names":[],"mappings":"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","sourcesContent":["import Big, { BigSource } from \"big.js\";\nimport { Decimal, DecimalField } from \"./Decimal\";\nimport { Field } from \"../../serialization/Field\";\nimport { BigType } from \"../../serialization/BigType\";\n\nexport class Percentage extends Decimal<Percentage> {\n  private static PCT_BIP = new Percentage(0.0001);\n  private static PCT_ZERO = new Percentage(0);\n  private static PCT_HUNDRED = new Percentage(1);\n  private static PCT_THOUSAND = new Percentage(10);\n\n  private constructor(value: BigSource) {\n    super(value);\n  }\n\n  public static zero(): Percentage {\n    return Percentage.PCT_ZERO;\n  }\n\n  public static hundred(): Percentage {\n    return Percentage.PCT_HUNDRED;\n  }\n\n  public static fromOneBased(oneBased: BigSource): Percentage {\n    return Percentage.fromRaw(oneBased, false);\n  }\n\n  public static fromHundredBased(hundredBased: BigSource): Percentage {\n    return Percentage.fromRaw(hundredBased, true);\n  }\n\n  public static fromRaw(raw: BigSource, isHundredBased: boolean): Percentage {\n    const big = new Big(raw);\n    if (!isHundredBased) {\n      return new Percentage(big);\n    }\n    return new Percentage(big.div(100));\n  }\n\n  public static field(property: string): Field<Percentage> {\n    return new PercentageField(true, property);\n  }\n\n  public isTrivial(): boolean {\n    return this.lt(Percentage.PCT_BIP);\n  }\n\n  public isHundredPct(): boolean {\n    return this.eq(Percentage.PCT_HUNDRED);\n  }\n\n  public toOneBasedNumber(dp: number): number {\n    return this.raw.round(dp).toNumber();\n  }\n\n  public toHundredBasedNumber(dp: number): number {\n    return this.raw.mul(100).round(dp, 0).toNumber();\n  }\n\n  public print(): string {\n    if (this.gt(Percentage.PCT_THOUSAND)) {\n      return this.raw.round(1, 1).toString() + \"x\"; // RoundHalfUp\n    }\n    return this.raw.mul(100).round(2, 1).toString() + \"%\"; // RoundHalfUp\n  }\n\n  public replaceWithValue(value: BigSource): Percentage {\n    return new Percentage(value);\n  }\n}\n\nclass PercentageField extends DecimalField<Percentage> {\n  private readonly isHundredBased: boolean;\n\n  public constructor(isHundredBased: boolean, property: string) {\n    super(BigType.U8, property);\n    this.isHundredBased = isHundredBased;\n  }\n\n  protected fromBig(big: Big): Percentage {\n    return Percentage.fromRaw(big, this.isHundredBased);\n  }\n}\n"]}