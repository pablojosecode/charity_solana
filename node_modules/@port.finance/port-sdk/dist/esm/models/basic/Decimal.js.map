{"version":3,"file":"Decimal.js","sourceRoot":"","sources":["../../../../src/models/basic/Decimal.ts"],"names":[],"mappings":"AAAA,OAAO,GAAkB,MAAM,QAAQ,CAAC;AACxC,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAE,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAClD,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAGxC,MAAM,OAAgB,OAA8B,SAAQ,SAAY;IAGtE,YAAsB,GAAc;QAClC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAED,6DAA6D;IACnD,gBAAgB,CAAC,IAAO;QAChC,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAED,8DAA8D;AAC9D,MAAM,OAAgB,YAAqC,SAAQ,KAAQ;IAGzE,YAAsB,IAAa,EAAE,QAAgB;QACnD,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACnD,CAAC;IAEM,MAAM,CAAC,CAAa,EAAE,MAAe;QAC1C,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;IACvD,CAAC;CAGF","sourcesContent":["import Big, { BigSource } from \"big.js\";\nimport { BigField } from \"../../serialization/BigField\";\nimport { Field } from \"../../serialization/Field\";\nimport { Numerical } from \"./Numerical\";\nimport { BigType } from \"../../serialization/BigType\";\n\nexport abstract class Decimal<D extends Decimal<D>> extends Numerical<D> {\n  protected readonly raw: Big;\n\n  protected constructor(raw: BigSource) {\n    super();\n    this.raw = new Big(raw);\n  }\n\n  public getRaw(): Big {\n    return this.raw;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected isCompatibleWith(that: D): boolean {\n    return true;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport abstract class DecimalField<T extends Decimal<any>> extends Field<T> {\n  private readonly delegate: BigField;\n\n  protected constructor(type: BigType, property: string) {\n    super(type.getBytes(), property);\n    this.delegate = BigField.forType(type, property);\n  }\n\n  public decode(b: Uint8Array, offset?: number): T {\n    return this.fromBig(this.delegate.decode(b, offset));\n  }\n\n  protected abstract fromBig(big: Big): T;\n}\n"]}