{"version":3,"file":"Asset.js","sourceRoot":"","sources":["../../../src/models/Asset.ts"],"names":[],"mappings":"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","sourcesContent":["import Big from \"big.js\";\n\nimport { Token, Lamport, Percentage } from \"./basic\";\nimport { Apy } from \"./Apy\";\nimport { QuoteValue } from \"./QuoteValue\";\nimport { AssetPrice } from \"./AssetPrice\";\nimport { QuantityContext } from \"./QuantityContext\";\nimport { Share } from \"./Share\";\nimport { AssetExchangeRate } from \"./AssetExchangeRate\";\nimport { MintId } from \"./MintId\";\nimport { TokenAccount } from \"./TokenAccount\";\n\nexport class Asset extends Token<Asset> {\n  public static readonly MIN_NATIVE_LAMPORT = Asset.native(\n    Lamport.of(5_000_000)\n  );\n\n  private static SIGNIFICANT_DIGITS = 6;\n  private static LARGE_THRESHOLD = new Big(10).pow(6).toNumber();\n  private static FORMATTER_NORMAL = new Intl.NumberFormat(\"en-US\", {\n    style: \"decimal\",\n    maximumSignificantDigits: Asset.SIGNIFICANT_DIGITS,\n  });\n  private static FORMATTER_LARGE = new Intl.NumberFormat(\"en-US\", {\n    style: \"decimal\",\n    maximumFractionDigits: 0,\n  });\n\n  private constructor(mintId: MintId, lamport: Lamport) {\n    super(mintId, lamport);\n  }\n\n  public static fromString(\n    str: string,\n    mintId: MintId,\n    context: QuantityContext\n  ): Asset {\n    const increment = context.multiplier;\n    const lamport = Lamport.of(new Big(str).mul(increment).round(0, 0));\n    return new Asset(mintId, lamport);\n  }\n\n  public static zero(mintId: MintId): Asset {\n    return Asset.of(mintId);\n  }\n\n  public static max(mintId: MintId): Asset {\n    return Asset.of(mintId, Lamport.max());\n  }\n\n  public static native(lamport: Lamport): Asset {\n    return Asset.of(MintId.native(), lamport);\n  }\n\n  public static fromTokenAccount(account: TokenAccount): Asset {\n    return Asset.of(account.getMintId(), account.getAmount());\n  }\n\n  public static of(mintId: MintId, lamport?: Lamport): Asset {\n    return new Asset(mintId, lamport || Lamport.zero());\n  }\n\n  public isNative(): boolean {\n    return this.getMintId().isNative();\n  }\n\n  public toValue(\n    price: AssetPrice,\n    quantityContext: QuantityContext\n  ): QuoteValue {\n    console.assert(\n      this.getMintId().equals(price.getMintId()),\n      `asset id: ${this.getMintId()} price id: ${price.getMintId()}`\n    );\n    if (!price) {\n      return QuoteValue.zero();\n    }\n\n    const increment = quantityContext.multiplier;\n    const value = this.getRaw().div(increment).mul(price.getRaw());\n    return QuoteValue.of(value);\n  }\n\n  public toInterest(supplyApy: Apy): Asset {\n    if (!supplyApy.isPresent()) {\n      return Asset.zero(this.getMintId());\n    }\n\n    const lamport = Lamport.of(this.getRaw().mul(supplyApy.getUnchecked()));\n    return Asset.of(this.getMintId(), lamport);\n  }\n\n  public toShare(exchangeRatio: AssetExchangeRate): Share {\n    console.assert(this.getMintId().equals(exchangeRatio.getAssetMintId()));\n\n    if (!exchangeRatio.isPresent()) {\n      return Share.zero(exchangeRatio.getShareMintId());\n    }\n\n    const lamport = Lamport.of(\n      this.getRaw().mul(exchangeRatio.getUnchecked()).round(0)\n    );\n    return Share.of(exchangeRatio.getShareMintId(), lamport);\n  }\n\n  public addFee(pct: Percentage): Asset {\n    return this.multiply(new Big(1).add(pct.getRaw()));\n  }\n\n  public toNumber(context: QuantityContext): number {\n    const multiplier = context.multiplier;\n    const decimals = context.decimals;\n    return this.getRaw().div(multiplier).round(decimals, 0).toNumber();\n  }\n\n  public plain(context: QuantityContext): string {\n    return this.toLimitRoundNumber(context).toString();\n  }\n\n  public toLimitRoundNumber(context: QuantityContext): number {\n    const multiplier = context.multiplier;\n    const decimals = context.decimals;\n    return this.getRaw()\n      .div(multiplier)\n      .round(Math.min(decimals, 6), 0)\n      .toNumber();\n  }\n\n  public print(context: QuantityContext | undefined, symbol?: string): string {\n    if (!context) {\n      return \"--\";\n    }\n\n    const num = this.toLimitRoundNumber(context);\n    const formatted =\n      num > Asset.LARGE_THRESHOLD\n        ? Asset.FORMATTER_LARGE.format(num)\n        : Asset.FORMATTER_NORMAL.format(num);\n    if (!symbol) {\n      return formatted;\n    }\n    return formatted + \" \" + symbol;\n  }\n\n  protected wrap(value: Lamport): Asset {\n    return Asset.of(this.getMintId(), value);\n  }\n}\n"]}