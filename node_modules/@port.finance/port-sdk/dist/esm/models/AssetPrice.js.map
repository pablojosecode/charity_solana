{"version":3,"file":"AssetPrice.js","sourceRoot":"","sources":["../../../src/models/AssetPrice.ts"],"names":[],"mappings":"AAAA,OAAO,GAAkB,MAAM,QAAQ,CAAC;AACxC,OAAO,EAAE,OAAO,EAAc,MAAM,SAAS,CAAC;AAI9C,MAAM,OAAO,UAAW,SAAQ,OAAmB;IAGjD,YAAoB,MAAc,EAAE,KAAgB;QAClD,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEM,MAAM,CAAC,EAAE,CAAC,MAAc,EAAE,KAAgB;QAC/C,OAAO,IAAI,UAAU,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACvC,CAAC;IAEM,SAAS;QACd,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEM,MAAM,CAAC,GAAe;QAC3B,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACrD,CAAC;IAEM,KAAK,CAAC,MAAmB;QAC9B,MAAM,QAAQ,GAAG,MAAM,CAAC,gBAAgB,EAAE,CAAC;QAC3C,OAAO,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,cAAc;IAC5E,CAAC;IAEM,gBAAgB,CAAC,KAAgB;QACtC,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,CAAC;IACjD,CAAC;IAES,gBAAgB,CAAC,IAAgB;QACzC,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;IACnD,CAAC;CACF","sourcesContent":["import Big, { BigSource } from \"big.js\";\nimport { Decimal, Percentage } from \"./basic\";\nimport { AssetConfig } from \"./AssetConfig\";\nimport { MintId } from \"./MintId\";\n\nexport class AssetPrice extends Decimal<AssetPrice> {\n  private readonly mintId: MintId;\n\n  private constructor(mintId: MintId, value: BigSource) {\n    super(value);\n    this.mintId = mintId;\n  }\n\n  public static of(mintId: MintId, value: BigSource): AssetPrice {\n    return new AssetPrice(mintId, value);\n  }\n\n  public getMintId(): MintId {\n    return this.mintId;\n  }\n\n  public addFee(pct: Percentage): AssetPrice {\n    return this.multiply(new Big(1).add(pct.getRaw()));\n  }\n\n  public print(config: AssetConfig): string {\n    const decimals = config.getPriceDecimals();\n    return \"$\" + this.raw.round(decimals, 1).toFixed(decimals); // RoundHalfUp\n  }\n\n  public replaceWithValue(value: BigSource): AssetPrice {\n    return new AssetPrice(this.getMintId(), value);\n  }\n\n  protected isCompatibleWith(that: AssetPrice): boolean {\n    return this.getMintId().equals(that.getMintId());\n  }\n}\n"]}