export class ReserveContext {
    constructor(reserves, byReserveId, byAssetMintId, byShareMintId, byStakingPoolId) {
        this.reserves = reserves;
        this.byReserveId = byReserveId;
        this.byAssetMintId = byAssetMintId;
        this.byShareMintId = byShareMintId;
        this.byStakingPoolId = byStakingPoolId;
    }
    static empty() {
        return ReserveContext.RESERVE_CONTEXT_EMPTY;
    }
    static index(reserves, tokenMap) {
        if (!reserves.length) {
            return ReserveContext.empty();
        }
        const readyToSortReserves = tokenMap
            ? reserves.filter((r) => {
                return tokenMap.has(r.getAssetMintId().toString());
            })
            : reserves;
        const sorted = readyToSortReserves.sort((a, b) => -a.getMarketCap().getValue().compare(b.getMarketCap().getValue()));
        const byReserveId = new Map();
        const byAssetMintId = new Map();
        const byShareMintId = new Map();
        const byStakingPoolId = new Map();
        sorted.forEach((reserve) => byReserveId.set(reserve.getReserveId().toString(), reserve));
        sorted.forEach((reserve) => byAssetMintId.set(reserve.getAssetMintId().toString(), reserve));
        sorted.forEach((reserve) => byShareMintId.set(reserve.getShareMintId().toString(), reserve));
        sorted.forEach((reserve) => {
            const stakingPoolId = reserve.getStakingPoolId();
            if (stakingPoolId) {
                byStakingPoolId.set(stakingPoolId.toString(), reserve);
            }
        });
        return new ReserveContext(sorted, byReserveId, byAssetMintId, byShareMintId, byStakingPoolId);
    }
    isReady() {
        return this.reserves.length > 0;
    }
    getAllReserves() {
        return this.reserves;
    }
    getAllReservesPricePubKey() {
        return this.reserves.map((r) => r.getOracleId());
    }
    getReserve(reserveId) {
        const result = this.findReserve(reserveId);
        if (!result) {
            throw new Error(`No reserve for ${reserveId}`);
        }
        return result;
    }
    getByAssetMintId(mintId) {
        const result = this.findByAssetMintId(mintId);
        if (!result) {
            throw new Error(`No reserve for asset mint ${mintId}`);
        }
        return result;
    }
    getByShareMintId(mintId) {
        const result = this.findByShareMintId(mintId);
        if (!result) {
            throw new Error(`No reserve for share mint ${mintId}`);
        }
        return result;
    }
    findReserve(reserveId) {
        const key = reserveId.toString();
        return this.byReserveId.get(key);
    }
    findByAssetMintId(mintId) {
        const key = mintId.toString();
        return this.byAssetMintId.get(key);
    }
    findByShareMintId(mintId) {
        const key = mintId.toString();
        return this.byShareMintId.get(key);
    }
    findByStakingPoolId(stakingPoolId) {
        if (!stakingPoolId) {
            return undefined;
        }
        const key = stakingPoolId.toString();
        return this.byStakingPoolId.get(key);
    }
}
ReserveContext.RESERVE_CONTEXT_EMPTY = new ReserveContext([], new Map(), new Map(), new Map(), new Map());
//# sourceMappingURL=ReserveContext.js.map