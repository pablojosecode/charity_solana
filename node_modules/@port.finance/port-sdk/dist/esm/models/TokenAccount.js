import { TokenAccountId } from "./TokenAccountId";
import { MintId } from "./MintId";
import { Lamport } from "./basic";
import { WalletId } from "./WalletId";
import { AccountLayout, u64 } from "@solana/spl-token";
import { PublicKey } from "@solana/web3.js";
export class TokenAccount {
    constructor(balanceId, walletId, mintId, amount) {
        this.splAccountId = balanceId;
        this.walletId = walletId;
        this.mintId = mintId;
        this.amount = amount;
    }
    static forNative(raw) {
        return new TokenAccount(TokenAccountId.of(raw.pubkey), WalletId.of(raw.pubkey), MintId.native(), Lamport.of(raw.account.lamports));
    }
    static fromRaw(raw) {
        const buffer = Buffer.from(raw.account.data);
        const accountInfo = AccountLayout.decode(buffer);
        accountInfo.mint = new PublicKey(accountInfo.mint);
        accountInfo.owner = new PublicKey(accountInfo.owner);
        accountInfo.amount = u64.fromBuffer(accountInfo.amount);
        return new TokenAccount(TokenAccountId.of(raw.pubkey), WalletId.of(accountInfo.owner), MintId.of(accountInfo.mint), Lamport.of(accountInfo.amount));
    }
    getId() {
        return this.getSplAccountId();
    }
    getSplAccountId() {
        return this.splAccountId;
    }
    getWalletId() {
        return this.walletId;
    }
    isNative() {
        return this.getMintId().isNative();
    }
    getMintId() {
        return this.mintId;
    }
    isPositive() {
        return this.amount.isPositive();
    }
    getAmount() {
        return this.amount;
    }
}
//# sourceMappingURL=TokenAccount.js.map