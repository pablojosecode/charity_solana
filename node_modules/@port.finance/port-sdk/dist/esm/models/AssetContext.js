import { DEFAULT_ASSET_CONFIG } from "../utils/defaultAssetConfig";
export class AssetContext {
    constructor(cache, bySymbol, byReserveId) {
        this.cache = cache;
        this.bySymbol = bySymbol;
        this.byReserveId = byReserveId;
    }
    static index(configs) {
        const cache = new Map();
        configs.forEach((config) => cache.set(config.getMintId().toString(), config));
        const bySymbol = new Map();
        configs.forEach((config) => bySymbol.set(config.getSymbol(), config));
        const byReserveId = new Map();
        for (const config of configs) {
            const reserveId = config.getReserveId();
            if (reserveId) {
                byReserveId.set(reserveId.toBase58(), config);
            }
        }
        return new AssetContext(cache, bySymbol, byReserveId);
    }
    getAllConfigs() {
        return Array.from(this.cache.values());
    }
    findConfig(mintId) {
        var _a;
        const key = mintId.toString();
        return (_a = this.cache.get(key)) !== null && _a !== void 0 ? _a : DEFAULT_ASSET_CONFIG;
    }
    findConfigBySymbol(symbol) {
        var _a;
        return (_a = this.bySymbol.get(symbol)) !== null && _a !== void 0 ? _a : DEFAULT_ASSET_CONFIG;
    }
    findConfigByReserveId(reserveId) {
        var _a;
        return (_a = this.byReserveId.get(reserveId.toBase58())) !== null && _a !== void 0 ? _a : DEFAULT_ASSET_CONFIG;
    }
}
//# sourceMappingURL=AssetContext.js.map