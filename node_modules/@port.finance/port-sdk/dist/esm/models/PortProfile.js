import { PortProfileId } from "./PortProfileId";
import { Collateral } from "./Collateral";
import { Loan } from "./Loan";
import { ReserveId } from "./ReserveId";
import { Margin } from "./Margin";
import * as BufferLayout from "@solana/buffer-layout";
import { ObligationCollateralLayout, ObligationLayout, ObligationLiquidityLayout, } from "../structs";
export class PortProfile {
    constructor(profileId, collaterals, loans, loanMargin, initialMargin, maintenanceMargin, owner, depositedValue) {
        this.profileId = profileId;
        this.collaterals = collaterals;
        this.loans = loans;
        this.loanMargin = loanMargin;
        this.initialMargin = initialMargin;
        this.maintenanceMargin = maintenanceMargin;
        this.owner = owner;
        this.depositedValue = depositedValue;
    }
    static newAccount(profileId) {
        return new PortProfile(profileId, [], [], Margin.zero(), Margin.zero(), Margin.zero());
    }
    static fromRaw(raw) {
        const profileId = PortProfileId.of(raw.pubkey);
        // eslint-disable-next-line new-cap
        const proto = PortProfileParser(raw.account.data);
        const collaterals = proto.deposits.map((c) => new Collateral(ReserveId.of(c.depositReserve), c.depositedAmount));
        const loans = proto.borrows.map((l) => new Loan(l.borrowReserve, l.borrowedAmountWads, l.cumulativeBorrowRateWads));
        const loanMargin = proto.borrowedValue;
        const initialMargin = proto.allowedBorrowValue;
        const maintenanceMargin = proto.unhealthyBorrowValue;
        const depositedValue = proto.depositedValue;
        const owner = proto.owner;
        return new PortProfile(profileId, collaterals, loans, loanMargin, initialMargin, maintenanceMargin, owner, depositedValue);
    }
    getDepositedValue() {
        return this.depositedValue;
    }
    getOwner() {
        return this.owner;
    }
    getId() {
        return this.getProfileId();
    }
    getProfileId() {
        return this.profileId;
    }
    getCollateral(reserveId) {
        return this.getCollaterals().find((c) => c.getReserveId().equals(reserveId));
    }
    getCollateralReserveIds() {
        return this.getCollaterals().map((c) => c.getReserveId());
    }
    getCollaterals() {
        return this.collaterals;
    }
    getLoan(reserveId) {
        return this.getLoans().find((l) => l.getReserveId().equals(reserveId));
    }
    getLoanReserveIds() {
        return this.getLoans().map((l) => l.getReserveId());
    }
    getLoans() {
        return this.loans;
    }
    getLoanMargin() {
        return this.loanMargin;
    }
    getInitialMargin() {
        return this.initialMargin;
    }
    getMaintenanceMargin() {
        return this.maintenanceMargin;
    }
    getRiskFactor() {
        return this.getLoanMargin().toRatioAgainst(this.getMaintenanceMargin());
    }
    getLoanToValue() {
        return this.getLoanMargin().toRatioAgainst(this.getInitialMargin());
    }
}
const PortProfileParser = (buffer) => {
    const { version, lastUpdate, lendingMarket, owner, depositedValue, borrowedValue, allowedBorrowValue, unhealthyBorrowValue, depositsLen, borrowsLen, dataFlat, } = ObligationLayout.decode(buffer);
    const depositsBuffer = dataFlat.slice(0, depositsLen * ObligationCollateralLayout.span);
    const deposits = BufferLayout.seq(ObligationCollateralLayout, depositsLen).decode(depositsBuffer);
    const borrowsBuffer = dataFlat.slice(depositsBuffer.length, depositsBuffer.length + borrowsLen * ObligationLiquidityLayout.span);
    const borrows = BufferLayout.seq(ObligationLiquidityLayout, borrowsLen).decode(borrowsBuffer);
    return {
        version,
        lastUpdate,
        lendingMarket,
        owner,
        depositedValue,
        borrowedValue,
        allowedBorrowValue,
        unhealthyBorrowValue,
        deposits,
        borrows,
    };
};
//# sourceMappingURL=PortProfile.js.map