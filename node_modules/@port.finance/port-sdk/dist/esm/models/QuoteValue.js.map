{"version":3,"file":"QuoteValue.js","sourceRoot":"","sources":["../../../src/models/QuoteValue.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAChC,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,MAAM,SAAS,CAAC;AACnD,OAAO,EAAE,OAAO,EAAE,MAAM,0BAA0B,CAAC;AAEnD,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAElC,MAAM,OAAO,UAAW,SAAQ,KAAiB;IAG/C,YAAoB,GAAc;QAChC,KAAK,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;IAEM,MAAM,CAAC,EAAE,CAAC,GAAc;QAC7B,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,MAAM,CAAC,MAAM,EAAE,EAAE;YACnB,OAAO,UAAU,CAAC,IAAI,EAAE,CAAC;SAC1B;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAEM,MAAM,CAAC,IAAI;QAChB,OAAO,UAAU,CAAC,gBAAgB,CAAC;IACrC,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,QAAgB;QAClC,OAAO,IAAI,eAAe,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;IAEM,kBAAkB,CAAC,WAAuB;QAC/C,OAAO,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAC5D,CAAC;IAEM,YAAY;QACjB,OAAO,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;IAClC,CAAC;IAEM,cAAc,CAAC,SAAqB;QACzC,IAAI,SAAS,CAAC,MAAM,EAAE,EAAE;YACtB,OAAO,UAAU,CAAC,EAAE,EAAE,CAAC;SACxB;QACD,MAAM,GAAG,GAAG,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QACtE,OAAO,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IAEM,gBAAgB,CAAC,KAAgB;QACtC,OAAO,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;;AAzCuB,2BAAgB,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;AA4C/D,MAAM,eAAgB,SAAQ,YAAwB;IACpD,YAAmB,QAAgB;QACjC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAChC,CAAC;IAES,OAAO,CAAC,GAAQ;QACxB,OAAO,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;CACF","sourcesContent":["import Big, { BigSource } from \"big.js\";\nimport { Value } from \"./Value\";\nimport { ValueRatio } from \"./ValueRatio\";\nimport { Percentage, DecimalField } from \"./basic\";\nimport { BigType } from \"../serialization/BigType\";\nimport { Field } from \"../serialization/Field\";\nimport { Margin } from \"./Margin\";\n\nexport class QuoteValue extends Value<QuoteValue> {\n  private static readonly QUOTE_VALUE_ZERO = new QuoteValue(0);\n\n  private constructor(raw: BigSource) {\n    super(raw);\n  }\n\n  public static of(raw: BigSource): QuoteValue {\n    const result = new QuoteValue(raw);\n    if (result.isZero()) {\n      return QuoteValue.zero();\n    }\n\n    return result;\n  }\n\n  public static zero(): QuoteValue {\n    return QuoteValue.QUOTE_VALUE_ZERO;\n  }\n\n  public static field(property: string): Field<QuoteValue> {\n    return new QuoteValueField(property);\n  }\n\n  public toCollateralMargin(loanToValue: Percentage): Margin {\n    return Margin.of(this.getRaw().mul(loanToValue.getRaw()));\n  }\n\n  public toLoanMargin(): Margin {\n    return Margin.of(this.getRaw());\n  }\n\n  public toRatioAgainst(threshold: QuoteValue): ValueRatio {\n    if (threshold.isZero()) {\n      return ValueRatio.na();\n    }\n    const pct = Percentage.fromOneBased(this.getRaw().div(threshold.raw));\n    return ValueRatio.of(pct);\n  }\n\n  public replaceWithValue(value: BigSource): QuoteValue {\n    return new QuoteValue(value);\n  }\n}\n\nclass QuoteValueField extends DecimalField<QuoteValue> {\n  public constructor(property: string) {\n    super(BigType.D128, property);\n  }\n\n  protected fromBig(big: Big): QuoteValue {\n    return QuoteValue.of(big);\n  }\n}\n"]}