{"version":3,"file":"StakingPool.js","sourceRoot":"","sources":["../../../../src/models/staking/StakingPool.ts"],"names":[],"mappings":"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","sourcesContent":["import { StakingPoolId } from \"./StakingPoolId\";\nimport { Parsed } from \"../../serialization/Parsed\";\nimport { TokenAccountId } from \"../TokenAccountId\";\nimport { Slot } from \"../Slot\";\nimport { ExchangeRate } from \"../ExchangeRate\";\nimport { Lamport } from \"../basic\";\nimport { RawData } from \"../../serialization/RawData\";\nimport { ReserveInfo } from \"../ReserveInfo\";\nimport { Apy } from \"../Apy\";\nimport { Share } from \"../Share\";\nimport { AssetPrice } from \"../AssetPrice\";\nimport { StakingPoolLayout, StakingPoolProto } from \"../../structs\";\nimport { AuthorityId } from \"../AuthorityId\";\nimport Big from \"big.js\";\nimport type { TokenInfo } from \"@solana/spl-token-registry\";\nimport { QuantityContext } from \"..\";\n\nconst SLOT_PER_SECOND = 2;\nconst SLOT_PER_YEAR = SLOT_PER_SECOND * 3600 * 24 * 365;\n\nexport class StakingPool implements Parsed<StakingPoolId> {\n  private readonly stakingPoolId: StakingPoolId;\n  private readonly rewardTokenPool: TokenAccountId;\n  private readonly subRewardTokenPool?: TokenAccountId;\n  private readonly lastUpdate: Slot;\n  private readonly endTime: Slot;\n  private readonly earliestRewardClaimTime: Slot;\n  private readonly duration: Slot;\n  private readonly ratePerSlot: ExchangeRate;\n  private readonly subRatePerSlot?: ExchangeRate;\n  private readonly cumulativeRate: ExchangeRate;\n  private readonly subCumulativeRate?: ExchangeRate;\n  private readonly poolSize: Lamport;\n\n  // use in api-server\n  private readonly ownerAuthority: AuthorityId;\n  private readonly adminAuthority: AuthorityId;\n\n  private constructor(\n    stakingPoolId: StakingPoolId,\n    rewardTokenPool: TokenAccountId,\n    lastUpdate: Slot,\n    endTime: Slot,\n    earliestRewardClaimTime: Slot,\n    duration: Slot,\n    ratePerSlot: ExchangeRate,\n    cumulativeRate: ExchangeRate,\n    poolSize: Lamport,\n    ownerAuthority: AuthorityId,\n    adminAuthority: AuthorityId,\n    subRewardTokenPool?: TokenAccountId,\n    subRatePerSlot?: ExchangeRate,\n    subCumulativeRate?: ExchangeRate\n  ) {\n    this.stakingPoolId = stakingPoolId;\n    this.rewardTokenPool = rewardTokenPool;\n    this.lastUpdate = lastUpdate;\n    this.endTime = endTime;\n    this.earliestRewardClaimTime = earliestRewardClaimTime;\n    this.duration = duration;\n    this.ratePerSlot = ratePerSlot;\n    this.cumulativeRate = cumulativeRate;\n    this.poolSize = poolSize;\n    this.ownerAuthority = ownerAuthority;\n    this.adminAuthority = adminAuthority;\n    this.subRewardTokenPool = subRewardTokenPool;\n    this.subRatePerSlot = subRatePerSlot;\n    this.subCumulativeRate = subCumulativeRate;\n  }\n\n  public static fromRaw(raw: RawData): StakingPool {\n    const buffer = Buffer.from(raw.account.data);\n    const info = StakingPoolLayout.decode(buffer) as StakingPoolProto;\n\n    return new StakingPool(\n      StakingPoolId.of(raw.pubkey),\n      info.rewardTokenPool,\n      info.lastUpdate,\n      info.endTime,\n      info.earliestRewardClaimTime,\n      info.duration,\n      info.ratePerSlot,\n      info.cumulativeRate,\n      info.poolSize,\n      info.ownerAuthority,\n      info.adminAuthority,\n      info.subRewardTokenPoolOption === 1 ? info.subRewardTokenPool : undefined,\n      info.subRatePerSlotOption === 1 ? info.subRatePerSlot : undefined,\n      info.subCumulativeRateOption === 1 ? info.subCumulativeRate : undefined\n    );\n  }\n\n  public getOwnerAuthorityId(): AuthorityId {\n    return this.ownerAuthority;\n  }\n\n  public getAdminAuthorityId(): AuthorityId {\n    return this.adminAuthority;\n  }\n\n  public getId(): StakingPoolId {\n    return this.getStakingPoolId();\n  }\n\n  public getStakingPoolId(): StakingPoolId {\n    return this.stakingPoolId;\n  }\n\n  public getRewardTokenPool(): TokenAccountId {\n    return this.rewardTokenPool;\n  }\n\n  public getSubRewardTokenPool(): TokenAccountId | undefined {\n    return this.subRewardTokenPool;\n  }\n\n  public getLastUpdate(): Slot {\n    return this.lastUpdate;\n  }\n\n  public getEndTime(): Slot {\n    return this.endTime;\n  }\n\n  public getEarliestRewardClaimTime(): Slot {\n    return this.earliestRewardClaimTime;\n  }\n\n  public getDuration(): Slot {\n    return this.duration;\n  }\n\n  public getRatePerSlot(): ExchangeRate {\n    return this.ratePerSlot;\n  }\n\n  public getSubRatePerSlot(): ExchangeRate | undefined {\n    return this.subRatePerSlot;\n  }\n\n  public getCumulativeRate(): ExchangeRate {\n    return this.cumulativeRate;\n  }\n\n  public getSubCumulativeRate(): ExchangeRate | undefined {\n    return this.cumulativeRate;\n  }\n\n  public getPoolSize(): Lamport {\n    return this.poolSize;\n  }\n\n  public isPoolEnd(currentSlot: Slot): boolean {\n    return this.getEndTime().lt(currentSlot);\n  }\n\n  public getEstimatedRate(currentSlot: Slot): ExchangeRate {\n    const poolSize = this.getPoolSize();\n    if (poolSize.isZero()) {\n      return ExchangeRate.zero();\n    }\n\n    currentSlot = currentSlot.min(this.getEndTime());\n    const slotDiff = currentSlot.subtract(this.getLastUpdate());\n    if (slotDiff.isNegative()) {\n      throw new Error(\"Slot older than last update\");\n    }\n\n    const rateDiff = this.getRatePerSlot()\n      .multiply(slotDiff.getRaw())\n      .divide(poolSize.getRaw());\n    return this.getCumulativeRate().add(rateDiff);\n  }\n\n  public getRewardApy(\n    reserve: ReserveInfo,\n    price: AssetPrice,\n    tokenInfo: TokenInfo\n  ): Apy {\n    return this.getRewardApyInner(\n      reserve,\n      tokenInfo,\n      price.getRaw(),\n      this.getRatePerSlot()\n    );\n  }\n\n  public getSubRewardApy(\n    reserve: ReserveInfo,\n    price: AssetPrice | Big,\n    tokenInfo: TokenInfo\n  ): Apy {\n    const subRatePerSlot = this.getSubRatePerSlot();\n    if (!subRatePerSlot) {\n      return Apy.na();\n    } else if (price instanceof AssetPrice) {\n      return this.getRewardApyInner(\n        reserve,\n        tokenInfo,\n        price.getRaw(),\n        subRatePerSlot\n      );\n    } else {\n      return this.getRewardApyInner(reserve, tokenInfo, price, subRatePerSlot);\n    }\n  }\n\n  private getRewardApyInner(\n    reserve: ReserveInfo,\n    tokenInfo: TokenInfo,\n    price: Big,\n    ratePerSlot: ExchangeRate\n  ): Apy {\n    const poolSize = this.getPoolSize();\n    if (!poolSize.isPositive()) {\n      return Apy.na();\n    }\n\n    const share = Share.of(reserve.getShareMintId(), poolSize);\n    const asset = share.toAsset(reserve.getExchangeRatio());\n    const tvl = asset.toValue(\n      reserve.getMarkPrice(),\n      reserve.getQuantityContext()\n    );\n\n    const qtyContext = QuantityContext.fromDecimals(tokenInfo.decimals);\n\n    const raw = ratePerSlot\n      .getRaw()\n      .mul(SLOT_PER_YEAR)\n      .mul(price)\n      .div(qtyContext.multiplier)\n      .div(tvl.getRaw());\n    return Apy.of(raw);\n  }\n}\n"]}