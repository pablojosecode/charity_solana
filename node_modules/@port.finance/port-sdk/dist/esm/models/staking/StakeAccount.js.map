{"version":3,"file":"StakeAccount.js","sourceRoot":"","sources":["../../../../src/models/staking/StakeAccount.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAE/C,OAAO,EAAE,OAAO,EAAE,MAAM,UAAU,CAAC;AAEnC,OAAO,EAAE,kBAAkB,EAAqB,MAAM,eAAe,CAAC;AAEtE,MAAM,OAAO,YAAY;IAOvB,YACE,cAA8B,EAC9B,aAA4B,EAC5B,SAAuB,EACvB,eAAwB,EACxB,eAAwB;QAExB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IACzC,CAAC;IAEM,MAAM,CAAC,UAAU,CACtB,cAA8B,EAC9B,aAA4B;QAE5B,OAAO,IAAI,YAAY,CACrB,cAAc,EACd,aAAa,EACb,YAAY,CAAC,IAAI,EAAE,EACnB,OAAO,CAAC,IAAI,EAAE,EACd,OAAO,CAAC,IAAI,EAAE,CACf,CAAC;IACJ,CAAC;IAEM,MAAM,CAAC,OAAO,CAAC,GAAY;QAChC,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7C,MAAM,KAAK,GAAG,kBAAkB,CAAC,MAAM,CAAC,MAAM,CAAsB,CAAC;QAErE,MAAM,cAAc,GAAG,cAAc,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACrD,OAAO,IAAI,YAAY,CACrB,cAAc,EACd,KAAK,CAAC,UAAU,EAChB,KAAK,CAAC,SAAS,EACf,KAAK,CAAC,eAAe,EACrB,KAAK,CAAC,mBAAmB,CAC1B,CAAC;IACJ,CAAC;IAEM,KAAK;QACV,OAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAClC,CAAC;IAEM,iBAAiB;QACtB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAEM,gBAAgB;QACrB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAEM,YAAY;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAEM,gBAAgB;QACrB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAEM,kBAAkB;QACvB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAEM,uBAAuB,CAAC,IAAkB;QAC/C,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;QACpD,IAAI,QAAQ,CAAC,UAAU,EAAE,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;SAC/C;QAED,MAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QAC3E,OAAO,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC;IACvD,CAAC;CACF","sourcesContent":["import { Parsed } from \"../../serialization/Parsed\";\nimport { StakeAccountId } from \"./StakeAccountId\";\nimport { ExchangeRate } from \"../ExchangeRate\";\nimport { StakingPoolId } from \"./StakingPoolId\";\nimport { Lamport } from \"../basic\";\nimport { RawData } from \"../../serialization/RawData\";\nimport { StakeAccountLayout, StakeAccountProto } from \"../../structs\";\n\nexport class StakeAccount implements Parsed<StakeAccountId> {\n  private readonly stakeAccountId: StakeAccountId;\n  private readonly stakingPoolId: StakingPoolId;\n  private readonly startRate: ExchangeRate;\n  private readonly depositedAmount: Lamport;\n  private readonly unclaimedReward: Lamport;\n\n  private constructor(\n    stakeAccountId: StakeAccountId,\n    stakingPoolId: StakingPoolId,\n    startRate: ExchangeRate,\n    depositedAmount: Lamport,\n    unclaimedReward: Lamport\n  ) {\n    this.stakeAccountId = stakeAccountId;\n    this.stakingPoolId = stakingPoolId;\n    this.startRate = startRate;\n    this.depositedAmount = depositedAmount;\n    this.unclaimedReward = unclaimedReward;\n  }\n\n  public static newAccount(\n    stakeAccountId: StakeAccountId,\n    stakingPoolId: StakingPoolId\n  ): StakeAccount {\n    return new StakeAccount(\n      stakeAccountId,\n      stakingPoolId,\n      ExchangeRate.zero(),\n      Lamport.zero(),\n      Lamport.zero()\n    );\n  }\n\n  public static fromRaw(raw: RawData): StakeAccount {\n    const buffer = Buffer.from(raw.account.data);\n    const proto = StakeAccountLayout.decode(buffer) as StakeAccountProto;\n\n    const stakeAccountId = StakeAccountId.of(raw.pubkey);\n    return new StakeAccount(\n      stakeAccountId,\n      proto.poolPubkey,\n      proto.startRate,\n      proto.depositedAmount,\n      proto.unclaimedRewardWads\n    );\n  }\n\n  public getId(): StakeAccountId {\n    return this.getStakeAccountId();\n  }\n\n  public getStakeAccountId(): StakeAccountId {\n    return this.stakeAccountId;\n  }\n\n  public getStakingPoolId(): StakingPoolId {\n    return this.stakingPoolId;\n  }\n\n  public getStartRate(): ExchangeRate {\n    return this.startRate;\n  }\n\n  public getDepositAmount(): Lamport {\n    return this.depositedAmount;\n  }\n\n  public getUnclaimedReward(): Lamport {\n    return this.unclaimedReward;\n  }\n\n  public getTotalClaimableReward(rate: ExchangeRate): Lamport {\n    const rateDiff = rate.subtract(this.getStartRate());\n    if (rateDiff.isNegative()) {\n      throw new Error(\"Rate lower than start rate\");\n    }\n\n    const extraClaimable = this.getDepositAmount().multiply(rateDiff.getRaw());\n    return extraClaimable.add(this.getUnclaimedReward());\n  }\n}\n"]}