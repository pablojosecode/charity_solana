import { StakingPoolId } from "./StakingPoolId";
import { ExchangeRate } from "../ExchangeRate";
import { Apy } from "../Apy";
import { Share } from "../Share";
import { AssetPrice } from "../AssetPrice";
import { StakingPoolLayout } from "../../structs";
import { QuantityContext } from "..";
const SLOT_PER_SECOND = 2;
const SLOT_PER_YEAR = SLOT_PER_SECOND * 3600 * 24 * 365;
export class StakingPool {
    constructor(stakingPoolId, rewardTokenPool, lastUpdate, endTime, earliestRewardClaimTime, duration, ratePerSlot, cumulativeRate, poolSize, ownerAuthority, adminAuthority, subRewardTokenPool, subRatePerSlot, subCumulativeRate) {
        this.stakingPoolId = stakingPoolId;
        this.rewardTokenPool = rewardTokenPool;
        this.lastUpdate = lastUpdate;
        this.endTime = endTime;
        this.earliestRewardClaimTime = earliestRewardClaimTime;
        this.duration = duration;
        this.ratePerSlot = ratePerSlot;
        this.cumulativeRate = cumulativeRate;
        this.poolSize = poolSize;
        this.ownerAuthority = ownerAuthority;
        this.adminAuthority = adminAuthority;
        this.subRewardTokenPool = subRewardTokenPool;
        this.subRatePerSlot = subRatePerSlot;
        this.subCumulativeRate = subCumulativeRate;
    }
    static fromRaw(raw) {
        const buffer = Buffer.from(raw.account.data);
        const info = StakingPoolLayout.decode(buffer);
        return new StakingPool(StakingPoolId.of(raw.pubkey), info.rewardTokenPool, info.lastUpdate, info.endTime, info.earliestRewardClaimTime, info.duration, info.ratePerSlot, info.cumulativeRate, info.poolSize, info.ownerAuthority, info.adminAuthority, info.subRewardTokenPoolOption === 1 ? info.subRewardTokenPool : undefined, info.subRatePerSlotOption === 1 ? info.subRatePerSlot : undefined, info.subCumulativeRateOption === 1 ? info.subCumulativeRate : undefined);
    }
    getOwnerAuthorityId() {
        return this.ownerAuthority;
    }
    getAdminAuthorityId() {
        return this.adminAuthority;
    }
    getId() {
        return this.getStakingPoolId();
    }
    getStakingPoolId() {
        return this.stakingPoolId;
    }
    getRewardTokenPool() {
        return this.rewardTokenPool;
    }
    getSubRewardTokenPool() {
        return this.subRewardTokenPool;
    }
    getLastUpdate() {
        return this.lastUpdate;
    }
    getEndTime() {
        return this.endTime;
    }
    getEarliestRewardClaimTime() {
        return this.earliestRewardClaimTime;
    }
    getDuration() {
        return this.duration;
    }
    getRatePerSlot() {
        return this.ratePerSlot;
    }
    getSubRatePerSlot() {
        return this.subRatePerSlot;
    }
    getCumulativeRate() {
        return this.cumulativeRate;
    }
    getSubCumulativeRate() {
        return this.cumulativeRate;
    }
    getPoolSize() {
        return this.poolSize;
    }
    isPoolEnd(currentSlot) {
        return this.getEndTime().lt(currentSlot);
    }
    getEstimatedRate(currentSlot) {
        const poolSize = this.getPoolSize();
        if (poolSize.isZero()) {
            return ExchangeRate.zero();
        }
        currentSlot = currentSlot.min(this.getEndTime());
        const slotDiff = currentSlot.subtract(this.getLastUpdate());
        if (slotDiff.isNegative()) {
            throw new Error("Slot older than last update");
        }
        const rateDiff = this.getRatePerSlot()
            .multiply(slotDiff.getRaw())
            .divide(poolSize.getRaw());
        return this.getCumulativeRate().add(rateDiff);
    }
    getRewardApy(reserve, price, tokenInfo) {
        return this.getRewardApyInner(reserve, tokenInfo, price.getRaw(), this.getRatePerSlot());
    }
    getSubRewardApy(reserve, price, tokenInfo) {
        const subRatePerSlot = this.getSubRatePerSlot();
        if (!subRatePerSlot) {
            return Apy.na();
        }
        else if (price instanceof AssetPrice) {
            return this.getRewardApyInner(reserve, tokenInfo, price.getRaw(), subRatePerSlot);
        }
        else {
            return this.getRewardApyInner(reserve, tokenInfo, price, subRatePerSlot);
        }
    }
    getRewardApyInner(reserve, tokenInfo, price, ratePerSlot) {
        const poolSize = this.getPoolSize();
        if (!poolSize.isPositive()) {
            return Apy.na();
        }
        const share = Share.of(reserve.getShareMintId(), poolSize);
        const asset = share.toAsset(reserve.getExchangeRatio());
        const tvl = asset.toValue(reserve.getMarkPrice(), reserve.getQuantityContext());
        const qtyContext = QuantityContext.fromDecimals(tokenInfo.decimals);
        const raw = ratePerSlot
            .getRaw()
            .mul(SLOT_PER_YEAR)
            .mul(price)
            .div(qtyContext.multiplier)
            .div(tvl.getRaw());
        return Apy.of(raw);
    }
}
//# sourceMappingURL=StakingPool.js.map