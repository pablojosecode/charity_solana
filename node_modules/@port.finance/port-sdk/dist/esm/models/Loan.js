import { Lamport } from "./basic";
import { ProfileEntry } from "./ProfileEntry";
export class Loan extends ProfileEntry {
    constructor(reserveId, amount, cumulativeBorrowRate) {
        super(reserveId, amount);
        this.cumulativeBorrowRate = cumulativeBorrowRate;
    }
    static zero(reserve) {
        return new Loan(reserve.getReserveId(), Lamport.zero(), reserve.asset.getCumulativeBorrowRate());
    }
    accrueInterest(newCumulativeBorrowRate) {
        const compoundedInterestRate = newCumulativeBorrowRate.divide(this.cumulativeBorrowRate.getRaw());
        const newAmount = this.getAmount().multiply(compoundedInterestRate.getRaw());
        return new Loan(this.getReserveId(), newAmount, newCumulativeBorrowRate);
    }
    getCumulativeBorrowRate() {
        return this.cumulativeBorrowRate;
    }
    wrap(value) {
        return new Loan(this.getReserveId(), value, this.cumulativeBorrowRate);
    }
}
//# sourceMappingURL=Loan.js.map