{"version":3,"file":"AssetContext.js","sourceRoot":"","sources":["../../../src/models/AssetContext.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,6BAA6B,CAAC;AAKnE,MAAM,OAAO,YAAY;IAKvB,YACE,KAA+B,EAC/B,QAAkC,EAClC,WAAqC;QAErC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,OAAsB;QACxC,MAAM,KAAK,GAAG,IAAI,GAAG,EAAuB,CAAC;QAC7C,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE,CACzB,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,CACjD,CAAC;QACF,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAuB,CAAC;QAChD,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;QACtE,MAAM,WAAW,GAAG,IAAI,GAAG,EAAuB,CAAC;QACnD,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC5B,MAAM,SAAS,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;YACxC,IAAI,SAAS,EAAE;gBACb,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,CAAC;aAC/C;SACF;QACD,OAAO,IAAI,YAAY,CAAC,KAAK,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;IACxD,CAAC;IAEM,aAAa;QAClB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;IACzC,CAAC;IAEM,UAAU,CAAC,MAAc;;QAC9B,MAAM,GAAG,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAC9B,OAAO,MAAA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,mCAAI,oBAAoB,CAAC;IACrD,CAAC;IAEM,kBAAkB,CAAC,MAAc;;QACtC,OAAO,MAAA,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,mCAAI,oBAAoB,CAAC;IAC3D,CAAC;IAEM,qBAAqB,CAAC,SAAoB;;QAC/C,OAAO,MAAA,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,mCAAI,oBAAoB,CAAC;IAC5E,CAAC;CACF","sourcesContent":["import { DEFAULT_ASSET_CONFIG } from \"../utils/defaultAssetConfig\";\nimport { AssetConfig } from \"./AssetConfig\";\nimport { MintId } from \"./MintId\";\nimport { ReserveId } from \"./ReserveId\";\n\nexport class AssetContext {\n  private readonly cache: Map<string, AssetConfig>;\n  private readonly bySymbol: Map<string, AssetConfig>;\n  private readonly byReserveId: Map<string, AssetConfig>;\n\n  private constructor(\n    cache: Map<string, AssetConfig>,\n    bySymbol: Map<string, AssetConfig>,\n    byReserveId: Map<string, AssetConfig>\n  ) {\n    this.cache = cache;\n    this.bySymbol = bySymbol;\n    this.byReserveId = byReserveId;\n  }\n\n  public static index(configs: AssetConfig[]): AssetContext {\n    const cache = new Map<string, AssetConfig>();\n    configs.forEach((config) =>\n      cache.set(config.getMintId().toString(), config)\n    );\n    const bySymbol = new Map<string, AssetConfig>();\n    configs.forEach((config) => bySymbol.set(config.getSymbol(), config));\n    const byReserveId = new Map<string, AssetConfig>();\n    for (const config of configs) {\n      const reserveId = config.getReserveId();\n      if (reserveId) {\n        byReserveId.set(reserveId.toBase58(), config);\n      }\n    }\n    return new AssetContext(cache, bySymbol, byReserveId);\n  }\n\n  public getAllConfigs(): AssetConfig[] {\n    return Array.from(this.cache.values());\n  }\n\n  public findConfig(mintId: MintId): AssetConfig {\n    const key = mintId.toString();\n    return this.cache.get(key) ?? DEFAULT_ASSET_CONFIG;\n  }\n\n  public findConfigBySymbol(symbol: string): AssetConfig {\n    return this.bySymbol.get(symbol) ?? DEFAULT_ASSET_CONFIG;\n  }\n\n  public findConfigByReserveId(reserveId: ReserveId): AssetConfig {\n    return this.byReserveId.get(reserveId.toBase58()) ?? DEFAULT_ASSET_CONFIG;\n  }\n}\n"]}