import { Value } from "./Value";
import { MarginRatio } from "./MarginRatio";
import { Percentage, DecimalField } from "./basic";
import { BigType } from "../serialization/BigType";
import { QuoteValue } from "./QuoteValue";
export class Margin extends Value {
    constructor(value) {
        super(value);
    }
    static of(raw) {
        return new Margin(raw);
    }
    static zero() {
        return Margin.MARGIN_ZERO;
    }
    static field(property) {
        return new MarginField(property);
    }
    toCollateralValue(loanToValue) {
        return QuoteValue.of(this.getRaw().div(loanToValue.getRaw()));
    }
    toRatioAgainst(threshold) {
        if (threshold.isZero()) {
            return MarginRatio.na();
        }
        return MarginRatio.of(Percentage.fromOneBased(this.getRaw().div(threshold.raw)));
    }
    replaceWithValue(value) {
        return new Margin(value);
    }
}
Margin.MARGIN_ZERO = new Margin(0);
class MarginField extends DecimalField {
    constructor(property) {
        super(BigType.D128, property);
    }
    fromBig(big) {
        return Margin.of(big);
    }
}
//# sourceMappingURL=Margin.js.map