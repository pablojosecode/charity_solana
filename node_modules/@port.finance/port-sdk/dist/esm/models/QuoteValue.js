import { Value } from "./Value";
import { ValueRatio } from "./ValueRatio";
import { Percentage, DecimalField } from "./basic";
import { BigType } from "../serialization/BigType";
import { Margin } from "./Margin";
export class QuoteValue extends Value {
    constructor(raw) {
        super(raw);
    }
    static of(raw) {
        const result = new QuoteValue(raw);
        if (result.isZero()) {
            return QuoteValue.zero();
        }
        return result;
    }
    static zero() {
        return QuoteValue.QUOTE_VALUE_ZERO;
    }
    static field(property) {
        return new QuoteValueField(property);
    }
    toCollateralMargin(loanToValue) {
        return Margin.of(this.getRaw().mul(loanToValue.getRaw()));
    }
    toLoanMargin() {
        return Margin.of(this.getRaw());
    }
    toRatioAgainst(threshold) {
        if (threshold.isZero()) {
            return ValueRatio.na();
        }
        const pct = Percentage.fromOneBased(this.getRaw().div(threshold.raw));
        return ValueRatio.of(pct);
    }
    replaceWithValue(value) {
        return new QuoteValue(value);
    }
}
QuoteValue.QUOTE_VALUE_ZERO = new QuoteValue(0);
class QuoteValueField extends DecimalField {
    constructor(property) {
        super(BigType.D128, property);
    }
    fromBig(big) {
        return QuoteValue.of(big);
    }
}
//# sourceMappingURL=QuoteValue.js.map