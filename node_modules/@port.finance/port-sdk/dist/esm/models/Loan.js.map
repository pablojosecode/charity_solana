{"version":3,"file":"Loan.js","sourceRoot":"","sources":["../../../src/models/Loan.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,OAAO,EAAE,MAAM,SAAS,CAAC;AAClC,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAI9C,MAAM,OAAO,IAAK,SAAQ,YAAkB;IAG1C,YACE,SAAoB,EACpB,MAAe,EACf,oBAAkC;QAElC,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QACzB,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;IACnD,CAAC;IAEM,MAAM,CAAC,IAAI,CAAC,OAAoB;QACrC,OAAO,IAAI,IAAI,CACb,OAAO,CAAC,YAAY,EAAE,EACtB,OAAO,CAAC,IAAI,EAAE,EACd,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,CACxC,CAAC;IACJ,CAAC;IAEM,cAAc,CAAC,uBAAqC;QACzD,MAAM,sBAAsB,GAAG,uBAAuB,CAAC,MAAM,CAC3D,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,CACnC,CAAC;QACF,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,QAAQ,CACzC,sBAAsB,CAAC,MAAM,EAAE,CAChC,CAAC;QACF,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,SAAS,EAAE,uBAAuB,CAAC,CAAC;IAC3E,CAAC;IAEM,uBAAuB;QAC5B,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACnC,CAAC;IAES,IAAI,CAAC,KAAc;QAC3B,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACzE,CAAC;CACF","sourcesContent":["import { ReserveId } from \"./ReserveId\";\nimport { Lamport } from \"./basic\";\nimport { ProfileEntry } from \"./ProfileEntry\";\nimport { ExchangeRate } from \"./ExchangeRate\";\nimport { ReserveInfo } from \"./ReserveInfo\";\n\nexport class Loan extends ProfileEntry<Loan> {\n  private readonly cumulativeBorrowRate: ExchangeRate;\n\n  public constructor(\n    reserveId: ReserveId,\n    amount: Lamport,\n    cumulativeBorrowRate: ExchangeRate\n  ) {\n    super(reserveId, amount);\n    this.cumulativeBorrowRate = cumulativeBorrowRate;\n  }\n\n  public static zero(reserve: ReserveInfo): Loan {\n    return new Loan(\n      reserve.getReserveId(),\n      Lamport.zero(),\n      reserve.asset.getCumulativeBorrowRate()\n    );\n  }\n\n  public accrueInterest(newCumulativeBorrowRate: ExchangeRate): Loan {\n    const compoundedInterestRate = newCumulativeBorrowRate.divide(\n      this.cumulativeBorrowRate.getRaw()\n    );\n    const newAmount = this.getAmount().multiply(\n      compoundedInterestRate.getRaw()\n    );\n    return new Loan(this.getReserveId(), newAmount, newCumulativeBorrowRate);\n  }\n\n  public getCumulativeBorrowRate(): ExchangeRate {\n    return this.cumulativeBorrowRate;\n  }\n\n  protected wrap(value: Lamport): Loan {\n    return new Loan(this.getReserveId(), value, this.cumulativeBorrowRate);\n  }\n}\n"]}