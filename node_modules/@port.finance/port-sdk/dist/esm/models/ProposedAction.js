export class ProposedAction {
    constructor(assets, shares, collaterals, loans) {
        this.assets = assets;
        this.shares = shares;
        this.collaterals = collaterals;
        this.loans = loans;
    }
    static newProposal(args) {
        const assets = [];
        const shares = [];
        const collaterals = [];
        const loans = [];
        if (args.newAsset) {
            assets.push(args.newAsset);
        }
        if (args.newShare) {
            shares.push(args.newShare);
        }
        if (args.newCollateral) {
            collaterals.push(args.newCollateral);
        }
        if (args.newLoan) {
            loans.push(args.newLoan);
        }
        return new ProposedAction(assets, shares, collaterals, loans);
    }
    getUpdatedAsset(assetMintId) {
        return this.assets.find((a) => a.getMintId().equals(assetMintId));
    }
    getUpdatedShare(shareMintId) {
        return this.shares.find((s) => s.getMintId().equals(shareMintId));
    }
    getUpdatedCollateral(reserveId) {
        return this.collaterals.find((c) => c.getReserveId().equals(reserveId));
    }
    getUpdatedLoan(reserveId) {
        return this.loans.find((l) => l.getReserveId().equals(reserveId));
    }
    getUpdatedCollaterals(collaterals) {
        return ProposedAction.proposal(collaterals, this.collaterals);
    }
    getUpdatedLoans(loans) {
        return ProposedAction.proposal(loans, this.loans);
    }
    static proposal(entries, proposal) {
        if (!proposal.length) {
            return entries;
        }
        const map = new Map();
        for (const e of entries) {
            map.set(e.getReserveId().toBase58(), e);
        }
        for (const e of proposal) {
            map.set(e.getReserveId().toBase58(), e);
        }
        return Array.from(map.values());
    }
}
//# sourceMappingURL=ProposedAction.js.map