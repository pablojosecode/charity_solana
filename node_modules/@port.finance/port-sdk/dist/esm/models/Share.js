import { Asset } from "./Asset";
import { Token, Lamport } from "./basic";
export class Share extends Token {
    constructor(mintId, lamport) {
        super(mintId, lamport);
    }
    static zero(mintId) {
        return Share.of(mintId, Lamport.zero());
    }
    static max(mintId) {
        return Share.of(mintId, Lamport.max());
    }
    static fromTokenAccount(account) {
        return Share.of(account.getMintId(), account.getAmount());
    }
    static of(mintId, lamport) {
        return new Share(mintId, lamport);
    }
    toAsset(exchangeRatio) {
        console.assert(this.getMintId().equals(exchangeRatio.getShareMintId()));
        if (!exchangeRatio.isPresent()) {
            return Asset.zero(exchangeRatio.getAssetMintId());
        }
        const pct = exchangeRatio.getUnchecked();
        const lamport = Lamport.of(this.getRaw().div(pct).round(0));
        return Asset.of(exchangeRatio.getAssetMintId(), lamport);
    }
    wrap(value) {
        return Share.of(this.getMintId(), value);
    }
}
//# sourceMappingURL=Share.js.map