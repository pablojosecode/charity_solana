{"version":3,"file":"claimReward.js","sourceRoot":"","sources":["../../../../src/instructions/staking/claimReward.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,mBAAmB,EACnB,sBAAsB,GACvB,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,gBAAgB,EAAE,MAAM,mBAAmB,CAAC;AACrD,OAAO,KAAK,YAAY,MAAM,uBAAuB,CAAC;AACtD,OAAO,EAAE,mBAAmB,EAAE,MAAM,eAAe,CAAC;AACpD,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAC;AACjE,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAE/C,kDAAkD;AAClD,EAAE;AACF,yCAAyC;AACzC,uCAAuC;AACvC,mCAAmC;AACnC,kCAAkC;AAClC,uCAAuC;AACvC,wCAAwC;AACxC,gEAAgE;AAChE,0BAA0B;AAC1B,2BAA2B;AAC3B,MAAM,UAAU,sBAAsB,CACpC,uBAAkC,EAAE,IAAI;AACxC,kBAA6B,EAAE,IAAI;AACnC,iBAA4B,EAAE,IAAI;AAClC,qBAAgC,EAAE,KAAK;AACvC,gBAA2B,EAAE,IAAI;AACjC,mBAA8B,YAAY,EAC1C,gBAA4B,EAC5B,kBAA8B;IAE9B,MAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IACzE,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC3C,UAAU,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,mBAAmB,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,CAAC;IAE1E,MAAM,IAAI,GAAG;QACX,SAAS,CAAC,uBAAuB,EAAE,UAAU,CAAC,MAAM,CAAC;QACrD,SAAS,CAAC,kBAAkB,EAAE,UAAU,CAAC,KAAK,CAAC;QAC/C,SAAS,CAAC,iBAAiB,EAAE,UAAU,CAAC,KAAK,CAAC;QAC9C,SAAS,CAAC,qBAAqB,EAAE,UAAU,CAAC,KAAK,CAAC;QAClD,SAAS,CAAC,gBAAgB,EAAE,UAAU,CAAC,KAAK,CAAC;QAC7C,SAAS,CAAC,mBAAmB,EAAE,UAAU,CAAC,IAAI,CAAC;QAC/C,SAAS,CAAC,gBAAgB,EAAE,UAAU,CAAC,IAAI,CAAC;KAC7C,CAAC;IAEF,IAAI,gBAAgB,IAAI,kBAAkB,EAAE;QAC1C,IAAI,CAAC,IAAI,CACP,SAAS,CAAC,kBAAkB,EAAE,UAAU,CAAC,KAAK,CAAC,EAC/C,SAAS,CAAC,gBAAgB,EAAE,UAAU,CAAC,KAAK,CAAC,CAC9C,CAAC;KACH;IAED,OAAO,IAAI,sBAAsB,CAAC;QAChC,IAAI;QACJ,SAAS,EAAE,gBAAgB;QAC3B,IAAI;KACL,CAAC,CAAC;AACL,CAAC","sourcesContent":["import {\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport { StakingInstructions } from \"./instruction\";\nimport { AccessType, getAccess } from \"../../utils/Instructions\";\nimport { PORT_STAKING } from \"../../constants\";\n\n// Claim all unclaimed Reward from a stake account\n//\n// Accounts expected by this instruction:\n//   0. `[signer]` Stake account owner.\n//   1. `[writable]` Stake account.\n//   2. `[writable]` Staking pool.\n//   3. `[writable]` Reward token pool.\n//   4. `[writable]` Reward destination.\n//   5. `[]` Staking Pool owner derived from staking pool pubkey\n//   6. `[]` Clock sysvar.\n//   7. `[]` Token program.\nexport function claimRewardInstruction(\n  stakeAccountOwnerPubkey: PublicKey, // 0\n  stakeAccountPubkey: PublicKey, // 1\n  stakingPoolPubkey: PublicKey, // 2\n  rewardTokenPoolPubkey: PublicKey, // 3,\n  rewardDestPubkey: PublicKey, // 4\n  stakingProgramId: PublicKey = PORT_STAKING,\n  destSubAccountId?: PublicKey,\n  subRewardTokenPool?: PublicKey\n): TransactionInstruction {\n  const dataLayout = BufferLayout.struct([BufferLayout.u8(\"instruction\")]);\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode({ instruction: StakingInstructions.ClaimReward }, data);\n\n  const keys = [\n    getAccess(stakeAccountOwnerPubkey, AccessType.SIGNER),\n    getAccess(stakeAccountPubkey, AccessType.WRITE),\n    getAccess(stakingPoolPubkey, AccessType.WRITE),\n    getAccess(rewardTokenPoolPubkey, AccessType.WRITE),\n    getAccess(rewardDestPubkey, AccessType.WRITE),\n    getAccess(SYSVAR_CLOCK_PUBKEY, AccessType.READ),\n    getAccess(TOKEN_PROGRAM_ID, AccessType.READ),\n  ];\n\n  if (destSubAccountId && subRewardTokenPool) {\n    keys.push(\n      getAccess(subRewardTokenPool, AccessType.WRITE),\n      getAccess(destSubAccountId, AccessType.WRITE)\n    );\n  }\n\n  return new TransactionInstruction({\n    keys,\n    programId: stakingProgramId,\n    data,\n  });\n}\n"]}