{"version":3,"file":"createStakeAccount.js","sourceRoot":"","sources":["../../../../src/instructions/staking/createStakeAccount.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,kBAAkB,EAClB,sBAAsB,GACvB,MAAM,iBAAiB,CAAC;AACzB,OAAO,KAAK,YAAY,MAAM,uBAAuB,CAAC;AACtD,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAC/C,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAC;AACjE,OAAO,EAAE,mBAAmB,EAAE,MAAM,eAAe,CAAC;AAEpD,yCAAyC;AACzC,EAAE;AACF,mDAAmD;AACnD,0BAA0B;AAC1B,iCAAiC;AACjC,yBAAyB;AAEzB,MAAM,UAAU,6BAA6B,CAC3C,kBAA6B,EAAE,IAAI;AACnC,iBAA4B,EAAE,IAAI;AAClC,uBAAkC,EAAE,IAAI;AACxC,mBAA8B,YAAY;IAE1C,MAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IACzE,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC3C,UAAU,CAAC,MAAM,CACf,EAAE,WAAW,EAAE,mBAAmB,CAAC,kBAAkB,EAAE,EACvD,IAAI,CACL,CAAC;IAEF,MAAM,IAAI,GAAG;QACX,SAAS,CAAC,kBAAkB,EAAE,UAAU,CAAC,KAAK,CAAC;QAC/C,SAAS,CAAC,iBAAiB,EAAE,UAAU,CAAC,IAAI,CAAC;QAC7C,SAAS,CAAC,uBAAuB,EAAE,UAAU,CAAC,IAAI,CAAC;QACnD,SAAS,CAAC,kBAAkB,EAAE,UAAU,CAAC,IAAI,CAAC;KAC/C,CAAC;IAEF,OAAO,IAAI,sBAAsB,CAAC;QAChC,IAAI;QACJ,SAAS,EAAE,gBAAgB;QAC3B,IAAI;KACL,CAAC,CAAC;AACL,CAAC","sourcesContent":["import {\n  PublicKey,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport { PORT_STAKING } from \"../../constants\";\nimport { AccessType, getAccess } from \"../../utils/Instructions\";\nimport { StakingInstructions } from \"./instruction\";\n\n// Accounts expected by this instruction:\n//\n//   0. `[writable]` Stake account - uninitialized.\n//   1. `[]` Staking Pool.\n//   2. `[]` Stake account owner.\n//   3. `[]` Rent sysvar.\n\nexport function createStakeAccountInstruction(\n  stakeAccountPubkey: PublicKey, // 0\n  stakingPoolPubkey: PublicKey, // 1\n  stakeAccountOwnerPubkey: PublicKey, // 2\n  stakingProgramId: PublicKey = PORT_STAKING\n): TransactionInstruction {\n  const dataLayout = BufferLayout.struct([BufferLayout.u8(\"instruction\")]);\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    { instruction: StakingInstructions.CreateStakeAccount },\n    data\n  );\n\n  const keys = [\n    getAccess(stakeAccountPubkey, AccessType.WRITE),\n    getAccess(stakingPoolPubkey, AccessType.READ),\n    getAccess(stakeAccountOwnerPubkey, AccessType.READ),\n    getAccess(SYSVAR_RENT_PUBKEY, AccessType.READ),\n  ];\n\n  return new TransactionInstruction({\n    keys,\n    programId: stakingProgramId,\n    data,\n  });\n}\n"]}