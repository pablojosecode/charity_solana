{"version":3,"file":"initStakingPool.js","sourceRoot":"","sources":["../../../../src/instructions/staking/initStakingPool.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,mBAAmB,CAAC;AACrD,OAAO,EAEL,kBAAkB,EAClB,sBAAsB,GACvB,MAAM,iBAAiB,CAAC;AACzB,OAAO,KAAK,YAAY,MAAM,uBAAuB,CAAC;AACtD,OAAO,EAAE,MAAM,OAAO,CAAC;AAEvB,OAAO,KAAK,MAAM,MAAM,4BAA4B,CAAC;AACrD,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAC/C,OAAO,EAAE,mBAAmB,EAAE,MAAM,eAAe,CAAC;AACpD,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAC;AAEjE,mBAAmB;AACnB,yBAAyB;AACzB,oBAAoB;AACpB,sBAAsB;AACtB,gCAAgC;AAChC,sBAAsB;AACtB,mCAAmC;AACnC,+BAA+B;AAC/B,IAAI;AAEJ,MAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC;IACrC,YAAY,CAAC,EAAE,CAAC,aAAa,CAAC;IAC9B,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;IACvB,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC;IACzB,MAAM,CAAC,MAAM,CAAC,oBAAoB,CAAC;IACnC,YAAY,CAAC,EAAE,CAAC,UAAU,CAAC;IAC3B,MAAM,CAAC,SAAS,CAAC,oBAAoB,CAAC;IACtC,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC;CACnC,CAAC,CAAC;AAEH,yCAAyC;AACzC,mDAAmD;AACnD,yCAAyC;AACzC,uDAAuD;AACvD,kDAAkD;AAClD,+BAA+B;AAC/B,iEAAiE;AACjE,0BAA0B;AAC1B,2BAA2B;AAC3B,MAAM,CAAC,MAAM,0BAA0B,GAAG,CACxC,MAAmB,EACnB,QAAqB,EACrB,kBAA+B,EAC/B,QAAgB,EAChB,oBAA+B,EAC/B,iBAA4B,EAC5B,eAA0B,EAC1B,WAAsB,EACtB,eAA0B,EAC1B,qBAAgC,EAChC,kBAA6B,EAC7B,cAAyB,EACzB,mBAA8B,YAAY,EAClB,EAAE;IAC1B,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC3C,UAAU,CAAC,MAAM,CACf;QACE,WAAW,EAAE,mBAAmB,CAAC,eAAe;QAChD,MAAM,EAAE,IAAI,EAAE,CAAC,MAAM,CAAC;QACtB,QAAQ,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC;QAC1B,kBAAkB,EAAE,IAAI,EAAE,CAAC,kBAAkB,CAAC;QAC9C,QAAQ;QACR,kBAAkB;QAClB,cAAc;KACf,EACD,IAAI,CACL,CAAC;IAEF,MAAM,IAAI,GAAG;QACX,SAAS;QACT,SAAS,CAAC,oBAAoB,EAAE,UAAU,CAAC,MAAM,CAAC;QAClD,iBAAiB;QACjB,SAAS,CAAC,iBAAiB,EAAE,UAAU,CAAC,KAAK,CAAC;QAC9C,SAAS,CAAC,eAAe,EAAE,UAAU,CAAC,KAAK,CAAC;QAC5C,SAAS,CAAC,WAAW,EAAE,UAAU,CAAC,KAAK,CAAC;QACxC,gBAAgB;QAChB,SAAS,CAAC,eAAe,EAAE,UAAU,CAAC,IAAI,CAAC;QAC3C,SAAS,CAAC,qBAAqB,EAAE,UAAU,CAAC,IAAI,CAAC;QACjD,SAAS,CAAC,kBAAkB,EAAE,UAAU,CAAC,IAAI,CAAC;QAC9C,SAAS,CAAC,gBAAgB,EAAE,UAAU,CAAC,IAAI,CAAC;KAC7C,CAAC;IAEF,OAAO,IAAI,sBAAsB,CAAC;QAChC,IAAI;QACJ,SAAS,EAAE,gBAAgB;QAC3B,IAAI;KACL,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  PublicKey,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport BN from \"bn.js\";\n\nimport * as Layout from \"../../serialization/layout\";\nimport { PORT_STAKING } from \"../../constants\";\nimport { StakingInstructions } from \"./instruction\";\nimport { AccessType, getAccess } from \"../../utils/Instructions\";\n\n// interface Data {\n//   instruction: number;\n//   supply: number;\n//   duration: number;\n//   earliestRewardTime: number;\n//   bumpSeed: number;\n//   poolOwnerAuthority: PublicKey;\n//   adminAuthority: PublicKey;\n// }\n\nconst DataLayout = BufferLayout.struct([\n  BufferLayout.u8(\"instruction\"),\n  Layout.uint64(\"supply\"),\n  Layout.uint64(\"duration\"),\n  Layout.uint64(\"earliestRewardTime\"),\n  BufferLayout.u8(\"bumpSeed\"),\n  Layout.publicKey(\"poolOwnerAuthority\"),\n  Layout.publicKey(\"adminAuthority\"),\n]);\n\n// Accounts expected by this instruction:\n//   0. `[signer]` Transfer reward token authority.\n//   1. `[writable]` Reward token supply.\n//   2. `[writable]` Reward token pool - uninitialized.\n//   3. `[writable]` Staking pool - uninitialized.\n//   4. `[]` Reward token mint.\n//   5. `[]` Staking program derived that owns reward token pool.\n//   6. `[]` Rent sysvar .\n//   7. `[]` Token program.\nexport const initStakingPoolInstruction = (\n  supply: number | BN,\n  duration: number | BN,\n  earliestRewardTime: number | BN,\n  bumpSeed: number,\n  transferRewardSupply: PublicKey,\n  rewardTokenSupply: PublicKey,\n  rewardTokenPool: PublicKey,\n  stakingPool: PublicKey,\n  rewardTokenMint: PublicKey,\n  derivedStakingProgram: PublicKey,\n  poolOwnerAuthority: PublicKey,\n  adminAuthority: PublicKey,\n  stakingProgramId: PublicKey = PORT_STAKING\n): TransactionInstruction => {\n  const data = Buffer.alloc(DataLayout.span);\n  DataLayout.encode(\n    {\n      instruction: StakingInstructions.InitStakingPool,\n      supply: new BN(supply),\n      duration: new BN(duration),\n      earliestRewardTime: new BN(earliestRewardTime),\n      bumpSeed,\n      poolOwnerAuthority,\n      adminAuthority,\n    },\n    data\n  );\n\n  const keys = [\n    // signer\n    getAccess(transferRewardSupply, AccessType.SIGNER),\n    // write accounts\n    getAccess(rewardTokenSupply, AccessType.WRITE),\n    getAccess(rewardTokenPool, AccessType.WRITE),\n    getAccess(stakingPool, AccessType.WRITE),\n    // read accounts\n    getAccess(rewardTokenMint, AccessType.READ),\n    getAccess(derivedStakingProgram, AccessType.READ),\n    getAccess(SYSVAR_RENT_PUBKEY, AccessType.READ),\n    getAccess(TOKEN_PROGRAM_ID, AccessType.READ),\n  ];\n\n  return new TransactionInstruction({\n    keys,\n    programId: stakingProgramId,\n    data,\n  });\n};\n"]}