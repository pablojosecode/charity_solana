{"version":3,"file":"borrowObligationLiquidity.js","sourceRoot":"","sources":["../../../../src/instructions/lending/borrowObligationLiquidity.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,mBAAmB,EACnB,sBAAsB,GACvB,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,gBAAgB,EAAE,MAAM,mBAAmB,CAAC;AACrD,OAAO,KAAK,YAAY,MAAM,uBAAuB,CAAC;AACtD,OAAO,KAAK,MAAM,MAAM,4BAA4B,CAAC;AACrD,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAC;AACtD,OAAO,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAC;AACrD,OAAO,EAAE,kBAAkB,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,MAAM,OAAO,CAAC;AACvB,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAE/C,wFAAwF;AACxF,0BAA0B;AAC1B,EAAE;AACF,yCAAyC;AACzC,EAAE;AACF,8EAA8E;AAC9E,yDAAyD;AACzD,+DAA+D;AAC/D,wDAAwD;AACxD,mEAAmE;AACnE,wEAAwE;AACxE,oDAAoD;AACpD,oCAAoC;AACpC,8CAA8C;AAC9C,oCAAoC;AACpC,0BAA0B;AAC1B,8BAA8B;AAC9B,MAAM,CAAC,MAAM,oCAAoC,GAAG,CAClD,eAA4B,EAC5B,kBAA6B,EAAE,IAAI;AACnC,kBAA6B,EAAE,IAAI;AACnC,mBAA8B,EAAE,IAAI;AACpC,8BAAyC,EAAE,IAAI;AAC/C,gBAA2B,EAAE,IAAI;AACjC,mBAA8B,EAAE,IAAI;AACpC,qBAAgC,EAAE,IAAI;AACtC,eAA0B,EAAE,IAAI;AAChC,mBAA8B,YAAY,EAClB,EAAE;IAC1B,MAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC;QACrC,YAAY,CAAC,EAAE,CAAC,aAAa,CAAC;QAC9B,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC;KACjC,CAAC,CAAC;IACH,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC3C,UAAU,CAAC,MAAM,CACf;QACE,WAAW,EAAE,kBAAkB,CAAC,yBAAyB;QACzD,eAAe,EAAE,IAAI,EAAE,CAAC,eAAe,CAAC;KACzC,EACD,IAAI,CACL,CAAC;IAEF,MAAM,IAAI,GAAG;QACX,SAAS,CAAC,kBAAkB,EAAE,UAAU,CAAC,KAAK,CAAC;QAC/C,SAAS,CAAC,kBAAkB,EAAE,UAAU,CAAC,KAAK,CAAC;QAC/C,SAAS,CAAC,mBAAmB,EAAE,UAAU,CAAC,KAAK,CAAC;QAChD,SAAS,CAAC,8BAA8B,EAAE,UAAU,CAAC,KAAK,CAAC;QAC3D,SAAS,CAAC,gBAAgB,EAAE,UAAU,CAAC,KAAK,CAAC;QAC7C,SAAS,CAAC,mBAAmB,EAAE,UAAU,CAAC,IAAI,CAAC;QAC/C,SAAS,CAAC,qBAAqB,EAAE,UAAU,CAAC,IAAI,CAAC;QACjD,SAAS,CAAC,eAAe,EAAE,UAAU,CAAC,MAAM,CAAC;QAC7C,SAAS,CAAC,mBAAmB,EAAE,UAAU,CAAC,IAAI,CAAC;QAC/C,SAAS,CAAC,gBAAgB,EAAE,UAAU,CAAC,IAAI,CAAC;KAC7C,CAAC;IAEF,OAAO,IAAI,sBAAsB,CAAC;QAChC,IAAI;QACJ,SAAS,EAAE,gBAAgB;QAC3B,IAAI;KACL,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import {\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport * as Layout from \"../../serialization/layout\";\nimport { AccessType } from \"../../utils/Instructions\";\nimport { getAccess } from \"../../utils/Instructions\";\nimport { LendingInstruction } from \"./instruction\";\nimport BN from \"bn.js\";\nimport { PORT_LENDING } from \"../../constants\";\n\n// Borrow liquidity from a reserve by depositing collateral tokens. Requires a refreshed\n// obligation and reserve.\n//\n// Accounts expected by this instruction:\n//\n//   0. `[writable]` Source borrow reserve liquidity supply SPL Token account.\n//   1. `[writable]` Destination liquidity token account.\n//                     Minted by borrow reserve liquidity mint.\n//   2. `[writable]` Borrow reserve account - refreshed.\n//   3. `[writable]` Borrow reserve liquidity fee receiver account.\n//                     Must be the fee account specified at InitReserve.\n//   4. `[writable]` Obligation account - refreshed.\n//   5. `[]` Lending market account.\n//   6. `[]` Derived lending market authority.\n//   7. `[signer]` Obligation owner.\n//   8. `[]` Clock sysvar.\n//   9. `[]` Token program id.\nexport const borrowObligationLiquidityInstruction = (\n  liquidityAmount: number | BN,\n  srcLiquidityPubkey: PublicKey, // 0\n  dstLiquidityPubkey: PublicKey, // 1\n  borrowReservePubkey: PublicKey, // 2\n  borrowReserveFeeReceiverPubkey: PublicKey, // 3\n  obligationPubkey: PublicKey, // 4\n  lendingMarketPubkey: PublicKey, // 5\n  marketAuthorityPubkey: PublicKey, // 6\n  obligationOwner: PublicKey, // 7\n  lendingProgramId: PublicKey = PORT_LENDING\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    Layout.uint64(\"liquidityAmount\"),\n  ]);\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: LendingInstruction.BorrowObligationLiquidity,\n      liquidityAmount: new BN(liquidityAmount),\n    },\n    data\n  );\n\n  const keys = [\n    getAccess(srcLiquidityPubkey, AccessType.WRITE),\n    getAccess(dstLiquidityPubkey, AccessType.WRITE),\n    getAccess(borrowReservePubkey, AccessType.WRITE),\n    getAccess(borrowReserveFeeReceiverPubkey, AccessType.WRITE),\n    getAccess(obligationPubkey, AccessType.WRITE),\n    getAccess(lendingMarketPubkey, AccessType.READ),\n    getAccess(marketAuthorityPubkey, AccessType.READ),\n    getAccess(obligationOwner, AccessType.SIGNER),\n    getAccess(SYSVAR_CLOCK_PUBKEY, AccessType.READ),\n    getAccess(TOKEN_PROGRAM_ID, AccessType.READ),\n  ];\n\n  return new TransactionInstruction({\n    keys,\n    programId: lendingProgramId,\n    data,\n  });\n};\n"]}