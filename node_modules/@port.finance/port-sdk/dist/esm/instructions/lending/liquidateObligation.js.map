{"version":3,"file":"liquidateObligation.js","sourceRoot":"","sources":["../../../../src/instructions/lending/liquidateObligation.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport * as Layout from \"../../serialization/layout\";\nimport BN from \"bn.js\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { LendingInstruction } from \"./instruction\";\nimport { PORT_LENDING, PORT_STAKING } from \"../../constants\";\n\n// Repay borrowed liquidity to a reserve to receive collateral at a discount from an unhealthy\n// obligation. Requires a refreshed obligation and reserves.\n//\n// Accounts expected by this instruction:\n//\n//   0. `[writable]` Source liquidity token account.\n//                     Minted by repay reserve liquidity mint.\n//                     $authority can transfer $liquidity_amount.\n//   1. `[writable]` Destination collateral token account.\n//                     Minted by withdraw reserve collateral mint.\n//   2. `[writable]` Repay reserve account - refreshed.\n//   3. `[writable]` Repay reserve liquidity supply SPL Token account.\n//   4. `[]` Withdraw reserve account - refreshed.\n//   5. `[writable]` Withdraw reserve collateral supply SPL Token account.\n//   6. `[writable]` Obligation account - refreshed.\n//   7. `[]` Lending market account.\n//   8. `[]` Derived lending market authority.\n//   9. `[signer]` User transfer authority ($authority).\n//   10 `[]` Clock sysvar.\n//   11 `[]` Token program id.\nexport const liquidateObligationInstruction = (\n  liquidityAmount: number | BN,\n  sourceLiquidity: PublicKey,\n  destinationCollateral: PublicKey,\n  repayReserve: PublicKey,\n  repayReserveLiquiditySupply: PublicKey,\n  withdrawReserve: PublicKey,\n  withdrawReserveCollateralSupply: PublicKey,\n  obligation: PublicKey,\n  lendingMarket: PublicKey,\n  lendingMarketAuthority: PublicKey,\n  transferAuthority: PublicKey,\n  lendingProgramId: PublicKey = PORT_LENDING,\n  stakingPool?: PublicKey,\n  stakeAccount?: PublicKey,\n  stakingProgramId: PublicKey = PORT_STAKING\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    Layout.uint64(\"liquidityAmount\"),\n  ]);\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: LendingInstruction.LiquidateObligation,\n      liquidityAmount: new BN(liquidityAmount),\n    },\n    data\n  );\n\n  let keys = [\n    { pubkey: sourceLiquidity, isSigner: false, isWritable: true },\n    { pubkey: destinationCollateral, isSigner: false, isWritable: true },\n    { pubkey: repayReserve, isSigner: false, isWritable: true },\n    { pubkey: repayReserveLiquiditySupply, isSigner: false, isWritable: true },\n    { pubkey: withdrawReserve, isSigner: false, isWritable: false },\n    {\n      pubkey: withdrawReserveCollateralSupply,\n      isSigner: false,\n      isWritable: true,\n    },\n    { pubkey: obligation, isSigner: false, isWritable: true },\n    { pubkey: lendingMarket, isSigner: false, isWritable: false },\n    { pubkey: lendingMarketAuthority, isSigner: false, isWritable: false },\n    { pubkey: transferAuthority, isSigner: true, isWritable: false },\n    { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n  if (stakingPool !== undefined && stakeAccount !== undefined) {\n    keys = keys.concat([\n      { pubkey: stakeAccount, isSigner: false, isWritable: true },\n      { pubkey: stakingPool, isSigner: false, isWritable: true },\n      { pubkey: stakingProgramId, isSigner: false, isWritable: false },\n    ]);\n  }\n\n  return new TransactionInstruction({\n    keys,\n    programId: lendingProgramId,\n    data,\n  });\n};\n"]}