{"version":3,"file":"redeemReserveCollateral.js","sourceRoot":"","sources":["../../../../src/instructions/lending/redeemReserveCollateral.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,mBAAmB,EACnB,sBAAsB,GACvB,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,MAAM,OAAO,CAAC;AACvB,OAAO,KAAK,YAAY,MAAM,uBAAuB,CAAC;AACtD,OAAO,KAAK,MAAM,MAAM,4BAA4B,CAAC;AACrD,OAAO,EAAE,gBAAgB,EAAE,MAAM,mBAAmB,CAAC;AACrD,OAAO,EAAE,kBAAkB,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAC/C,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAC;AAEjE,8DAA8D;AAC9D,EAAE;AACF,yCAAyC;AACzC,EAAE;AACF,qDAAqD;AACrD,kEAAkE;AAClE,yDAAyD;AACzD,qCAAqC;AACrC,uDAAuD;AACvD,gEAAgE;AAChE,oCAAoC;AACpC,8CAA8C;AAC9C,wDAAwD;AACxD,0BAA0B;AAC1B,8BAA8B;AAC9B,MAAM,CAAC,MAAM,kCAAkC,GAAG,CAChD,gBAA6B,EAC7B,gBAA2B,EAC3B,oBAA+B,EAC/B,OAAkB,EAClB,qBAAgC,EAChC,sBAAiC,EACjC,aAAwB,EACxB,sBAAiC,EACjC,iBAA4B,EAC5B,mBAA8B,YAAY,EAClB,EAAE;IAC1B,MAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC;QACrC,YAAY,CAAC,EAAE,CAAC,aAAa,CAAC;QAC9B,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC;KAClC,CAAC,CAAC;IAEH,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC3C,UAAU,CAAC,MAAM,CACf;QACE,WAAW,EAAE,kBAAkB,CAAC,uBAAuB;QACvD,gBAAgB,EAAE,IAAI,EAAE,CAAC,gBAAgB,CAAC;KAC3C,EACD,IAAI,CACL,CAAC;IAEF,MAAM,IAAI,GAAG;QACX,SAAS,CAAC,gBAAgB,EAAE,UAAU,CAAC,KAAK,CAAC;QAC7C,SAAS,CAAC,oBAAoB,EAAE,UAAU,CAAC,KAAK,CAAC;QACjD,SAAS,CAAC,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC;QACpC,SAAS,CAAC,qBAAqB,EAAE,UAAU,CAAC,KAAK,CAAC;QAClD,SAAS,CAAC,sBAAsB,EAAE,UAAU,CAAC,KAAK,CAAC;QACnD,SAAS,CAAC,aAAa,EAAE,UAAU,CAAC,IAAI,CAAC;QACzC,SAAS,CAAC,sBAAsB,EAAE,UAAU,CAAC,IAAI,CAAC;QAClD,SAAS,CAAC,iBAAiB,EAAE,UAAU,CAAC,MAAM,CAAC;QAC/C,SAAS,CAAC,mBAAmB,EAAE,UAAU,CAAC,IAAI,CAAC;QAC/C,SAAS,CAAC,gBAAgB,EAAE,UAAU,CAAC,IAAI,CAAC;KAC7C,CAAC;IAEF,OAAO,IAAI,sBAAsB,CAAC;QAChC,IAAI;QACJ,SAAS,EAAE,gBAAgB;QAC3B,IAAI;KACL,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import {\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport * as Layout from \"../../serialization/layout\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { LendingInstruction } from \"./instruction\";\nimport { PORT_LENDING } from \"../../constants\";\nimport { AccessType, getAccess } from \"../../utils/Instructions\";\n\n// Redeem collateral from a reserve in exchange for liquidity.\n//\n// Accounts expected by this instruction:\n//\n//   0. `[writable]` Source collateral token account.\n//                     $authority can transfer $collateral_amount.\n//   1. `[writable]` Destination liquidity token account.\n//   2. `[writable]` Reserve account.\n//   3. `[writable]` Reserve collateral SPL Token mint.\n//   4. `[writable]` Reserve liquidity supply SPL Token account.\n//   5. `[]` Lending market account.\n//   6. `[]` Derived lending market authority.\n//   7. `[signer]` User transfer authority ($authority).\n//   8. `[]` Clock sysvar.\n//   9. `[]` Token program id.\nexport const redeemReserveCollateralInstruction = (\n  collateralAmount: number | BN,\n  sourceCollateral: PublicKey,\n  destinationLiquidity: PublicKey,\n  reserve: PublicKey,\n  reserveCollateralMint: PublicKey,\n  reserveLiquiditySupply: PublicKey,\n  lendingMarket: PublicKey,\n  lendingMarketAuthority: PublicKey,\n  transferAuthority: PublicKey,\n  lendingProgramId: PublicKey = PORT_LENDING\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    Layout.uint64(\"collateralAmount\"),\n  ]);\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: LendingInstruction.RedeemReserveCollateral,\n      collateralAmount: new BN(collateralAmount),\n    },\n    data\n  );\n\n  const keys = [\n    getAccess(sourceCollateral, AccessType.WRITE),\n    getAccess(destinationLiquidity, AccessType.WRITE),\n    getAccess(reserve, AccessType.WRITE),\n    getAccess(reserveCollateralMint, AccessType.WRITE),\n    getAccess(reserveLiquiditySupply, AccessType.WRITE),\n    getAccess(lendingMarket, AccessType.READ),\n    getAccess(lendingMarketAuthority, AccessType.READ),\n    getAccess(transferAuthority, AccessType.SIGNER),\n    getAccess(SYSVAR_CLOCK_PUBKEY, AccessType.READ),\n    getAccess(TOKEN_PROGRAM_ID, AccessType.READ),\n  ];\n\n  return new TransactionInstruction({\n    keys,\n    programId: lendingProgramId,\n    data,\n  });\n};\n"]}