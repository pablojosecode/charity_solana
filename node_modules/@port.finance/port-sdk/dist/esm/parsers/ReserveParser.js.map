{"version":3,"file":"ReserveParser.js","sourceRoot":"","sources":["../../../src/parsers/ReserveParser.ts"],"names":[],"mappings":"AAAA,OAAO,EAAe,aAAa,EAAE,MAAM,wBAAwB,CAAC;AAIpE,MAAM,CAAC,MAAM,aAAa,GAAwB,CAAC,GAAe,EAAE,EAAE;IACpE,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;IAC1B,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC7C,MAAM,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM,CAAgB,CAAC;IAEzD,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE;QACjC,OAAO;KACR;IAED,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;AAC1B,CAAC,CAAC","sourcesContent":["import { ReserveData, ReserveLayout } from \"../structs/ReserveData\";\nimport { Parser } from \"./Parser\";\nimport { RawAccount } from \"./RawAccount\";\n\nexport const ReserveParser: Parser<ReserveData> = (raw: RawAccount) => {\n  const pubkey = raw.pubkey;\n  const buffer = Buffer.from(raw.account.data);\n  const data = ReserveLayout.decode(buffer) as ReserveData;\n\n  if (data.lastUpdate.slot.isZero()) {\n    return;\n  }\n\n  return { pubkey, data };\n};\n"]}