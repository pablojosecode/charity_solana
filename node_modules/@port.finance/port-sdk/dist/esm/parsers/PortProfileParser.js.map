{"version":3,"file":"PortProfileParser.js","sourceRoot":"","sources":["../../../src/parsers/PortProfileParser.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,0BAA0B,EAC1B,gBAAgB,EAChB,yBAAyB,GAK1B,MAAM,YAAY,CAAC;AACpB,OAAO,KAAK,YAAY,MAAM,uBAAuB,CAAC;AAEtD,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,MAAc,EAAmB,EAAE;IACnE,MAAM,EACJ,OAAO,EACP,UAAU,EACV,aAAa,EACb,KAAK,EACL,cAAc,EACd,aAAa,EACb,kBAAkB,EAClB,oBAAoB,EACpB,WAAW,EACX,UAAU,EACV,QAAQ,GACT,GAAG,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAoB,CAAC;IAEvD,MAAM,cAAc,GAAG,QAAQ,CAAC,KAAK,CACnC,CAAC,EACD,WAAW,GAAG,0BAA0B,CAAC,IAAI,CAC9C,CAAC;IACF,MAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAC/B,0BAA0B,EAC1B,WAAW,CACZ,CAAC,MAAM,CAAC,cAAc,CAAgC,CAAC;IAExD,MAAM,aAAa,GAAG,QAAQ,CAAC,KAAK,CAClC,cAAc,CAAC,MAAM,EACrB,cAAc,CAAC,MAAM,GAAG,UAAU,GAAG,yBAAyB,CAAC,IAAI,CACpE,CAAC;IACF,MAAM,OAAO,GAAG,YAAY,CAAC,GAAG,CAC9B,yBAAyB,EACzB,UAAU,CACX,CAAC,MAAM,CAAC,aAAa,CAA0B,CAAC;IAEjD,OAAO;QACL,OAAO;QACP,UAAU;QACV,aAAa;QACb,KAAK;QACL,cAAc;QACd,aAAa;QACb,kBAAkB;QAClB,oBAAoB;QACpB,QAAQ;QACR,OAAO;KACW,CAAC;AACvB,CAAC,CAAC","sourcesContent":["import {\n  ObligationCollateralLayout,\n  ObligationLayout,\n  ObligationLiquidityLayout,\n  PortProfileCollateralData,\n  PortProfileData,\n  PortProfileLoanData,\n  ProtoObligation,\n} from \"../structs\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\n\nexport const PortProfileParser = (buffer: Buffer): PortProfileData => {\n  const {\n    version,\n    lastUpdate,\n    lendingMarket,\n    owner,\n    depositedValue,\n    borrowedValue,\n    allowedBorrowValue,\n    unhealthyBorrowValue,\n    depositsLen,\n    borrowsLen,\n    dataFlat,\n  } = ObligationLayout.decode(buffer) as ProtoObligation;\n\n  const depositsBuffer = dataFlat.slice(\n    0,\n    depositsLen * ObligationCollateralLayout.span\n  );\n  const deposits = BufferLayout.seq(\n    ObligationCollateralLayout,\n    depositsLen\n  ).decode(depositsBuffer) as PortProfileCollateralData[];\n\n  const borrowsBuffer = dataFlat.slice(\n    depositsBuffer.length,\n    depositsBuffer.length + borrowsLen * ObligationLiquidityLayout.span\n  );\n  const borrows = BufferLayout.seq(\n    ObligationLiquidityLayout,\n    borrowsLen\n  ).decode(borrowsBuffer) as PortProfileLoanData[];\n\n  return {\n    version,\n    lastUpdate,\n    lendingMarket,\n    owner,\n    depositedValue,\n    borrowedValue,\n    allowedBorrowValue,\n    unhealthyBorrowValue,\n    deposits,\n    borrows,\n  } as PortProfileData;\n};\n"]}