{"version":3,"file":"BigType.js","sourceRoot":"","sources":["../../../src/serialization/BigType.ts"],"names":[],"mappings":"AAAA,OAAO,GAAG,MAAM,QAAQ,CAAC;AACzB,OAAO,KAAK,YAAY,MAAM,uBAAuB,CAAC;AACtD,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,MAAM,OAAO,OAAO;IAclB,YAAoB,KAAa,EAAE,UAAgB;QACjD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAEM,SAAS;QACd,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;YACpB,OAAO,YAAY,CAAC,EAAE,EAAE,CAAC;SAC1B;QACD,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;YACpB,OAAO,YAAY,CAAC,GAAG,EAAE,CAAC;SAC3B;QACD,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;YACpB,OAAO,YAAY,CAAC,GAAG,EAAE,CAAC;SAC3B;QACD,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;YACpB,OAAO,YAAY,CAAC,GAAG,EAAE,CAAC;SAC3B;QACD,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAEM,QAAQ;QACb,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAEM,aAAa;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;;AAxCuB,WAAG,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AAE3B,UAAE,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC;AACpB,WAAG,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC;AACrB,WAAG,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC;AACrB,WAAG,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC;AACrB,YAAI,GAAG,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC;AACvB,WAAG,GAAG,IAAI,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;AAClC,YAAI,GAAG,IAAI,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC","sourcesContent":["import Big from \"big.js\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport { UintField } from \"./UIntField\";\n\nexport class BigType {\n  private static readonly WAD = new Big(10).pow(18);\n\n  public static readonly U8 = new BigType(1);\n  public static readonly U16 = new BigType(2);\n  public static readonly U32 = new BigType(4);\n  public static readonly U64 = new BigType(8);\n  public static readonly U128 = new BigType(16);\n  public static readonly D64 = new BigType(8, BigType.WAD);\n  public static readonly D128 = new BigType(16, BigType.WAD);\n\n  private readonly bytes: number;\n  private readonly multiplier?: Big;\n\n  private constructor(bytes: number, multiplier?: Big) {\n    this.bytes = bytes;\n    this.multiplier = multiplier;\n  }\n\n  public getLayout(): BufferLayout.Layout {\n    if (this.bytes === 1) {\n      return BufferLayout.u8();\n    }\n    if (this.bytes === 2) {\n      return BufferLayout.u16();\n    }\n    if (this.bytes === 3) {\n      return BufferLayout.u24();\n    }\n    if (this.bytes === 4) {\n      return BufferLayout.u32();\n    }\n    return new UintField(this.bytes);\n  }\n\n  public getBytes(): number {\n    return this.bytes;\n  }\n\n  public getMultiplier(): Big | undefined {\n    return this.multiplier;\n  }\n}\n"]}