{"version":3,"file":"BigField.js","sourceRoot":"","sources":["../../../src/serialization/BigField.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAChC,OAAO,GAAG,MAAM,QAAQ,CAAC;AAGzB,MAAM,OAAO,QAAS,SAAQ,KAAU;IAGtC,YAAoB,IAAa,EAAE,QAAgB;QACjD,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,CAAC;QACjC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAEM,MAAM,CAAC,OAAO,CAAC,IAAa,EAAE,QAAgB;QACnD,OAAO,IAAI,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACtC,CAAC;IAEM,MAAM,CAAC,CAAa,EAAE,MAAe;QAC1C,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;QACnD,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;QACnC,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;QAC7C,IAAI,CAAC,UAAU,EAAE;YACf,OAAO,GAAG,CAAC;SACZ;QACD,OAAO,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC7B,CAAC;CACF","sourcesContent":["import { Field } from \"./Field\";\nimport Big from \"big.js\";\nimport { BigType } from \"./BigType\";\n\nexport class BigField extends Field<Big> {\n  private readonly type: BigType;\n\n  private constructor(type: BigType, property: string) {\n    super(type.getBytes(), property);\n    this.type = type;\n  }\n\n  public static forType(type: BigType, property: string): BigField {\n    return new BigField(type, property);\n  }\n\n  public decode(b: Uint8Array, offset?: number): Big {\n    const bn = this.type.getLayout().decode(b, offset);\n    const big = new Big(bn.toString());\n    const multiplier = this.type.getMultiplier();\n    if (!multiplier) {\n      return big;\n    }\n    return big.div(multiplier);\n  }\n}\n"]}