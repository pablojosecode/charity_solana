import { Keypair, AccountMeta, PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';
import { Addresses } from '../addresses';
import { UserInfo, TokenID } from '../types';
export declare class TransactionBuilder {
    addresses: Addresses;
    constructor(addresses: Addresses);
    mintKeyStrToPoolIdArray(mintKeyStr: string): number[];
    mintKeyStrToPoolId(mintKeyStr: string): number;
    refreshUser(userWalletKey: PublicKey): Promise<Transaction>;
    updateUserConfig(walletAccount: Keypair, assistMode: number, selfDeleverageFactor: number, postDeleverageFactor: number): Promise<Transaction>;
    addUserAndDeposit(pageId: number, walletAccount: Keypair, userSplKey: PublicKey, mintKeyStr: string, amount: number): Promise<Transaction>;
    deposit(walletAccount: Keypair, userSplKey: PublicKey, mintKeyStr: string, amount: number): Promise<Transaction>;
    withdrawAndRemoveUser(walletAccount: Keypair, userSplKey: PublicKey, mintKeyStr: string, withdrawAll: boolean, amount: number, userInfo: UserInfo): Promise<Transaction | null>;
    withdraw(walletAccount: Keypair, userSplKey: PublicKey, mintKeyStr: string, withdraw_all: boolean, amount: number): Promise<Transaction>;
    borrow(walletAccount: Keypair, userSplKey: PublicKey, mintKeyStr: string, amount: number): Promise<Transaction>;
    repay(walletAccount: Keypair, userSplKey: PublicKey, mintKeyStr: string, repay_all: boolean, amount: number): Promise<Transaction>;
    externalLiquidate(liquidatorWalletAccount: Keypair, liquidatedWalletKey: PublicKey, liquidatorCollateralSpl: PublicKey, liquidatorBorrowedSpl: PublicKey, collateralMintStr: string, borrowedMintStr: string, minCollateralAmount: number, repaidBorrowAmount: number): Promise<Transaction>;
    buildLpOpCheckIx(userWalletKey: PublicKey, leftMintStr: string, leftAmount: number, rightMintStr: string, rightAmount: number, lpMintStr: string, minLpAmount: number, targetSwap: number, isCreate: boolean, isSigned: boolean): Promise<TransactionInstruction>;
    buildLpOpEndcheckIx(_userWalletKey: PublicKey): Promise<TransactionInstruction>;
    marginLpCreate(walletAccount: Keypair, leftMintStr: string, leftAmount: number, rightMintStr: string, rightAmount: number, lpMintStr: string, min_lpAmount: number, targetSwap: number, swap_account_keys: AccountMeta[], stakeKeys: AccountMeta[]): Promise<Transaction>;
    buildMarginLpRedeemParam(leftMintStr: string, minLeftAmount: number, rightMintStr: string, min_rightAmount: number, lpMintStr: string, lpAmount: number, targetSwap: number): number[];
    marginLpRedeem(walletKey: PublicKey, leftMintStr: string, minLeftAmount: number, rightMintStr: string, min_rightAmount: number, lpMintStr: string, lpAmount: number, targetSwap: number, swap_account_keys: AccountMeta[], unstakeKeys: AccountMeta[], is_signed?: boolean): Promise<Transaction>;
    buildLpStakeIx(lpMintStr: string, targetSwap: number, stakeKeys: AccountMeta[]): Promise<TransactionInstruction>;
    buildLpStake2ndStepIxForOrca(lpMintStr: string, stakeTableKey: PublicKey, floatingLpSplKey: PublicKey, firstStakeKeys: AccountMeta[], secondStakeKeys: AccountMeta[]): Promise<TransactionInstruction>;
    buildLpStake2ndStepIxForRaydium(lpMintStr: string, stakeTableKey: PublicKey, stakeKeys: AccountMeta[]): Promise<TransactionInstruction>;
    buildLpUnstake2ndStepIxForOrca(unstakeIdentity: PublicKey, userWalletKey: PublicKey, lpMintStr: string, stakeTableKey: PublicKey, floatingLpSplKey: PublicKey, firstStakeKeys: AccountMeta[], secondStakeKeys: AccountMeta[], amount: number): Promise<TransactionInstruction>;
    buildLpUnstake2ndStepIxForRaydium(unstakeIdentity: PublicKey, userWalletKey: PublicKey, lpMintStr: string, stakeTableKey: PublicKey, stakeKeys: AccountMeta[], amount: number, leftMintStr: string, rightMintStr: string): Promise<TransactionInstruction>;
    buildLpUnstakeIx(lpMintStr: string, targetSwap: number, amount: number, stakeKeys: AccountMeta[]): Promise<TransactionInstruction>;
    simpleLpCreate(walletAccount: Keypair, lpTokenId: TokenID, leftAmount: number, rightAmount: number, minLpAmount: number): Promise<Transaction>;
    lpStake2nd(lpTokenId: TokenID): Promise<Transaction>;
    lpUnstake2nd(unstakeIdentity: PublicKey, walletKey: PublicKey, lpTokenId: TokenID, lpAmount: number): Promise<Transaction>;
    simpleLpRedeem(walletKey: PublicKey, lpTokenId: TokenID, minLeftAmount: number, minRightAmount: number, lpAmount: number, isSigned: boolean): Promise<Transaction>;
    buildMarginSwapParam(target_swap: number, is_buy: boolean, sell_mint_str: string, sell_amount: number, buy_mint_str: string, buy_amount: number, is_swap_all_deposit: boolean): number[];
    canSwap(sellTokenId: TokenID, buyTokenId: TokenID): boolean;
    marginSwap(userWalletKey: PublicKey, targetSwap: number, isBuy: boolean, sellMintStr: string, sellAmount: number, buyMintStr: string, buyAmount: number, swapKeys: AccountMeta[], isSigned: boolean, isSwapAllDeposit?: boolean): Promise<Transaction>;
    simpleSwap(userWalletKey: PublicKey, sellTokenId: TokenID, buyTokenId: TokenID, sellAmount: number, minBuyAmount: number, isSigned: boolean, isSwapAllDeposit?: boolean): Promise<Transaction>;
    makeLmRewardClaimable(userWallet: PublicKey): Promise<Transaction>;
    claimAPTLMReward(userWalletKey: PublicKey, userAptSpl: PublicKey): Promise<Transaction>;
}
