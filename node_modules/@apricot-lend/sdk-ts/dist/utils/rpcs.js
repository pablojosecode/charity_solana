"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRPCConnection = exports.rpcNodes = exports.RpcNode = void 0;
var web3_js_1 = require("@solana/web3.js");
var tiny_invariant_1 = __importDefault(require("tiny-invariant"));
var types_1 = require("../types");
var Logger_1 = require("./Logger");
var RpcNode = /** @class */ (function () {
    function RpcNode(rpc, url) {
        this.rpc = rpc;
        (0, tiny_invariant_1.default)(url && typeof url === 'string', "Invalid url " + url + " for RPC " + rpc);
        this.url = url;
        this._connection = null;
    }
    RpcNode.prototype.getConnection = function (commitmentOrConfig) {
        if (!this._connection) {
            var _config = { commitment: 'confirmed' };
            if (commitmentOrConfig && typeof commitmentOrConfig !== 'object') {
                _config.commitment = commitmentOrConfig;
            }
            else if (commitmentOrConfig) {
                Object.assign(_config, commitmentOrConfig);
            }
            this._connection = new web3_js_1.Connection(this.url, _config);
        }
        return this._connection;
    };
    return RpcNode;
}());
exports.RpcNode = RpcNode;
exports.rpcNodes = [
    [
        types_1.RPC.Triton,
        process.env.RPC_TRITON_URL || 'https://apricot-main-67cd.mainnet.rpcpool.com/',
    ],
    [types_1.RPC.Serum, 'https://solana-api.projectserum.com'],
    [types_1.RPC.GenesysGo, 'https://apricot.genesysgo.net'],
]
    .map(function (a) { return new RpcNode(a[0], a[1]); })
    .reduce(function (pre, cur) {
    pre[cur.rpc] = cur;
    return pre;
}, {});
// The connection here is intended to be used by the backend!
var getRPCConnection = function (rpcish, commitmentOrConfig) {
    (0, tiny_invariant_1.default)(typeof window === 'undefined', "This function shouldn't be called in a browser!");
    var node;
    if (rpcish) {
        for (var rpc in exports.rpcNodes) {
            if (rpc === rpcish || new RegExp(rpc, 'i').test(rpcish)) {
                node = exports.rpcNodes[rpc];
            }
        }
        (0, tiny_invariant_1.default)(node, "Can't get RPC connection per name: " + rpcish);
    }
    else {
        node = exports.rpcNodes.Serum;
    }
    (0, Logger_1.LogInfo)("RPC Node: " + node.rpc + ", " + node.url);
    return node.getConnection(commitmentOrConfig);
};
exports.getRPCConnection = getRPCConnection;
//# sourceMappingURL=rpcs.js.map