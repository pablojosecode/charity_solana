"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.currentPerPastRateToCurrentPerCurrentRate = exports.fastForwardAmount = exports.rewindAmount = exports.nativeRateToValueRate = exports.tokenRateToValueRate = exports.nativeAmountToValue = exports.tokenRateToNativeRate = exports.nativeRateToTokenRate = exports.tokenAmountToNativeAmount = exports.nativeAmountToTokenAmount = exports.flagsToBool = exports.epochToDate = void 0;
var decimal_js_1 = require("decimal.js");
var configs_1 = require("../constants/configs");
var tiny_invariant_1 = __importDefault(require("tiny-invariant"));
function epochToDate(time) {
    return new Date(time.toNumber() * 1000);
}
exports.epochToDate = epochToDate;
function flagsToBool(flags, targetFlag) {
    return Boolean(flags & targetFlag);
}
exports.flagsToBool = flagsToBool;
function nativeAmountToTokenAmount(tokenId, amount) {
    return amount.div(configs_1.DECIMAL_MULT[tokenId]);
}
exports.nativeAmountToTokenAmount = nativeAmountToTokenAmount;
function tokenAmountToNativeAmount(tokenId, amount) {
    return amount.mul(configs_1.DECIMAL_MULT[tokenId]);
}
exports.tokenAmountToNativeAmount = tokenAmountToNativeAmount;
function nativeRateToTokenRate(rate, nTokenId, dTokenId) {
    return nativeAmountToTokenAmount(nTokenId, rate).div(nativeAmountToTokenAmount(dTokenId, decimal_js_1.Decimal.abs(1)));
}
exports.nativeRateToTokenRate = nativeRateToTokenRate;
function tokenRateToNativeRate(rate, nTokenId, dTokenId) {
    return tokenAmountToNativeAmount(nTokenId, rate).div(tokenAmountToNativeAmount(dTokenId, decimal_js_1.Decimal.abs(1)));
}
exports.tokenRateToNativeRate = tokenRateToNativeRate;
function nativeAmountToValue(tokenId, amount, price) {
    return nativeAmountToTokenAmount(tokenId, amount).mul(price);
}
exports.nativeAmountToValue = nativeAmountToValue;
function tokenRateToValueRate(rate, nTokenPrice, dTokenPrice) {
    if (decimal_js_1.Decimal.abs(dTokenPrice).isZero()) {
        throw new Error("Token price to be divided can't be zero.");
    }
    return rate.mul(nTokenPrice).div(dTokenPrice);
}
exports.tokenRateToValueRate = tokenRateToValueRate;
function nativeRateToValueRate(rate, nTokenId, dTokenId, nTokenPrice, dTokenPrice) {
    return tokenRateToValueRate(nativeRateToTokenRate(rate, nTokenId, dTokenId), nTokenPrice, dTokenPrice);
}
exports.nativeRateToValueRate = nativeRateToValueRate;
function rewindAmount(amount, index) {
    (0, tiny_invariant_1.default)(index.greaterThanOrEqualTo(1), "Invalid index: " + index + ". Index must >= 1");
    return amount.div(index);
}
exports.rewindAmount = rewindAmount;
function fastForwardAmount(amount, index) {
    (0, tiny_invariant_1.default)(index.greaterThanOrEqualTo(1), "Invalid index: " + index + ". Index must >= 1");
    return amount.mul(index);
}
exports.fastForwardAmount = fastForwardAmount;
function currentPerPastRateToCurrentPerCurrentRate(rate, index) {
    return rate.div(fastForwardAmount(decimal_js_1.Decimal.abs(1), index));
}
exports.currentPerPastRateToCurrentPerCurrentRate = currentPerPastRateToCurrentPerCurrentRate;
//# sourceMappingURL=transform.js.map