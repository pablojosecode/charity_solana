import { Connection, Keypair, PublicKey } from '@solana/web3.js';
import { Addresses } from '../addresses';
import { AppConfig, TokenID } from '../types';
import { TransactionBuilder } from './TransactionBuilder';
export declare class ActionWrapper {
    connection: Connection;
    addresses: Addresses;
    builder: TransactionBuilder;
    config: AppConfig;
    constructor(connection: Connection, config?: AppConfig | undefined);
    getParsedAssetPool(mint: PublicKey): Promise<import("../types").AssetPool | null>;
    getParsedAssetPrice(mint: PublicKey): Promise<import("../types").AssetPrice | null>;
    getParsedUserInfo(wallet_key: PublicKey): Promise<import("../types").UserInfo | null>;
    getParsedUserPagesStats(): Promise<number[] | null>;
    getParsedUsersPage(page_id: number): Promise<PublicKey[] | null>;
    addUserAndDeposit(walletAccount: Keypair, userSplKey: PublicKey, mintKeyStr: string, amount: number): Promise<string>;
    deposit(walletAccount: Keypair, userSplKey: PublicKey, mintKeyStr: string, amount: number): Promise<string>;
    withdraw(walletAccount: Keypair, userSplKey: PublicKey, mintKeyStr: string, withdrawAll: boolean, amount: number): Promise<string>;
    borrow(walletAccount: Keypair, userSplKey: PublicKey, mintKeyStr: string, amount: number): Promise<string>;
    repay(walletAccount: Keypair, userSplKey: PublicKey, mintKeyStr: string, repayAll: boolean, amount: number): Promise<string>;
    lpCreate(walletAccount: Keypair, lpTokenId: TokenID, leftAmount: number, rightAmount: number, minLpAmount: number): Promise<string>;
    lpStake2ndStep(adminAccount: Keypair, lpTokenId: TokenID): Promise<string>;
    lpUnstake2ndStep(walletAccount: Keypair, lpTokenId: TokenID, lpAmount: number): Promise<string>;
    lpRedeem(walletAccount: Keypair, lpTokenId: TokenID, minLeftAmount: number, minRightAmount: number, lpAmount: number): Promise<string>;
    simpleSwap(userWalletAccount: Keypair, sellTokenId: TokenID, buyTokenId: TokenID, sellAmount: number, minBuyAmount: number, isSigned: boolean, isSwapAllDeposit?: boolean): Promise<string>;
    makeLmAptAvailable(walletAccount: Keypair): Promise<string>;
    claimAptLmReward(walletAccount: Keypair, userAptSpl: PublicKey): Promise<string>;
}
