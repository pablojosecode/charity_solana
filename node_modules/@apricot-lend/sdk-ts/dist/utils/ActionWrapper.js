"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionWrapper = void 0;
var tiny_invariant_1 = __importDefault(require("tiny-invariant"));
var addresses_1 = require("../addresses");
var AccountParser_1 = require("./AccountParser");
var TransactionBuilder_1 = require("./TransactionBuilder");
var constants_1 = require("../constants");
var ActionWrapper = /** @class */ (function () {
    function ActionWrapper(connection, config) {
        if (config === void 0) { config = undefined; }
        this.connection = connection;
        this.config = config || constants_1.PUBLIC_CONFIG;
        this.addresses = new addresses_1.Addresses(this.config);
        this.builder = new TransactionBuilder_1.TransactionBuilder(this.addresses);
    }
    ActionWrapper.prototype.getParsedAssetPool = function (mint) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, base_pda, _, poolAccountKey, response, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.addresses.getBasePda()];
                    case 1:
                        _a = _b.sent(), base_pda = _a[0], _ = _a[1];
                        return [4 /*yield*/, this.addresses.getAssetPoolKey(base_pda, mint.toString())];
                    case 2:
                        poolAccountKey = _b.sent();
                        return [4 /*yield*/, this.connection.getAccountInfo(poolAccountKey, 'confirmed')];
                    case 3:
                        response = _b.sent();
                        if (response === null) {
                            return [2 /*return*/, null];
                        }
                        data = new Uint8Array(response.data);
                        return [2 /*return*/, AccountParser_1.AccountParser.parseAssetPool(data)];
                }
            });
        });
    };
    ActionWrapper.prototype.getParsedAssetPrice = function (mint) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, price_pda, _, assetPriceKey, response;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.addresses.getPricePda()];
                    case 1:
                        _a = _b.sent(), price_pda = _a[0], _ = _a[1];
                        return [4 /*yield*/, this.addresses.getAssetPriceKey(price_pda, mint.toString())];
                    case 2:
                        assetPriceKey = _b.sent();
                        return [4 /*yield*/, this.connection.getAccountInfo(assetPriceKey, 'confirmed')];
                    case 3:
                        response = _b.sent();
                        if (response === null) {
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/, AccountParser_1.AccountParser.parseAssetPrice(new Uint8Array(response.data))];
                }
            });
        });
    };
    ActionWrapper.prototype.getParsedUserInfo = function (wallet_key) {
        return __awaiter(this, void 0, void 0, function () {
            var userInfoKey, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.addresses.getUserInfoKey(wallet_key)];
                    case 1:
                        userInfoKey = _a.sent();
                        return [4 /*yield*/, this.connection.getAccountInfo(userInfoKey, 'confirmed')];
                    case 2:
                        response = _a.sent();
                        if (response === null) {
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/, AccountParser_1.AccountParser.parseUserInfo(new Uint8Array(response.data))];
                }
            });
        });
    };
    // administrative methods:
    ActionWrapper.prototype.getParsedUserPagesStats = function () {
        return __awaiter(this, void 0, void 0, function () {
            var statsAccountKey, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.addresses.getUserPagesStatsKey()];
                    case 1:
                        statsAccountKey = _a.sent();
                        return [4 /*yield*/, this.connection.getAccountInfo(statsAccountKey, 'confirmed')];
                    case 2:
                        response = _a.sent();
                        if (response === null) {
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/, AccountParser_1.AccountParser.parseUserPagesStats(new Uint8Array(response.data))];
                }
            });
        });
    };
    ActionWrapper.prototype.getParsedUsersPage = function (page_id) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, base_pda, _, usersPageKey, response;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.addresses.getBasePda()];
                    case 1:
                        _a = _b.sent(), base_pda = _a[0], _ = _a[1];
                        return [4 /*yield*/, this.addresses.getUsersPageKey(base_pda, page_id)];
                    case 2:
                        usersPageKey = _b.sent();
                        return [4 /*yield*/, this.connection.getAccountInfo(usersPageKey, 'confirmed')];
                    case 3:
                        response = _b.sent();
                        if (response === null) {
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/, AccountParser_1.AccountParser.parseUsersPage(new Uint8Array(response.data))];
                }
            });
        });
    };
    // transaction sending
    ActionWrapper.prototype.addUserAndDeposit = function (walletAccount, userSplKey, mintKeyStr, amount) {
        return __awaiter(this, void 0, void 0, function () {
            var freeSlots, maxNumFree, pageId, tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getParsedUserPagesStats()];
                    case 1:
                        freeSlots = _a.sent();
                        (0, tiny_invariant_1.default)(freeSlots);
                        maxNumFree = 0;
                        pageId = -1;
                        freeSlots === null || freeSlots === void 0 ? void 0 : freeSlots.map(function (value, idx) {
                            if (value > maxNumFree) {
                                pageId = idx;
                                maxNumFree = value;
                            }
                        });
                        (0, tiny_invariant_1.default)(pageId >= 0, "No more free user slots available.");
                        return [4 /*yield*/, this.builder.addUserAndDeposit(pageId, walletAccount, userSplKey, mintKeyStr, amount)];
                    case 2:
                        tx = _a.sent();
                        return [2 /*return*/, this.connection.sendTransaction(tx, [walletAccount])];
                }
            });
        });
    };
    ActionWrapper.prototype.deposit = function (walletAccount, userSplKey, mintKeyStr, amount) {
        return __awaiter(this, void 0, void 0, function () {
            var tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.builder.deposit(walletAccount, userSplKey, mintKeyStr, amount)];
                    case 1:
                        tx = _a.sent();
                        return [2 /*return*/, this.connection.sendTransaction(tx, [walletAccount])];
                }
            });
        });
    };
    ActionWrapper.prototype.withdraw = function (walletAccount, userSplKey, mintKeyStr, withdrawAll, amount) {
        return __awaiter(this, void 0, void 0, function () {
            var tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.builder.withdraw(walletAccount, userSplKey, mintKeyStr, withdrawAll, amount)];
                    case 1:
                        tx = _a.sent();
                        return [2 /*return*/, this.connection.sendTransaction(tx, [walletAccount])];
                }
            });
        });
    };
    ActionWrapper.prototype.borrow = function (walletAccount, userSplKey, mintKeyStr, amount) {
        return __awaiter(this, void 0, void 0, function () {
            var tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.builder.borrow(walletAccount, userSplKey, mintKeyStr, amount)];
                    case 1:
                        tx = _a.sent();
                        return [2 /*return*/, this.connection.sendTransaction(tx, [walletAccount])];
                }
            });
        });
    };
    ActionWrapper.prototype.repay = function (walletAccount, userSplKey, mintKeyStr, repayAll, amount) {
        return __awaiter(this, void 0, void 0, function () {
            var tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.builder.repay(walletAccount, userSplKey, mintKeyStr, repayAll, amount)];
                    case 1:
                        tx = _a.sent();
                        return [2 /*return*/, this.connection.sendTransaction(tx, [walletAccount])];
                }
            });
        });
    };
    ActionWrapper.prototype.lpCreate = function (walletAccount, lpTokenId, leftAmount, rightAmount, minLpAmount) {
        return __awaiter(this, void 0, void 0, function () {
            var tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.builder.simpleLpCreate(walletAccount, lpTokenId, leftAmount, rightAmount, minLpAmount)];
                    case 1:
                        tx = _a.sent();
                        return [2 /*return*/, this.connection.sendTransaction(tx, [walletAccount])];
                }
            });
        });
    };
    ActionWrapper.prototype.lpStake2ndStep = function (adminAccount, lpTokenId) {
        return __awaiter(this, void 0, void 0, function () {
            var tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.builder.lpStake2nd(lpTokenId)];
                    case 1:
                        tx = _a.sent();
                        return [2 /*return*/, this.connection.sendTransaction(tx, [adminAccount], {
                                skipPreflight: false,
                            })];
                }
            });
        });
    };
    ActionWrapper.prototype.lpUnstake2ndStep = function (walletAccount, lpTokenId, lpAmount) {
        return __awaiter(this, void 0, void 0, function () {
            var tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.builder.lpUnstake2nd(walletAccount.publicKey, walletAccount.publicKey, lpTokenId, lpAmount)];
                    case 1:
                        tx = _a.sent();
                        return [2 /*return*/, this.connection.sendTransaction(tx, [walletAccount])];
                }
            });
        });
    };
    ActionWrapper.prototype.lpRedeem = function (walletAccount, lpTokenId, minLeftAmount, minRightAmount, lpAmount) {
        return __awaiter(this, void 0, void 0, function () {
            var tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.builder.simpleLpRedeem(walletAccount.publicKey, lpTokenId, minLeftAmount, minRightAmount, lpAmount, true)];
                    case 1:
                        tx = _a.sent();
                        return [2 /*return*/, this.connection.sendTransaction(tx, [walletAccount])];
                }
            });
        });
    };
    ActionWrapper.prototype.simpleSwap = function (userWalletAccount, sellTokenId, buyTokenId, sellAmount, minBuyAmount, isSigned, isSwapAllDeposit) {
        if (isSwapAllDeposit === void 0) { isSwapAllDeposit = false; }
        return __awaiter(this, void 0, void 0, function () {
            var tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.builder.simpleSwap(userWalletAccount.publicKey, sellTokenId, buyTokenId, sellAmount, minBuyAmount, isSigned, isSwapAllDeposit)];
                    case 1:
                        tx = _a.sent();
                        return [2 /*return*/, this.connection.sendTransaction(tx, [userWalletAccount])];
                }
            });
        });
    };
    ActionWrapper.prototype.makeLmAptAvailable = function (walletAccount) {
        return __awaiter(this, void 0, void 0, function () {
            var txn;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.builder.makeLmRewardClaimable(walletAccount.publicKey)];
                    case 1:
                        txn = _a.sent();
                        return [4 /*yield*/, this.connection.sendTransaction(txn, [walletAccount])];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ActionWrapper.prototype.claimAptLmReward = function (walletAccount, userAptSpl) {
        return __awaiter(this, void 0, void 0, function () {
            var txn;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.builder.claimAPTLMReward(walletAccount.publicKey, userAptSpl)];
                    case 1:
                        txn = _a.sent();
                        return [4 /*yield*/, this.connection.sendTransaction(txn, [walletAccount])];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ActionWrapper;
}());
exports.ActionWrapper = ActionWrapper;
//# sourceMappingURL=ActionWrapper.js.map