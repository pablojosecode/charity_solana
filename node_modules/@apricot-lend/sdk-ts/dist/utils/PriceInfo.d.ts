import { Connection } from '@solana/web3.js';
import { AppConfig, PoolConfig, TokenID } from '../types';
import CoinGecko from 'coingecko-api';
declare type RaydiumEntry = {
    lp_mint: string;
    lp_price: number;
    token_amount_coin: number;
    token_amount_pc: number;
    token_amount_lp: number;
};
export declare class PriceInfo {
    config: AppConfig;
    cachedRaydiumContent: RaydiumEntry[] | null;
    raydiumCacheTime: number;
    coinGecko: CoinGecko;
    constructor(config: AppConfig);
    fetchPrice(tokId: TokenID, connection: Connection, isForcePriceByChain?: boolean): Promise<number>;
    fetchViaSwitchboard(tokId: TokenID, connection: Connection): Promise<number>;
    fetchViaPyth(tokId: TokenID, connection: Connection): Promise<number>;
    checkRaydiumCache(requestTimeout?: number, retries?: number): Promise<RaydiumEntry[]>;
    getRaydiumLpPrice(poolConfig: PoolConfig, connection: Connection): Promise<number>;
    computeLpPriceOnChain(lpTokId: TokenID, poolConfig: PoolConfig, connection: Connection): Promise<number>;
    computeLpPrice(lpTokId: TokenID, poolConfig: PoolConfig, connection: Connection): Promise<number>;
    fetchLRStats(lpTokId: TokenID, connection: Connection, isValue: boolean): Promise<[number, number]>;
    fetchLRAmounts(lpTokId: TokenID, connection: Connection): Promise<[number, number]>;
    fetchLRValuets(lpTokId: TokenID, connection: Connection): Promise<[number, number]>;
    fetchLRLpAmounts(lpTokId: TokenID, connection: Connection): Promise<[number, number, number]>;
    getRaydiumAdditionalBalance(lpTokId: TokenID, connection: Connection): Promise<[number, number]>;
    fetchRaydiumPrice(tokenId: TokenID, timeout?: number, retries?: number): Promise<number>;
    fetchCoinGeckoPrice(tokenId: TokenID): Promise<number>;
}
export {};
