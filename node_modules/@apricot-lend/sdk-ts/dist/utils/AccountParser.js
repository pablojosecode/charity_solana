"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountParser = void 0;
var web3_js_1 = require("@solana/web3.js");
var decimal_js_1 = __importDefault(require("decimal.js"));
var constants_1 = require("../constants");
var AccountParser = /** @class */ (function () {
    function AccountParser() {
    }
    AccountParser.getOffsets = function (widths) {
        var offsets = [];
        var ends = [];
        var offset = 0;
        for (var _i = 0, widths_1 = widths; _i < widths_1.length; _i++) {
            var w = widths_1[_i];
            offsets.push(offset);
            offset += w;
            ends.push(offset);
        }
        return [offsets, ends];
    };
    AccountParser.parseString = function (buffer) {
        var decoded = new TextDecoder().decode(buffer);
        var len = decoded.indexOf('\u0000');
        return len === -1 ? decoded : decoded.substr(0, len);
    };
    AccountParser.parseUint16 = function (buffer, offset) {
        var view = new DataView(buffer);
        return view.getUint16(offset, true);
    };
    AccountParser.parseUint32 = function (buffer, offset) {
        var view = new DataView(buffer);
        return new decimal_js_1.default(view.getUint32(offset, true));
    };
    AccountParser.parseInt32 = function (buffer, offset) {
        var view = new DataView(buffer);
        return new decimal_js_1.default(view.getInt32(offset, true));
    };
    AccountParser.parseBigUint64 = function (buffer, offset) {
        var view = new DataView(buffer);
        var lower = new decimal_js_1.default(view.getUint32(offset, true));
        var higher = new decimal_js_1.default(view.getUint32(offset + 4, true));
        return higher.mul(new decimal_js_1.default(4294967296)).add(lower);
    };
    AccountParser.parseFloat64 = function (buffer, offset) {
        var view = new DataView(buffer);
        return new decimal_js_1.default(view.getFloat64(offset, true));
    };
    AccountParser.setUint8 = function (buffer, offset, value) {
        var view = new DataView(buffer);
        view.setUint8(offset, value);
    };
    AccountParser.setBigUint64 = function (buffer, offset, value) {
        value = new decimal_js_1.default(value);
        var view = new DataView(buffer);
        var high = value.divToInt(4294967296);
        var low = value.mod(4294967296);
        view.setUint32(offset, low.toNumber(), true);
        view.setUint32(offset + 4, high.toNumber(), true);
    };
    AccountParser.parseBigInt128 = function (buffer, offset) {
        var lower = AccountParser.parseBigUint64(buffer, offset);
        var higher = AccountParser.parseBigUint64(buffer, offset + 8);
        return higher.mul(new decimal_js_1.default('18446744073709551616')).add(lower);
    };
    AccountParser.setFloat64 = function (buffer, offset, value) {
        var view = new DataView(buffer);
        view.setFloat64(offset, value, true);
    };
    AccountParser.parsePoolList = function (poolListData) {
        var count = new DataView(poolListData.buffer).getUint16(0, true);
        var result = new Array(count);
        for (var i = 0; i < count; i++) {
            var offset = 8 + i * 32;
            var end = offset + 32;
            result[i] = new web3_js_1.PublicKey(new Uint8Array(poolListData.slice(offset, end)));
        }
        return result;
    };
    // prettier-ignore
    AccountParser.parseAssetPool = function (data) {
        var widths = [
            32,
            32, 8, 1,
            16, 8,
            16, 8,
            8, 16, 8, 8,
            8,
            32, 32, 32, 32,
            8, 8, 8, 1,
            8, 8, 8, 8, 8, 8,
            8, 8,
            8, 8, 8, 8, 8,
            8, 8,
            8, 1, 8,
        ];
        var _a = AccountParser.getOffsets(widths), offsets = _a[0], ends = _a[1];
        return {
            coin_name: AccountParser.parseString(data.slice(offsets[0], ends[0])),
            mint_key: new web3_js_1.PublicKey(data.slice(offsets[1], ends[1])),
            mint_decimal_mult: AccountParser.parseBigUint64(data.buffer, offsets[2]),
            pool_id: data[offsets[3]],
            deposit_amount: AccountParser.parseBigInt128(data.buffer, offsets[4]).div(new decimal_js_1.default(constants_1.AMOUNT_MULTIPLIER)),
            deposit_index: AccountParser.parseFloat64(data.buffer, offsets[5]),
            borrow_amount: AccountParser.parseBigInt128(data.buffer, offsets[6]).div(new decimal_js_1.default(constants_1.AMOUNT_MULTIPLIER)),
            borrow_index: AccountParser.parseFloat64(data.buffer, offsets[7]),
            reserve_factor: AccountParser.parseFloat64(data.buffer, offsets[8]),
            fee_amount: AccountParser.parseBigInt128(data.buffer, offsets[9]).div(new decimal_js_1.default(constants_1.AMOUNT_MULTIPLIER)),
            fee_withdrawn_amt: AccountParser.parseBigUint64(data.buffer, offsets[10]),
            fee_rate: AccountParser.parseFloat64(data.buffer, offsets[11]),
            last_update_time: AccountParser.parseBigUint64(data.buffer, offsets[12]),
            spl_key: new web3_js_1.PublicKey(data.slice(offsets[13], ends[13])),
            atoken_mint_key: new web3_js_1.PublicKey(data.slice(offsets[14], ends[14])),
            price_key: new web3_js_1.PublicKey(data.slice(offsets[15], ends[15])),
            pyth_price_key: new web3_js_1.PublicKey(data.slice(offsets[16], ends[16])),
            serum_next_cl_id: AccountParser.parseBigUint64(data.buffer, offsets[17]),
            ltv: AccountParser.parseFloat64(data.buffer, offsets[18]),
            safe_factor: AccountParser.parseFloat64(data.buffer, offsets[19]),
            flags: data[offsets[20]],
            base_rate: AccountParser.parseFloat64(data.buffer, offsets[21]),
            multiplier1: AccountParser.parseFloat64(data.buffer, offsets[22]),
            multiplier2: AccountParser.parseFloat64(data.buffer, offsets[23]),
            kink: AccountParser.parseFloat64(data.buffer, offsets[24]),
            borrow_rate: AccountParser.parseFloat64(data.buffer, offsets[25]),
            deposit_rate: AccountParser.parseFloat64(data.buffer, offsets[26]),
            reward_multiplier: AccountParser.parseFloat64(data.buffer, offsets[27]),
            reward_deposit_intra: AccountParser.parseFloat64(data.buffer, offsets[28]),
            reward_per_year: AccountParser.parseBigUint64(data.buffer, offsets[29]),
            reward_per_year_deposit: AccountParser.parseBigUint64(data.buffer, offsets[30]),
            reward_per_year_borrow: AccountParser.parseBigUint64(data.buffer, offsets[31]),
            reward_per_year_per_d: AccountParser.parseFloat64(data.buffer, offsets[32]),
            reward_per_year_per_b: AccountParser.parseFloat64(data.buffer, offsets[33]),
            reward_deposit_index: AccountParser.parseFloat64(data.buffer, offsets[34]),
            reward_borrow_index: AccountParser.parseFloat64(data.buffer, offsets[35]),
            deposit_cap: AccountParser.parseBigUint64(data.buffer, offsets[36]),
            is_disabled: data[offsets[37]] > 0,
            farm_yield: AccountParser.parseFloat64(data.buffer, offsets[38]),
        };
    };
    AccountParser.parseAssetPrice = function (data) {
        return {
            price_in_usd: AccountParser.parseBigUint64(data.buffer, 0),
        };
    };
    AccountParser.parsePriceSummaries = function (data) {
        var result = [];
        var count = 6;
        for (var i = 0; i < count; i++) {
            var offset = i * 8;
            result[i] = AccountParser.parseBigUint64(data.buffer, offset);
        }
        return result;
    };
    AccountParser.parseUserPagesStats = function (data) {
        var result = [];
        var view = new DataView(data.buffer);
        for (var offset = 0; offset < data.length; offset += 2) {
            result.push(view.getUint16(offset, true));
        }
        return result;
    };
    AccountParser.parseUsersPage = function (data) {
        var result = [];
        var count = data.length / 32;
        for (var i = 0; i < count; i++) {
            var offset = i * 32;
            var end = offset + 32;
            result[i] = new web3_js_1.PublicKey(new Uint8Array(data.slice(offset, end)));
        }
        return result;
    };
    // prettier-ignore
    AccountParser.parseUserInfo = function (data) {
        // page_id and num_assets
        var widths = [2, 1];
        var _a = AccountParser.getOffsets(widths), offsets = _a[0], ends = _a[1];
        var page_id = new DataView(data.buffer.slice(offsets[0], ends[0])).getUint16(0, true);
        var num_assets = data[offsets[1]];
        var user_asset_info = [];
        // UserAssetInfo
        var uai_base = ends[1];
        var uai_size = 1 + 1 + 16 + 8 + 8 + 8 + 8 + 16 + 8 + 8 + 8 + 8;
        for (var i = 0; i < num_assets; i++) {
            var uai_offset = uai_base + i * uai_size;
            user_asset_info.push(AccountParser.parseUserAssetInfo(data, uai_offset));
        }
        // reward
        var reward_vesting = [];
        var reward_base = uai_base + uai_size * 16;
        for (var i = 0; i < 4; i++) {
            var r_offset = reward_base + i * 8;
            reward_vesting.push(AccountParser.parseFloat64(data.buffer, r_offset));
        }
        var reward = {
            vesting: reward_vesting,
            prev_week_apt: AccountParser.parseFloat64(data.buffer, reward_base + 8 * 4),
            vesting_apt: AccountParser.parseFloat64(data.buffer, reward_base + 8 * 7),
            available_apt: AccountParser.parseFloat64(data.buffer, reward_base + 8 * 8),
            available_mnde: AccountParser.parseFloat64(data.buffer, reward_base + 8 * 9),
            available_ldo: AccountParser.parseFloat64(data.buffer, reward_base + 8 * 10),
            available_socn: AccountParser.parseFloat64(data.buffer, reward_base + 8 * 11),
            available_wluna: AccountParser.parseFloat64(data.buffer, reward_base + 8 * 12),
        };
        // pad
        var pad_base = reward_base + 8 * 13;
        // last_vest_cutoff_time
        var last_vest_cutoff_base = pad_base + 8;
        var last_vest_cutoff_time = AccountParser.parseBigUint64(data.buffer, last_vest_cutoff_base);
        // last_update_time
        var last_update_base = last_vest_cutoff_base + 8;
        var last_update_time = AccountParser.parseBigUint64(data.buffer, last_update_base);
        // assist
        var assist_base = last_update_base + 8;
        var assist = AccountParser.parseAssist(data, assist_base);
        return {
            page_id: page_id,
            num_assets: num_assets,
            reward: reward,
            last_vest_cutoff_time: last_vest_cutoff_time,
            last_update_time: last_update_time,
            user_asset_info: user_asset_info,
            assist: assist,
        };
    };
    // prettier-ignore
    AccountParser.parseUserAssetInfo = function (data, offset) {
        var widths = [1, 1, 16, 8, 8, 8, 8, 16, 8, 8, 8, 8];
        var offsets = AccountParser.getOffsets(widths)[0];
        return {
            pool_id: data[offset + offsets[0]],
            use_as_collateral: data[offset + offsets[1]],
            deposit_amount: AccountParser.parseBigInt128(data.buffer, offset + offsets[2]).div(new decimal_js_1.default(constants_1.AMOUNT_MULTIPLIER)),
            deposit_interests: AccountParser.parseBigUint64(data.buffer, offset + offsets[3]),
            deposit_index: AccountParser.parseFloat64(data.buffer, offset + offsets[4]),
            reward_deposit_amount: AccountParser.parseFloat64(data.buffer, offset + offsets[5]),
            reward_deposit_index: AccountParser.parseFloat64(data.buffer, offset + offsets[6]),
            borrow_amount: AccountParser.parseBigInt128(data.buffer, offset + offsets[7]).div(new decimal_js_1.default(constants_1.AMOUNT_MULTIPLIER)),
            borrow_interests: AccountParser.parseBigUint64(data.buffer, offset + offsets[8]),
            borrow_index: AccountParser.parseFloat64(data.buffer, offset + offsets[9]),
            reward_borrow_amount: AccountParser.parseFloat64(data.buffer, offset + offsets[10]),
            reward_borrow_index: AccountParser.parseFloat64(data.buffer, offset + offsets[11]),
        };
    };
    // prettier-ignore
    AccountParser.parseAssist = function (data, offset) {
        var sizePriceTrigAction = (10 + 30) * 8;
        var widths = [1, 8, 8, 8, 8, sizePriceTrigAction, 1, 1];
        var _a = AccountParser.getOffsets(widths), offsets = _a[0], ends = _a[1];
        return {
            assist_mode: data[offset + offsets[0]],
            self_deleverage_factor: AccountParser.parseFloat64(data.buffer, offset + offsets[1]).toNumber(),
            post_deleverage_factor: AccountParser.parseFloat64(data.buffer, offset + offsets[2]).toNumber(),
            sell_sequence: data.slice(offset + offsets[3], offset + ends[3]),
            buy_sequence: data.slice(offset + offsets[4], offset + ends[4]),
            // skip tprice triggered actions
            num_actions: data[offset + offsets[6]],
            num_executed: data[offset + offsets[7]],
        };
    };
    return AccountParser;
}());
exports.AccountParser = AccountParser;
//# sourceMappingURL=AccountParser.js.map