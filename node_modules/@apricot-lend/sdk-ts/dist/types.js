"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RPC = exports.AppConfig = exports.PoolConfig = exports.Dex = exports.PoolFlag = exports.TokenCategory = exports.TokenID = void 0;
var tiny_invariant_1 = __importDefault(require("tiny-invariant"));
var TokenID;
(function (TokenID) {
    TokenID["APT"] = "APT";
    TokenID["BTC"] = "BTC";
    TokenID["ETH"] = "ETH";
    TokenID["USDT"] = "USDT";
    TokenID["USDC"] = "USDC";
    TokenID["UST"] = "UST";
    TokenID["SOL"] = "SOL";
    TokenID["SBR"] = "SBR";
    TokenID["ORCA"] = "ORCA";
    TokenID["RAY"] = "RAY";
    TokenID["MERC"] = "MERC";
    TokenID["MNDE"] = "MNDE";
    TokenID["mSOL"] = "mSOL";
    TokenID["USTv2"] = "USTv2";
    TokenID["FTT"] = "FTT";
    TokenID["SRM"] = "SRM";
    TokenID["stSOL"] = "stSOL";
    TokenID["whETH"] = "whETH";
    TokenID["wLDO"] = "wLDO";
    TokenID["scnSOL"] = "scnSOL";
    TokenID["SOCN"] = "SOCN";
    TokenID["wLUNA"] = "wLUNA";
    TokenID["USDT_USDC_SABER"] = "USDT_USDC_SABER";
    TokenID["USTv2_USDC_SABER"] = "USTv2_USDC_SABER";
    TokenID["UST_USDC_SABER"] = "UST_USDC_SABER";
    TokenID["mSOL_SOL_SABER"] = "mSOL_SOL_SABER";
    TokenID["stSOL_SOL_SABER"] = "stSOL_SOL_SABER";
    TokenID["SOL_USDC_RAYDIUM"] = "SOL_USDC_RAYDIUM";
    TokenID["RAY_USDC_RAYDIUM"] = "RAY_USDC_RAYDIUM";
    TokenID["SOL_USDT_RAYDIUM"] = "SOL_USDT_RAYDIUM";
    TokenID["mSOL_SOL_RAYDIUM"] = "mSOL_SOL_RAYDIUM";
    TokenID["RAY_USDT_RAYDIUM"] = "RAY_USDT_RAYDIUM";
    TokenID["RAY_ETH_RAYDIUM"] = "RAY_ETH_RAYDIUM";
    TokenID["RAY_SOL_RAYDIUM"] = "RAY_SOL_RAYDIUM";
    TokenID["SRM_USDC_RAYDIUM"] = "SRM_USDC_RAYDIUM";
    TokenID["USDC_USDT_ORCA"] = "USDC_USDT_ORCA";
    TokenID["SOL_USDC_ORCA"] = "SOL_USDC_ORCA";
    TokenID["mSOL_SOL_ORCA"] = "mSOL_SOL_ORCA";
    TokenID["ORCA_USDC_ORCA"] = "ORCA_USDC_ORCA";
    TokenID["ORCA_SOL_ORCA"] = "ORCA_SOL_ORCA";
    TokenID["ETH_USDC_ORCA"] = "ETH_USDC_ORCA";
    TokenID["SOL_USDT_ORCA"] = "SOL_USDT_ORCA";
    TokenID["ETH_SOL_ORCA"] = "ETH_SOL_ORCA";
    TokenID["BTC_mSOL_ORCA"] = "BTC_mSOL_ORCA";
    TokenID["mSOL_USDC_ORCA"] = "mSOL_USDC_ORCA";
    TokenID["APT_USDC_ORCA"] = "APT_USDC_ORCA";
    TokenID["stSOL_USTv2_ORCA"] = "stSOL_USTv2_ORCA";
    TokenID["ORCA_whETH_ORCA"] = "ORCA_whETH_ORCA";
})(TokenID = exports.TokenID || (exports.TokenID = {}));
var TokenCategory;
(function (TokenCategory) {
    TokenCategory["Volatile"] = "volatile";
    TokenCategory["Stable"] = "stable";
    TokenCategory["Lp"] = "lp";
})(TokenCategory = exports.TokenCategory || (exports.TokenCategory = {}));
var PoolFlag;
(function (PoolFlag) {
    PoolFlag[PoolFlag["AllowBorrow"] = 1] = "AllowBorrow";
    PoolFlag[PoolFlag["IsLp"] = 2] = "IsLp";
    PoolFlag[PoolFlag["IsStable"] = 4] = "IsStable";
})(PoolFlag = exports.PoolFlag || (exports.PoolFlag = {}));
var Dex;
(function (Dex) {
    Dex[Dex["Serum"] = 0] = "Serum";
    Dex[Dex["Raydium"] = 1] = "Raydium";
    Dex[Dex["Saber"] = 2] = "Saber";
    Dex[Dex["Mercurial"] = 3] = "Mercurial";
    Dex[Dex["Orca"] = 4] = "Orca";
})(Dex = exports.Dex || (exports.Dex = {}));
var PoolConfig = /** @class */ (function () {
    function PoolConfig(tokenId, poolId, ltv, mint, liquidationDiscount, tokenCategory, lpLeftRightTokenId, lpLeftRightPoolId, lpDex, lpTargetSwap, lpSwapKeyInfo, lpNeedSndStake, interestRate, reserveRatio) {
        this.tokenId = tokenId;
        this.poolId = poolId;
        this.ltv = ltv;
        this.mint = mint;
        this.liquidationDiscount = liquidationDiscount;
        this.tokenCategory = tokenCategory;
        this.lpLeftRightTokenId = lpLeftRightTokenId;
        this.lpLeftRightPoolId = lpLeftRightPoolId;
        this.lpDex = lpDex;
        this.lpTargetSwap = lpTargetSwap;
        this.lpSwapKeyInfo = lpSwapKeyInfo;
        this.lpNeedSndStake = lpNeedSndStake;
        this.interestRate = interestRate;
        this.reserveRatio = reserveRatio;
        (0, tiny_invariant_1.default)(tokenId);
        (0, tiny_invariant_1.default)(poolId >= 0);
        (0, tiny_invariant_1.default)(ltv >= 0);
        (0, tiny_invariant_1.default)(mint);
        (0, tiny_invariant_1.default)(liquidationDiscount >= 0);
        (0, tiny_invariant_1.default)(reserveRatio >= 0);
        (0, tiny_invariant_1.default)(reserveRatio <= 0.2);
        if (tokenCategory === TokenCategory.Lp) {
            (0, tiny_invariant_1.default)(lpLeftRightTokenId !== null && lpLeftRightTokenId !== undefined);
            (0, tiny_invariant_1.default)(lpLeftRightPoolId !== null && lpLeftRightPoolId !== undefined);
            (0, tiny_invariant_1.default)(lpDex !== null && lpDex !== undefined);
            (0, tiny_invariant_1.default)(lpTargetSwap !== null && lpTargetSwap !== undefined);
            var lTokId = lpLeftRightTokenId[0], rTokId = lpLeftRightTokenId[1];
            var lPoolId = lpLeftRightPoolId[0], rPoolId = lpLeftRightPoolId[1];
            (0, tiny_invariant_1.default)(lTokId, tokenId + " missing lTokId");
            (0, tiny_invariant_1.default)(rTokId, tokenId + " missing rTokId");
            (0, tiny_invariant_1.default)(lPoolId >= 0, tokenId + " missing lPoolId");
            (0, tiny_invariant_1.default)(rPoolId >= 0, tokenId + " missing rPoolId");
            (0, tiny_invariant_1.default)(lpSwapKeyInfo, tokenId + " is missing lpSwapKeyInfo");
            (0, tiny_invariant_1.default)(lpNeedSndStake === true || lpNeedSndStake === false, tokenId + " missing lpNeedSndStake");
        }
        else {
            (0, tiny_invariant_1.default)(interestRate);
        }
    }
    PoolConfig.prototype.isStable = function () {
        return this.tokenCategory === TokenCategory.Stable;
    };
    PoolConfig.prototype.isLp = function () {
        return this.tokenCategory === TokenCategory.Lp;
    };
    PoolConfig.prototype.isVolatile = function () {
        return this.tokenCategory === TokenCategory.Volatile;
    };
    return PoolConfig;
}());
exports.PoolConfig = PoolConfig;
function getLpLRPoolIds(tokId, lpToLR, tokenIdToPoolId) {
    var _a = lpToLR[tokId], leftTokId = _a[0], rightTokId = _a[1];
    return [tokenIdToPoolId[leftTokId], tokenIdToPoolId[rightTokId]];
}
var AppConfig = /** @class */ (function () {
    function AppConfig(programPubkey, adminPubkey, farmerPubkey, assistKey, refresherKey, retroAptVault, lmAptVault, 
    // maps from TokenID to mint/decimalMult/poolId/ltv
    mints, decimalMults, categories, tokenIdToPoolId, discounts, ltvs, lpToLR, lpToDex, lpToTargetSwap, lpToNeedSndStake, switchboardPriceKeys, pythPriceKeys, interestRates, fees, lpSwapInfo, firebaseConfig) {
        this.programPubkey = programPubkey;
        this.adminPubkey = adminPubkey;
        this.farmerPubkey = farmerPubkey;
        this.assistKey = assistKey;
        this.refresherKey = refresherKey;
        this.retroAptVault = retroAptVault;
        this.lmAptVault = lmAptVault;
        this.mints = mints;
        this.decimalMults = decimalMults;
        this.categories = categories;
        this.tokenIdToPoolId = tokenIdToPoolId;
        this.discounts = discounts;
        this.ltvs = ltvs;
        this.lpToLR = lpToLR;
        this.lpToDex = lpToDex;
        this.lpToTargetSwap = lpToTargetSwap;
        this.lpToNeedSndStake = lpToNeedSndStake;
        this.switchboardPriceKeys = switchboardPriceKeys;
        this.pythPriceKeys = pythPriceKeys;
        this.interestRates = interestRates;
        this.fees = fees;
        this.lpSwapInfo = lpSwapInfo;
        this.firebaseConfig = firebaseConfig;
        this.mints = mints;
        this.tokenIdToPoolId = tokenIdToPoolId;
        var poolIds = Object.values(tokenIdToPoolId);
        var idSet = new Set(poolIds);
        (0, tiny_invariant_1.default)(poolIds.length === idSet.size, "poolIds length: " + poolIds.length + " != idSet.size: " + idSet.size);
        this.poolConfigs = {};
        for (var tokenId in tokenIdToPoolId) {
            var tokId = tokenId;
            this.poolConfigs[tokId] = new PoolConfig(tokId, tokenIdToPoolId[tokId], ltvs[tokId], mints[tokId], discounts[tokId], categories[tokId], categories[tokId] === TokenCategory.Lp ? lpToLR[tokId] : null, categories[tokId] === TokenCategory.Lp
                ? getLpLRPoolIds(tokId, lpToLR, tokenIdToPoolId)
                : null, categories[tokId] === TokenCategory.Lp ? lpToDex[tokId] : null, categories[tokId] === TokenCategory.Lp ? lpToTargetSwap[tokId] : null, lpSwapInfo[tokId], categories[tokId] === TokenCategory.Lp ? lpToNeedSndStake[tokId] : null, categories[tokId] === TokenCategory.Lp ? null : interestRates[tokId], fees[tokId]);
        }
    }
    AppConfig.prototype.mintKeyStrToPoolId = function (mint_key_str) {
        for (var _i = 0, _a = Object.entries(this.mints); _i < _a.length; _i++) {
            var _b = _a[_i], tokenType = _b[0], pubkey = _b[1];
            if (pubkey.toString() === mint_key_str) {
                var result = this.tokenIdToPoolId[tokenType];
                (0, tiny_invariant_1.default)(result !== undefined);
                return result;
            }
        }
        (0, tiny_invariant_1.default)(false);
    };
    AppConfig.prototype.getPoolIdList = function () {
        return Object.values(this.tokenIdToPoolId);
    };
    AppConfig.prototype.getTokenIdByPoolId = function (targetPoolId) {
        for (var _i = 0, _a = Object.entries(this.tokenIdToPoolId); _i < _a.length; _i++) {
            var _b = _a[_i], tokenId = _b[0], poolId = _b[1];
            if (poolId === targetPoolId)
                return tokenId;
        }
        throw new Error("poolId " + targetPoolId + " not valid");
    };
    AppConfig.prototype.getLtvByPoolId = function (poolId) {
        var tokenId = this.getTokenIdByPoolId(poolId);
        return this.ltvs[tokenId];
    };
    AppConfig.prototype.getDecimalMultByPoolId = function (poolId) {
        var tokenId = this.getTokenIdByPoolId(poolId);
        return this.decimalMults[tokenId];
    };
    AppConfig.prototype.getMintByPoolId = function (poolId) {
        var tokenId = this.getTokenIdByPoolId(poolId);
        return this.mints[tokenId];
    };
    AppConfig.prototype.getPoolConfigList = function () {
        return Object.values(this.poolConfigs);
    };
    AppConfig.prototype.getPoolConfigByPoolId = function (poolId) {
        var tokenId = this.getTokenIdByPoolId(poolId);
        return this.poolConfigs[tokenId];
    };
    return AppConfig;
}());
exports.AppConfig = AppConfig;
var RPC;
(function (RPC) {
    RPC["GenesysGo"] = "GenesysGo";
    RPC["Triton"] = "Triton";
    RPC["Serum"] = "Serum";
})(RPC = exports.RPC || (exports.RPC = {}));
//# sourceMappingURL=types.js.map