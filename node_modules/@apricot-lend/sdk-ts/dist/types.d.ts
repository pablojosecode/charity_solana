import { Decimal } from 'decimal.js';
import { AccountMeta, PublicKey } from '@solana/web3.js';
import { InterestRate } from './constants';
export declare enum TokenID {
    APT = "APT",
    BTC = "BTC",
    ETH = "ETH",
    USDT = "USDT",
    USDC = "USDC",
    UST = "UST",
    SOL = "SOL",
    SBR = "SBR",
    ORCA = "ORCA",
    RAY = "RAY",
    MERC = "MERC",
    MNDE = "MNDE",
    mSOL = "mSOL",
    USTv2 = "USTv2",
    FTT = "FTT",
    SRM = "SRM",
    stSOL = "stSOL",
    whETH = "whETH",
    wLDO = "wLDO",
    scnSOL = "scnSOL",
    SOCN = "SOCN",
    wLUNA = "wLUNA",
    USDT_USDC_SABER = "USDT_USDC_SABER",
    USTv2_USDC_SABER = "USTv2_USDC_SABER",
    UST_USDC_SABER = "UST_USDC_SABER",
    mSOL_SOL_SABER = "mSOL_SOL_SABER",
    stSOL_SOL_SABER = "stSOL_SOL_SABER",
    SOL_USDC_RAYDIUM = "SOL_USDC_RAYDIUM",
    RAY_USDC_RAYDIUM = "RAY_USDC_RAYDIUM",
    SOL_USDT_RAYDIUM = "SOL_USDT_RAYDIUM",
    mSOL_SOL_RAYDIUM = "mSOL_SOL_RAYDIUM",
    RAY_USDT_RAYDIUM = "RAY_USDT_RAYDIUM",
    RAY_ETH_RAYDIUM = "RAY_ETH_RAYDIUM",
    RAY_SOL_RAYDIUM = "RAY_SOL_RAYDIUM",
    SRM_USDC_RAYDIUM = "SRM_USDC_RAYDIUM",
    USDC_USDT_ORCA = "USDC_USDT_ORCA",
    SOL_USDC_ORCA = "SOL_USDC_ORCA",
    mSOL_SOL_ORCA = "mSOL_SOL_ORCA",
    ORCA_USDC_ORCA = "ORCA_USDC_ORCA",
    ORCA_SOL_ORCA = "ORCA_SOL_ORCA",
    ETH_USDC_ORCA = "ETH_USDC_ORCA",
    SOL_USDT_ORCA = "SOL_USDT_ORCA",
    ETH_SOL_ORCA = "ETH_SOL_ORCA",
    BTC_mSOL_ORCA = "BTC_mSOL_ORCA",
    mSOL_USDC_ORCA = "mSOL_USDC_ORCA",
    APT_USDC_ORCA = "APT_USDC_ORCA",
    stSOL_USTv2_ORCA = "stSOL_USTv2_ORCA",
    ORCA_whETH_ORCA = "ORCA_whETH_ORCA"
}
export declare type PoolId = number;
export declare enum TokenCategory {
    Volatile = "volatile",
    Stable = "stable",
    Lp = "lp"
}
export declare enum PoolFlag {
    AllowBorrow = 1,
    IsLp = 2,
    IsStable = 4
}
export interface LpSwapKeyInfo {
    getLpDepositKeys: (ownerKey: PublicKey) => Promise<AccountMeta[]>;
    getLpWithdrawKeys: (ownerKey: PublicKey) => Promise<AccountMeta[]>;
    getLpStakeKeys: (ownerKey: PublicKey) => Promise<AccountMeta[]>;
    getLRVaults: () => [PublicKey, PublicKey];
}
export declare enum Dex {
    Serum = 0,
    Raydium = 1,
    Saber = 2,
    Mercurial = 3,
    Orca = 4
}
export declare class PoolConfig {
    tokenId: TokenID;
    poolId: PoolId;
    ltv: number;
    mint: PublicKey;
    liquidationDiscount: number;
    tokenCategory: TokenCategory;
    lpLeftRightTokenId: [TokenID, TokenID] | null;
    lpLeftRightPoolId: [PoolId, PoolId] | null;
    lpDex: Dex | null;
    lpTargetSwap: number | null;
    lpSwapKeyInfo: LpSwapKeyInfo | null;
    lpNeedSndStake: boolean | null;
    interestRate: InterestRate | null;
    reserveRatio: number;
    constructor(tokenId: TokenID, poolId: PoolId, ltv: number, mint: PublicKey, liquidationDiscount: number, tokenCategory: TokenCategory, lpLeftRightTokenId: [TokenID, TokenID] | null, lpLeftRightPoolId: [PoolId, PoolId] | null, lpDex: Dex | null, lpTargetSwap: number | null, lpSwapKeyInfo: LpSwapKeyInfo | null, lpNeedSndStake: boolean | null, interestRate: InterestRate | null, reserveRatio: number);
    isStable(): boolean;
    isLp(): boolean;
    isVolatile(): boolean;
}
export declare class AppConfig {
    programPubkey: PublicKey;
    adminPubkey: PublicKey;
    farmerPubkey: PublicKey;
    assistKey: PublicKey;
    refresherKey: PublicKey;
    retroAptVault: PublicKey;
    lmAptVault: PublicKey;
    mints: {
        [key in TokenID]: PublicKey;
    };
    decimalMults: {
        [key in TokenID]: number;
    };
    categories: {
        [key in TokenID]: TokenCategory;
    };
    tokenIdToPoolId: {
        [key in TokenID]?: PoolId | undefined;
    };
    discounts: {
        [key in TokenID]?: number | undefined;
    };
    ltvs: {
        [key in TokenID]?: number | undefined;
    };
    lpToLR: {
        [key in TokenID]?: [TokenID, TokenID] | undefined;
    };
    lpToDex: {
        [key in TokenID]?: Dex | undefined;
    };
    lpToTargetSwap: {
        [key in TokenID]?: number | undefined;
    };
    lpToNeedSndStake: {
        [key in TokenID]?: boolean;
    };
    switchboardPriceKeys: {
        [key in TokenID]?: PublicKey;
    };
    pythPriceKeys: {
        [key in TokenID]?: PublicKey;
    };
    interestRates: {
        [key in TokenID]?: InterestRate;
    };
    fees: {
        [key in TokenID]?: number;
    };
    lpSwapInfo: {
        [key in TokenID]?: LpSwapKeyInfo;
    };
    firebaseConfig: object;
    poolConfigs: {
        [key in TokenID]?: PoolConfig;
    };
    constructor(programPubkey: PublicKey, adminPubkey: PublicKey, farmerPubkey: PublicKey, assistKey: PublicKey, refresherKey: PublicKey, retroAptVault: PublicKey, lmAptVault: PublicKey, mints: {
        [key in TokenID]: PublicKey;
    }, decimalMults: {
        [key in TokenID]: number;
    }, categories: {
        [key in TokenID]: TokenCategory;
    }, tokenIdToPoolId: {
        [key in TokenID]?: PoolId | undefined;
    }, discounts: {
        [key in TokenID]?: number | undefined;
    }, ltvs: {
        [key in TokenID]?: number | undefined;
    }, lpToLR: {
        [key in TokenID]?: [TokenID, TokenID] | undefined;
    }, lpToDex: {
        [key in TokenID]?: Dex | undefined;
    }, lpToTargetSwap: {
        [key in TokenID]?: number | undefined;
    }, lpToNeedSndStake: {
        [key in TokenID]?: boolean;
    }, switchboardPriceKeys: {
        [key in TokenID]?: PublicKey;
    }, pythPriceKeys: {
        [key in TokenID]?: PublicKey;
    }, interestRates: {
        [key in TokenID]?: InterestRate;
    }, fees: {
        [key in TokenID]?: number;
    }, lpSwapInfo: {
        [key in TokenID]?: LpSwapKeyInfo;
    }, firebaseConfig: object);
    mintKeyStrToPoolId(mint_key_str: string): number;
    getPoolIdList(): number[];
    getTokenIdByPoolId(targetPoolId: number): TokenID;
    getLtvByPoolId(poolId: number): number | undefined;
    getDecimalMultByPoolId(poolId: number): number;
    getMintByPoolId(poolId: number): PublicKey;
    getPoolConfigList(): PoolConfig[];
    getPoolConfigByPoolId(poolId: number): PoolConfig;
}
export interface AssetPool {
    coin_name: string;
    mint_key: PublicKey;
    mint_decimal_mult: Decimal;
    pool_id: number;
    deposit_amount: Decimal;
    deposit_index: Decimal;
    borrow_amount: Decimal;
    borrow_index: Decimal;
    reserve_factor: Decimal;
    fee_amount: Decimal;
    fee_withdrawn_amt: Decimal;
    fee_rate: Decimal;
    last_update_time: Decimal;
    spl_key: PublicKey;
    atoken_mint_key: PublicKey;
    price_key: PublicKey;
    pyth_price_key: PublicKey;
    serum_next_cl_id: Decimal;
    ltv: Decimal;
    safe_factor: Decimal;
    flags: number;
    base_rate: Decimal;
    multiplier1: Decimal;
    multiplier2: Decimal;
    kink: Decimal;
    borrow_rate: Decimal;
    deposit_rate: Decimal;
    reward_multiplier: Decimal;
    reward_deposit_intra: Decimal;
    reward_per_year: Decimal;
    reward_per_year_deposit: Decimal;
    reward_per_year_borrow: Decimal;
    reward_per_year_per_d: Decimal;
    reward_per_year_per_b: Decimal;
    reward_deposit_index: Decimal;
    reward_borrow_index: Decimal;
    deposit_cap: Decimal;
    is_disabled: boolean;
    farm_yield: Decimal;
}
export interface AssetPrice {
    price_in_usd: Decimal;
}
export interface UserInfo {
    page_id: number;
    num_assets: number;
    user_asset_info: UserAssetInfo[];
    reward: unknown;
    last_vest_cutoff_time: Decimal;
    last_update_time: Decimal;
    assist: Assist;
}
export interface JsonUserInfo {
    page_id: number;
    num_assets: number;
    user_asset_info: JsonUserAssetInfo[];
    reward: unknown;
    last_vest_cutoff_time: number;
    last_update_time: number;
    assist: Assist;
}
export interface UserAssetInfo {
    pool_id: number;
    use_as_collateral: number;
    deposit_amount: Decimal;
    deposit_interests: Decimal;
    deposit_index: Decimal;
    reward_deposit_amount: Decimal;
    reward_deposit_index: Decimal;
    borrow_amount: Decimal;
    borrow_interests: Decimal;
    borrow_index: Decimal;
    reward_borrow_amount: Decimal;
    reward_borrow_index: Decimal;
}
export interface JsonUserAssetInfo {
    pool_id: number;
    use_as_collateral: number;
    deposit_amount: number;
    deposit_interests: number;
    deposit_index: number;
    reward_deposit_amount: number;
    reward_deposit_index: number;
    borrow_amount: number;
    borrow_interests: number;
    borrow_index: number;
    reward_borrow_amount: number;
    reward_borrow_index: number;
}
export interface Assist {
    assist_mode: number;
    self_deleverage_factor: number;
    post_deleverage_factor: number;
    sell_sequence: Uint8Array;
    buy_sequence: Uint8Array;
    num_actions: number;
    num_executed: number;
}
export interface ApiAssetPool {
    tokenName: string;
    mintKey: PublicKey;
    poolKey: PublicKey;
    allowBorrow: boolean;
    isLp: boolean;
    isStable: boolean;
    depositAmount: Decimal;
    depositValue?: Decimal;
    depositRate: Decimal;
    borrowAmount: Decimal;
    borrowValue?: Decimal;
    borrowRate: Decimal;
    lastPoolUpdate: Date;
    lastPriceUpdate?: Date;
    farmYieldRate: Decimal;
    liquidityMiningReward: ApiAssetPoolRewardInfo;
    dualIncentiveReward?: ApiAssetPoolRewardInfo;
}
export interface ApiAssetPoolRewardInfo {
    tokenName: string;
    tokenMint: PublicKey;
    amountPerDay: Decimal;
    amountPerWeek: Decimal;
    amountPerMonth: Decimal;
    amountPerYear: Decimal;
    amountPerYearForDeposit: Decimal;
    amountPerYearForBorrow: Decimal;
    aprForDeposit?: Decimal;
    aprForBorrow?: Decimal;
}
export interface ApiBorrowPowerInfo {
    totalDeposit: Decimal;
    totalCollateral: Decimal;
    maxBorrowAllowed: Decimal;
    totalBorrow: Decimal;
    collateralRatio: Decimal;
    safeLimit: Decimal;
    forceAssistLimit: Decimal;
    liquidationLimit: Decimal;
    assistTriggerLimit?: Decimal;
    assistTargetLimit?: Decimal;
}
export interface ApiUserAssetInfo {
    tokenId: TokenID;
    useAsCollateral: boolean;
    ltv: Decimal;
    depositAmount: Decimal;
    depositValue?: Decimal;
    borrowAmount: Decimal;
    borrowValue?: Decimal;
}
export interface ApiUserInfo {
    userWallet: string;
    userAssetInfo: ApiUserAssetInfo[];
    borrowPowerInfo?: ApiBorrowPowerInfo;
}
export interface AptUserRewardInfo {
}
export interface DualRewardInfo {
    tokenId: TokenID;
    multiplier: Decimal;
}
export interface AdhocSwapInfo {
    targetSwap: number;
    getSwapKeys: (isBuy: boolean) => AccountMeta[];
}
export declare enum RPC {
    GenesysGo = "GenesysGo",
    Triton = "Triton",
    Serum = "Serum"
}
