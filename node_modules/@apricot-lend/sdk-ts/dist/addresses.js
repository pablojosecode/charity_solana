"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Addresses = void 0;
var web3_js_1 = require("@solana/web3.js");
var spl_token_1 = require("@solana/spl-token");
var constants_1 = require("./constants");
var tiny_invariant_1 = __importDefault(require("tiny-invariant"));
// mostly computes addresses
var Addresses = /** @class */ (function () {
    function Addresses(config) {
        this.POOL_SUMMARIES_SEED = "PoolSummaries";
        this.config = config;
    }
    Addresses.prototype.getProgramKey = function () {
        return this.config.programPubkey;
    };
    Addresses.prototype.getAdminKey = function () {
        return this.config.adminPubkey;
    };
    Addresses.prototype.mintKeyStrToPoolId = function (mintKeyStr) {
        return this.config.mintKeyStrToPoolId(mintKeyStr);
    };
    Addresses.prototype.getBasePda = function () {
        return web3_js_1.PublicKey.findProgramAddress([Buffer.from("2")], this.config.programPubkey);
    };
    Addresses.prototype.getPricePda = function () {
        return web3_js_1.PublicKey.findProgramAddress([Buffer.from("PRICE")], this.config.programPubkey);
    };
    Addresses.prototype.getPoolListKey = function (basePda) {
        return web3_js_1.PublicKey.createWithSeed(basePda, "PoolList", this.config.programPubkey);
    };
    Addresses.prototype.getPoolSummariesKey = function () {
        return web3_js_1.PublicKey.createWithSeed(this.config.adminPubkey, this.POOL_SUMMARIES_SEED, this.config.programPubkey);
    };
    Addresses.prototype.getPriceSummariesKey = function (basePda) {
        return web3_js_1.PublicKey.createWithSeed(basePda, "PriceSummaries", this.config.programPubkey);
    };
    Addresses.prototype.getUserPagesStatsKey = function () {
        return web3_js_1.PublicKey.createWithSeed(this.config.adminPubkey, Addresses.USER_STATS_SEED, this.config.programPubkey);
    };
    Addresses.prototype.getUsersPageKey = function (basePda, page_id) {
        return web3_js_1.PublicKey.createWithSeed(basePda, "UsersPage_" + page_id, this.config.programPubkey);
    };
    Addresses.prototype.getLmAptVault = function () {
        return this.config.lmAptVault;
    };
    Addresses.prototype.getAssetPoolKey = function (basePda, mintKeyStr) {
        var poolSeedStr = this.mintKeyStrToPoolSeedStr(mintKeyStr);
        return web3_js_1.PublicKey.createWithSeed(basePda, poolSeedStr, this.config.programPubkey);
    };
    Addresses.prototype.getAssetPriceKey = function (pricePda, mintKeyStr) {
        var poolSeedStr = this.mintKeyStrToPoolSeedStr(mintKeyStr);
        return web3_js_1.PublicKey.createWithSeed(pricePda, poolSeedStr, this.config.programPubkey);
    };
    Addresses.prototype.getAssetPoolSplKey = function (basePda, mintKeyStr) {
        var poolSeedStr = this.mintKeyStrToPoolSeedStr(mintKeyStr);
        return web3_js_1.PublicKey.createWithSeed(basePda, poolSeedStr, spl_token_1.TOKEN_PROGRAM_ID);
    };
    Addresses.prototype.getAssetPoolStakeTableKey = function (mintKeyStr) {
        return __awaiter(this, void 0, void 0, function () {
            var basePda, stakeSeedStr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBasePda()];
                    case 1:
                        basePda = (_a.sent())[0];
                        stakeSeedStr = this.mintKeyStrToStakeTableSeedStr(mintKeyStr);
                        return [2 /*return*/, web3_js_1.PublicKey.createWithSeed(basePda, stakeSeedStr, this.config.programPubkey)];
                }
            });
        });
    };
    Addresses.prototype.getUserInfoKey = function (walletKey) {
        return web3_js_1.PublicKey.createWithSeed(walletKey, "UserInfo", this.config.programPubkey);
    };
    Addresses.prototype.poolIdToSeedStr = function (pool_id) {
        var char1 = String.fromCharCode(pool_id / 16 + "a".charCodeAt(0));
        var char2 = String.fromCharCode(pool_id % 16 + "a".charCodeAt(0));
        return "POOL__" + char1 + char2;
    };
    Addresses.prototype.poolIdToStakeTableSeedStr = function (pool_id) {
        var char1 = String.fromCharCode(pool_id / 16 + "a".charCodeAt(0));
        var char2 = String.fromCharCode(pool_id % 16 + "a".charCodeAt(0));
        return "STAK__" + char1 + char2;
    };
    Addresses.prototype.mintKeyStrToPoolSeedStr = function (mintKeyStr) {
        var poolId = this.config.mintKeyStrToPoolId(mintKeyStr);
        return this.poolIdToSeedStr(poolId);
    };
    Addresses.prototype.mintKeyStrToStakeTableSeedStr = function (mintKeyStr) {
        var poolId = this.config.mintKeyStrToPoolId(mintKeyStr);
        return this.poolIdToStakeTableSeedStr(poolId);
    };
    Addresses.prototype.getLpTargetSwap = function (tokenId) {
        return constants_1.LP_TO_TARGET_SWAP[tokenId];
    };
    Addresses.prototype.getLpDepositKeys = function (tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, ownerKey, _bump, lpSwapInfo;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getBasePda()];
                    case 1:
                        _a = _b.sent(), ownerKey = _a[0], _bump = _a[1];
                        lpSwapInfo = constants_1.LP_SWAP_METAS[tokenId];
                        (0, tiny_invariant_1.default)(lpSwapInfo);
                        return [4 /*yield*/, lpSwapInfo.getLpDepositKeys(ownerKey)];
                    case 2: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    Addresses.prototype.getLpWithdrawKeys = function (tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, ownerKey, _bump, lpSwapInfo;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getBasePda()];
                    case 1:
                        _a = _b.sent(), ownerKey = _a[0], _bump = _a[1];
                        lpSwapInfo = constants_1.LP_SWAP_METAS[tokenId];
                        (0, tiny_invariant_1.default)(lpSwapInfo);
                        return [4 /*yield*/, lpSwapInfo.getLpWithdrawKeys(ownerKey)];
                    case 2: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    Addresses.prototype.getLpStakeKeys = function (tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, ownerKey, _bump, lpSwapInfo, keys;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getBasePda()];
                    case 1:
                        _a = _b.sent(), ownerKey = _a[0], _bump = _a[1];
                        lpSwapInfo = constants_1.LP_SWAP_METAS[tokenId];
                        (0, tiny_invariant_1.default)(lpSwapInfo);
                        return [4 /*yield*/, lpSwapInfo.getLpStakeKeys(ownerKey)];
                    case 2:
                        keys = _b.sent();
                        return [2 /*return*/, keys];
                }
            });
        });
    };
    Addresses.prototype.getLpFirstStakeKeys = function (tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, ownerKey, _bump, lpSwapInfo;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getBasePda()];
                    case 1:
                        _a = _b.sent(), ownerKey = _a[0], _bump = _a[1];
                        lpSwapInfo = constants_1.LP_SWAP_METAS[tokenId];
                        (0, tiny_invariant_1.default)(lpSwapInfo);
                        (0, tiny_invariant_1.default)(lpSwapInfo.isDoubleDipSupported);
                        return [4 /*yield*/, lpSwapInfo.getFirstStakeKeys(ownerKey)];
                    case 2: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    Addresses.prototype.getLpSecondStakeKeys = function (tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, ownerKey, _bump, lpSwapInfo;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getBasePda()];
                    case 1:
                        _a = _b.sent(), ownerKey = _a[0], _bump = _a[1];
                        lpSwapInfo = constants_1.LP_SWAP_METAS[tokenId];
                        (0, tiny_invariant_1.default)(lpSwapInfo);
                        (0, tiny_invariant_1.default)(lpSwapInfo.isDoubleDipSupported);
                        return [4 /*yield*/, lpSwapInfo.getSecondStakeKeys(ownerKey)];
                    case 2: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    Addresses.prototype.getFloatingLpTokenAccount = function (tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            var lpSwapInfo, ownerKey, floatingLpSplKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        lpSwapInfo = constants_1.LP_SWAP_METAS[tokenId];
                        (0, tiny_invariant_1.default)(lpSwapInfo instanceof constants_1.OrcaLpSwapInfo);
                        return [4 /*yield*/, this.getBasePda()];
                    case 1:
                        ownerKey = (_a.sent())[0];
                        return [4 /*yield*/, lpSwapInfo.getPdaKeys(ownerKey)];
                    case 2:
                        floatingLpSplKey = (_a.sent()).pdaFarmTokenAccount;
                        return [2 /*return*/, floatingLpSplKey];
                }
            });
        });
    };
    Addresses.USER_STATS_SEED = "UserPagesStats";
    return Addresses;
}());
exports.Addresses = Addresses;
//# sourceMappingURL=addresses.js.map