"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
var addresses_1 = require("../addresses");
var tiny_invariant_1 = __importDefault(require("tiny-invariant"));
var __1 = require("..");
var _a = process.argv, production = _a[2];
(0, tiny_invariant_1.default)(['alpha', 'public'].includes(production));
function printAddresses() {
    return __awaiter(this, void 0, void 0, function () {
        var config, consts, _a, base_pda, bbump, _b, price_pda, pbump, _c, _d, _e, _f, _g, _h, _j, _k, _l, _i, _m, poolCfg, saberLpSwapInfo, owner, minerKey, minerVault, _o, _p, poolCfg, orcaLpSwapInfo, pdaKeys, _q, _r, _s, key, value, stakeTableKey, ddKeys, _t, _u, poolCfg, raydiumLpSwapInfo, userLedger, stakeTableKey;
        return __generator(this, function (_v) {
            switch (_v.label) {
                case 0:
                    config = production === 'alpha' ? constants_1.ALPHA_CONFIG : constants_1.PUBLIC_CONFIG;
                    consts = new addresses_1.Addresses(config);
                    return [4 /*yield*/, consts.getBasePda()];
                case 1:
                    _a = _v.sent(), base_pda = _a[0], bbump = _a[1];
                    return [4 /*yield*/, consts.getPricePda()];
                case 2:
                    _b = _v.sent(), price_pda = _b[0], pbump = _b[1];
                    console.log("PROGRAM : " + config.programPubkey.toString());
                    console.log("ADMIN   : " + config.adminPubkey.toString());
                    console.log("BASE_PDA  : " + base_pda.toString() + ", bump=" + bbump);
                    console.log("PRICE_PDA : " + price_pda.toString() + ", bump=" + pbump);
                    _d = (_c = console).log;
                    _e = "user_pages_stats: ";
                    return [4 /*yield*/, consts.getUserPagesStatsKey()];
                case 3:
                    _d.apply(_c, [_e + (_v.sent()).toString()]);
                    _g = (_f = console).log;
                    _h = "pool_summaries  : ";
                    return [4 /*yield*/, consts.getPoolSummariesKey()];
                case 4:
                    _g.apply(_f, [_h + (_v.sent()).toString()]);
                    _k = (_j = console).log;
                    _l = "Price_summaries : ";
                    return [4 /*yield*/, consts.getPriceSummariesKey(base_pda)];
                case 5:
                    _k.apply(_j, [_l + (_v.sent()).toString()]);
                    console.log(config.poolConfigs);
                    console.log("\nPrint saber farm keys:\n");
                    _i = 0, _m = Object.values(config.poolConfigs);
                    _v.label = 6;
                case 6:
                    if (!(_i < _m.length)) return [3 /*break*/, 11];
                    poolCfg = _m[_i];
                    if (!(poolCfg.isLp() && poolCfg.lpDex === __1.Dex.Saber)) return [3 /*break*/, 10];
                    console.log("LP " + poolCfg.tokenId + ":");
                    saberLpSwapInfo = poolCfg.lpSwapKeyInfo;
                    return [4 /*yield*/, consts.getBasePda()];
                case 7:
                    owner = (_v.sent())[0];
                    return [4 /*yield*/, saberLpSwapInfo.getMinerKey(owner)];
                case 8:
                    minerKey = (_v.sent())[0];
                    return [4 /*yield*/, saberLpSwapInfo.getMinerVault(owner)];
                case 9:
                    minerVault = _v.sent();
                    console.log("minerKey: " + minerKey.toBase58());
                    console.log("minerVault: " + minerVault.toBase58());
                    console.log('\n');
                    _v.label = 10;
                case 10:
                    _i++;
                    return [3 /*break*/, 6];
                case 11:
                    console.log("\nPrint orca farm keys:\n");
                    _o = 0, _p = Object.values(config.poolConfigs);
                    _v.label = 12;
                case 12:
                    if (!(_o < _p.length)) return [3 /*break*/, 18];
                    poolCfg = _p[_o];
                    if (!(poolCfg.isLp() && poolCfg.lpDex === __1.Dex.Orca)) return [3 /*break*/, 17];
                    console.log("LP " + poolCfg.tokenId + ":");
                    orcaLpSwapInfo = poolCfg.lpSwapKeyInfo;
                    return [4 /*yield*/, orcaLpSwapInfo.getPdaKeys(base_pda)];
                case 13:
                    pdaKeys = _v.sent();
                    for (_q = 0, _r = Object.entries(pdaKeys); _q < _r.length; _q++) {
                        _s = _r[_q], key = _s[0], value = _s[1];
                        console.log(key + ": " + value.toBase58());
                    }
                    if (!poolCfg.lpNeedSndStake) return [3 /*break*/, 16];
                    return [4 /*yield*/, consts.getAssetPoolStakeTableKey(poolCfg.mint.toString())];
                case 14:
                    stakeTableKey = _v.sent();
                    return [4 /*yield*/, orcaLpSwapInfo.getPdaDoubleDipKeys(base_pda)];
                case 15:
                    ddKeys = _v.sent();
                    console.log("StakeTable: " + stakeTableKey.toString());
                    console.log("DD userFarmState: " + ddKeys.pdaDoubleDipFarmState.toString());
                    console.log("DD rewardTokAcc: " + ddKeys.pdaDoubleDipRewardTokenAccount.toString());
                    console.log("DD LP3 token account: " + ddKeys.pdaDoubleDipFarmTokenAccount.toString());
                    _v.label = 16;
                case 16:
                    console.log('\n');
                    _v.label = 17;
                case 17:
                    _o++;
                    return [3 /*break*/, 12];
                case 18:
                    console.log("\nPrint rayidum farm keys:\n");
                    _t = 0, _u = Object.values(config.poolConfigs);
                    _v.label = 19;
                case 19:
                    if (!(_t < _u.length)) return [3 /*break*/, 23];
                    poolCfg = _u[_t];
                    if (!(poolCfg.isLp() && poolCfg.lpDex === __1.Dex.Raydium)) return [3 /*break*/, 22];
                    console.log("LP " + poolCfg.tokenId + ":");
                    raydiumLpSwapInfo = poolCfg.lpSwapKeyInfo;
                    if (!raydiumLpSwapInfo.stakeKeys) return [3 /*break*/, 22];
                    return [4 /*yield*/, raydiumLpSwapInfo.getAssociatedLedger(base_pda)];
                case 20:
                    userLedger = _v.sent();
                    console.log("User ledger: " + userLedger.toBase58());
                    return [4 /*yield*/, consts.getAssetPoolStakeTableKey(poolCfg.mint.toString())];
                case 21:
                    stakeTableKey = _v.sent();
                    console.log("StakeTable: " + stakeTableKey.toString());
                    _v.label = 22;
                case 22:
                    _t++;
                    return [3 /*break*/, 19];
                case 23: return [2 /*return*/];
            }
        });
    });
}
printAddresses();
//# sourceMappingURL=doPrint.js.map