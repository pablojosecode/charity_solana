"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var web3_js_1 = require("@solana/web3.js");
var constants_1 = require("../constants");
var types_1 = require("../types");
var constants_2 = require("../constants");
var ActionWrapper_1 = require("../utils/ActionWrapper");
var tiny_invariant_1 = __importDefault(require("tiny-invariant"));
var decimal_js_1 = __importDefault(require("decimal.js"));
var utils_1 = require("../utils");
var _a = process.argv.slice(0, 5), _nodeStr = _a[0], _scriptStr = _a[1], production = _a[2], endpoint = _a[3], action = _a[4];
(0, tiny_invariant_1.default)(['alpha', 'public'].includes(production));
function doParse() {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var conn, config, wrapper, poolId, poolMint, result, time, lastUpdate, poolId, poolMint, result, userKeyStr, userKey, result, pageId, page, filteredPage, _i, filteredPage_1, key, result, filtered, free, used;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    conn = (0, utils_1.getRPCConnection)(endpoint);
                    config = production === 'alpha' ? constants_1.ALPHA_CONFIG : constants_1.PUBLIC_CONFIG;
                    wrapper = new ActionWrapper_1.ActionWrapper(conn, config);
                    if (!(action === "pool")) return [3 /*break*/, 2];
                    poolId = types_1.TokenID[process.argv[5]];
                    poolMint = constants_2.MINTS[poolId];
                    return [4 /*yield*/, wrapper.getParsedAssetPool(poolMint)];
                case 1:
                    result = _b.sent();
                    time = ((_a = result === null || result === void 0 ? void 0 : result.last_update_time) !== null && _a !== void 0 ? _a : new decimal_js_1.default(0)).toNumber();
                    lastUpdate = new Date(time * 1000);
                    console.log(result);
                    console.log("Last update time: " + lastUpdate.toISOString());
                    return [3 /*break*/, 11];
                case 2:
                    if (!(action === "price")) return [3 /*break*/, 4];
                    poolId = types_1.TokenID[process.argv[5]];
                    poolMint = constants_2.MINTS[poolId];
                    return [4 /*yield*/, wrapper.getParsedAssetPrice(poolMint)];
                case 3:
                    result = _b.sent();
                    console.log(result);
                    return [3 /*break*/, 11];
                case 4:
                    if (!(action === "user")) return [3 /*break*/, 6];
                    userKeyStr = process.argv[5];
                    userKey = new web3_js_1.PublicKey(userKeyStr);
                    return [4 /*yield*/, wrapper.getParsedUserInfo(userKey)];
                case 5:
                    result = _b.sent();
                    console.log(result);
                    return [3 /*break*/, 11];
                case 6:
                    if (!(action === "user-page")) return [3 /*break*/, 8];
                    pageId = parseInt(process.argv[5]);
                    return [4 /*yield*/, wrapper.getParsedUsersPage(pageId)];
                case 7:
                    page = _b.sent();
                    (0, tiny_invariant_1.default)(page, "Failed to fetch usersPage");
                    filteredPage = page === null || page === void 0 ? void 0 : page.filter(function (u) { return u.toBase58() !== '11111111111111111111111111111111'; });
                    console.log("pageId: " + pageId);
                    console.log("Num users: " + filteredPage.length);
                    for (_i = 0, filteredPage_1 = filteredPage; _i < filteredPage_1.length; _i++) {
                        key = filteredPage_1[_i];
                        console.log(key.toBase58());
                    }
                    return [3 /*break*/, 11];
                case 8:
                    if (!(action === "user-stats")) return [3 /*break*/, 10];
                    return [4 /*yield*/, wrapper.getParsedUserPagesStats()];
                case 9:
                    result = (_b.sent());
                    console.log(result);
                    filtered = result.filter(function (n) { return n !== 0; });
                    free = filtered.reduce(function (a, b) { return a + b; }, 0);
                    used = filtered.length * 320 - free;
                    console.log("num-free: " + free);
                    console.log("num-used: " + used);
                    return [3 /*break*/, 11];
                case 10: throw new Error("Unknown action: " + action);
                case 11:
                    process.exit();
                    return [2 /*return*/];
            }
        });
    });
}
doParse();
//# sourceMappingURL=doParse.js.map