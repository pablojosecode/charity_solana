"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var web3_js_1 = require("@solana/web3.js");
var constants_1 = require("../constants");
var types_1 = require("../types");
var constants_2 = require("../constants");
var ActionWrapper_1 = require("../utils/ActionWrapper");
var fs = __importStar(require("fs"));
var spl_token_1 = require("@solana/spl-token");
var tiny_invariant_1 = __importDefault(require("tiny-invariant"));
var utils_1 = require("../utils");
var _a = process.argv.slice(0, 5), _nodeStr = _a[0], _scriptStr = _a[1], production = _a[2], keyLocation = _a[3], action = _a[4];
(0, tiny_invariant_1.default)(['alpha', 'public'].includes(production));
var config = production === 'alpha' ? constants_1.ALPHA_CONFIG : constants_1.PUBLIC_CONFIG;
function doTransaction() {
    return __awaiter(this, void 0, void 0, function () {
        function getAssociatedTokAcc(tokenId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, spl_token_1.Token.getAssociatedTokenAddress(spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID, spl_token_1.TOKEN_PROGRAM_ID, constants_2.MINTS[tokenId], keypair.publicKey)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        }
        var keyStr, privateKey, keypair, conn, wrapper, remainingArgs, tokenId, amount, poolMint, result, _a, _b, _c, tokenId, amount, poolMint, result, _d, _e, _f, tokenId, amount, poolMint, result, _g, _h, _j, tokenId, amount, poolMint, result, _k, _l, _m, tokenId, amount, poolMint, result, _o, _p, _q, tokenId, _r, leftId, rightId, amountLp, amountLeft, amountRight, result, tokenId, result, tokenId, amount, result, tokenId, _s, leftId, rightId, amount, amountLeft, amountRight, result, sellTokenId, buyTokenId, sellAmount, minBuyAmount, isSwapAllDeposit, result, result, userAptSpl, result;
        return __generator(this, function (_t) {
            switch (_t.label) {
                case 0:
                    keyStr = fs.readFileSync(keyLocation, 'utf8');
                    privateKey = JSON.parse(keyStr);
                    keypair = web3_js_1.Keypair.fromSecretKey(new Uint8Array(privateKey));
                    conn = (0, utils_1.getRPCConnection)();
                    wrapper = new ActionWrapper_1.ActionWrapper(conn, config);
                    remainingArgs = process.argv.slice(5);
                    if (!(action === 'new-and-deposit')) return [3 /*break*/, 3];
                    tokenId = types_1.TokenID[remainingArgs[0]];
                    amount = parseFloat(remainingArgs[1]);
                    poolMint = constants_2.MINTS[tokenId];
                    _b = (_a = wrapper).addUserAndDeposit;
                    _c = [keypair];
                    return [4 /*yield*/, getAssociatedTokAcc(tokenId)];
                case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([_t.sent(), poolMint.toBase58(),
                        amount * constants_1.DECIMAL_MULT[tokenId]]))];
                case 2:
                    result = _t.sent();
                    console.log(result);
                    return [3 /*break*/, 31];
                case 3:
                    if (!(action === 'deposit')) return [3 /*break*/, 6];
                    tokenId = types_1.TokenID[remainingArgs[0]];
                    amount = parseFloat(remainingArgs[1]);
                    poolMint = constants_2.MINTS[tokenId];
                    _e = (_d = wrapper).deposit;
                    _f = [keypair];
                    return [4 /*yield*/, getAssociatedTokAcc(tokenId)];
                case 4: return [4 /*yield*/, _e.apply(_d, _f.concat([_t.sent(), poolMint.toBase58(),
                        amount * constants_1.DECIMAL_MULT[tokenId]]))];
                case 5:
                    result = _t.sent();
                    console.log(result);
                    return [3 /*break*/, 31];
                case 6:
                    if (!(action === 'withdraw')) return [3 /*break*/, 9];
                    tokenId = types_1.TokenID[remainingArgs[0]];
                    amount = parseFloat(remainingArgs[1]);
                    poolMint = constants_2.MINTS[tokenId];
                    _h = (_g = wrapper).withdraw;
                    _j = [keypair];
                    return [4 /*yield*/, getAssociatedTokAcc(tokenId)];
                case 7: return [4 /*yield*/, _h.apply(_g, _j.concat([_t.sent(), poolMint.toBase58(),
                        false,
                        amount * constants_1.DECIMAL_MULT[tokenId]]))];
                case 8:
                    result = _t.sent();
                    console.log(result);
                    return [3 /*break*/, 31];
                case 9:
                    if (!(action === 'borrow')) return [3 /*break*/, 12];
                    tokenId = types_1.TokenID[remainingArgs[0]];
                    amount = parseFloat(remainingArgs[1]);
                    poolMint = constants_2.MINTS[tokenId];
                    _l = (_k = wrapper).borrow;
                    _m = [keypair];
                    return [4 /*yield*/, getAssociatedTokAcc(tokenId)];
                case 10: return [4 /*yield*/, _l.apply(_k, _m.concat([_t.sent(), poolMint.toBase58(),
                        amount * constants_1.DECIMAL_MULT[tokenId]]))];
                case 11:
                    result = _t.sent();
                    console.log(result);
                    return [3 /*break*/, 31];
                case 12:
                    if (!(action === 'repay')) return [3 /*break*/, 15];
                    tokenId = types_1.TokenID[remainingArgs[0]];
                    amount = parseFloat(remainingArgs[1]);
                    poolMint = constants_2.MINTS[tokenId];
                    _p = (_o = wrapper).repay;
                    _q = [keypair];
                    return [4 /*yield*/, getAssociatedTokAcc(tokenId)];
                case 13: return [4 /*yield*/, _p.apply(_o, _q.concat([_t.sent(), poolMint.toBase58(),
                        false,
                        amount * constants_1.DECIMAL_MULT[tokenId]]))];
                case 14:
                    result = _t.sent();
                    console.log(result);
                    return [3 /*break*/, 31];
                case 15:
                    if (!(action === 'lp-create')) return [3 /*break*/, 17];
                    // node doTrans.js keyLocation repay BTC 0.1
                    if (remainingArgs.length < 4) {
                        throw new Error("Invalid argvs");
                    }
                    tokenId = types_1.TokenID[remainingArgs[0]];
                    _r = constants_1.LP_TO_LR[tokenId], leftId = _r[0], rightId = _r[1];
                    amountLp = parseFloat(remainingArgs[1]);
                    amountLeft = parseFloat(remainingArgs[2]);
                    amountRight = parseFloat(remainingArgs[3]);
                    return [4 /*yield*/, wrapper.lpCreate(keypair, tokenId, amountLeft * constants_1.DECIMAL_MULT[leftId], amountRight * constants_1.DECIMAL_MULT[rightId], amountLp * constants_1.DECIMAL_MULT[tokenId])];
                case 16:
                    result = _t.sent();
                    console.log(result);
                    return [3 /*break*/, 31];
                case 17:
                    if (!(action === 'lp-create-2step')) return [3 /*break*/, 19];
                    // node doTrans.js keyLocation repay BTC 0.1
                    if (remainingArgs.length < 1) {
                        throw new Error("Invalid argvs");
                    }
                    tokenId = types_1.TokenID[remainingArgs[0]];
                    return [4 /*yield*/, wrapper.lpStake2ndStep(keypair, tokenId)];
                case 18:
                    result = _t.sent();
                    console.log(result);
                    return [3 /*break*/, 31];
                case 19:
                    if (!(action === 'lp-redeem-2step')) return [3 /*break*/, 21];
                    tokenId = types_1.TokenID[remainingArgs[0]];
                    amount = parseFloat(remainingArgs[1]);
                    return [4 /*yield*/, wrapper.lpUnstake2ndStep(keypair, tokenId, amount * constants_1.DECIMAL_MULT[tokenId])];
                case 20:
                    result = _t.sent();
                    console.log(result);
                    return [3 /*break*/, 31];
                case 21:
                    if (!(action === 'lp-redeem')) return [3 /*break*/, 23];
                    tokenId = types_1.TokenID[remainingArgs[0]];
                    _s = constants_1.LP_TO_LR[tokenId], leftId = _s[0], rightId = _s[1];
                    amount = parseFloat(remainingArgs[1]);
                    amountLeft = parseFloat(remainingArgs[2]);
                    amountRight = parseFloat(remainingArgs[3]);
                    return [4 /*yield*/, wrapper.lpRedeem(keypair, tokenId, amountLeft * constants_1.DECIMAL_MULT[leftId], amountRight * constants_1.DECIMAL_MULT[rightId], amount * constants_1.DECIMAL_MULT[tokenId])];
                case 22:
                    result = _t.sent();
                    console.log(result);
                    return [3 /*break*/, 31];
                case 23:
                    if (!(action === 'simple-swap')) return [3 /*break*/, 25];
                    sellTokenId = types_1.TokenID[remainingArgs[0]];
                    buyTokenId = types_1.TokenID[remainingArgs[1]];
                    sellAmount = parseFloat(remainingArgs[2]);
                    minBuyAmount = parseFloat(remainingArgs[3]);
                    isSwapAllDeposit = remainingArgs[4] === 'true';
                    return [4 /*yield*/, wrapper.simpleSwap(keypair, sellTokenId, buyTokenId, sellAmount, minBuyAmount, true, isSwapAllDeposit)];
                case 24:
                    result = _t.sent();
                    console.log(result);
                    return [3 /*break*/, 31];
                case 25:
                    if (!(action === 'make-lm-available')) return [3 /*break*/, 27];
                    return [4 /*yield*/, wrapper.makeLmAptAvailable(keypair)];
                case 26:
                    result = _t.sent();
                    console.log(result);
                    return [3 /*break*/, 31];
                case 27:
                    if (!(action === 'claim-lm')) return [3 /*break*/, 30];
                    return [4 /*yield*/, getAssociatedTokAcc(types_1.TokenID.APT)];
                case 28:
                    userAptSpl = _t.sent();
                    return [4 /*yield*/, wrapper.claimAptLmReward(keypair, userAptSpl)];
                case 29:
                    result = _t.sent();
                    console.log(result);
                    return [3 /*break*/, 31];
                case 30: throw new Error("Unknown command=" + action);
                case 31:
                    process.exit();
                    return [2 /*return*/];
            }
        });
    });
}
doTransaction();
//# sourceMappingURL=doTrans.js.map