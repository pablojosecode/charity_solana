"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizePool = exports.AssetPoolLoader = exports.createAssetPoolLoader = void 0;
var types_1 = require("../types");
var constants_1 = require("../constants");
var ActionWrapper_1 = require("../utils/ActionWrapper");
var PriceInfo_1 = require("../utils/PriceInfo");
var addresses_1 = require("../addresses");
var configs_1 = require("../constants/configs");
var transform_1 = require("../utils/transform");
var decimal_js_1 = __importDefault(require("decimal.js"));
function createAssetPoolLoader(connection, fetchPrice, config) {
    if (config === void 0) { config = constants_1.PUBLIC_CONFIG; }
    return __awaiter(this, void 0, void 0, function () {
        var priceInfo_1, poolLoader;
        var _this = this;
        return __generator(this, function (_a) {
            if (fetchPrice === undefined) {
                priceInfo_1 = new PriceInfo_1.PriceInfo(config);
                fetchPrice = function (tokenId) { return __awaiter(_this, void 0, void 0, function () {
                    var isDualRewardToken, error_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 5, , 6]);
                                isDualRewardToken = Object.values(configs_1.DUAL_REWARD_CONFIGS).some(function (info) { return info.tokenId == tokenId; });
                                if (!isDualRewardToken) return [3 /*break*/, 2];
                                console.log("Fetching coin gecko price for " + tokenId);
                                return [4 /*yield*/, priceInfo_1.fetchCoinGeckoPrice(tokenId)];
                            case 1: return [2 /*return*/, _a.sent()];
                            case 2:
                                console.log("Fetching onchain price for " + tokenId);
                                return [4 /*yield*/, priceInfo_1.fetchPrice(tokenId, connection)];
                            case 3: return [2 /*return*/, _a.sent()];
                            case 4: return [3 /*break*/, 6];
                            case 5:
                                error_1 = _a.sent();
                                console.error(error_1);
                                return [2 /*return*/, undefined];
                            case 6: return [2 /*return*/];
                        }
                    });
                }); };
            }
            poolLoader = new AssetPoolLoader(connection, config, fetchPrice);
            return [2 /*return*/, poolLoader];
        });
    });
}
exports.createAssetPoolLoader = createAssetPoolLoader;
var AssetPoolLoader = /** @class */ (function () {
    function AssetPoolLoader(connection, config, fetchPrice) {
        this.connection = connection;
        this.config = config;
        this.fetchPrice = fetchPrice;
        this.actionWrapper = new ActionWrapper_1.ActionWrapper(this.connection, this.config);
        this.addresses = new addresses_1.Addresses(this.config);
    }
    AssetPoolLoader.prototype.getAssetPool = function (tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            var mintKey, assetPoolRaw;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mintKey = constants_1.MINTS[tokenId];
                        return [4 /*yield*/, this.actionWrapper.getParsedAssetPool(mintKey)];
                    case 1:
                        assetPoolRaw = _a.sent();
                        if (assetPoolRaw === null) {
                            return [2 /*return*/, undefined];
                        }
                        return [2 /*return*/, normalizePool(tokenId, mintKey, assetPoolRaw, this.addresses, this.fetchPrice)];
                }
            });
        });
    };
    return AssetPoolLoader;
}());
exports.AssetPoolLoader = AssetPoolLoader;
function normalizePool(tokenId, mintKey, assetPoolRaw, addresses, fetchPrice) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, base_pda, _, tokenPrice, aptPrice, dualRewardConfig, dualRewardTokenPrice, _b, multiplierNative, lastPriceUpdate, depositValue, borrowValue, lmRewardInfo, normalizedPool, dualRewardInfo;
        var _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0: return [4 /*yield*/, addresses.getBasePda()];
                case 1:
                    _a = _d.sent(), base_pda = _a[0], _ = _a[1];
                    return [4 /*yield*/, fetchPrice(tokenId)];
                case 2:
                    tokenPrice = _d.sent();
                    return [4 /*yield*/, fetchPrice(types_1.TokenID.APT)];
                case 3:
                    aptPrice = _d.sent();
                    dualRewardConfig = configs_1.DUAL_REWARD_CONFIGS[tokenId];
                    if (!dualRewardConfig) return [3 /*break*/, 5];
                    return [4 /*yield*/, fetchPrice(dualRewardConfig.tokenId)];
                case 4:
                    _b = _d.sent();
                    return [3 /*break*/, 6];
                case 5:
                    _b = undefined;
                    _d.label = 6;
                case 6:
                    dualRewardTokenPrice = _b;
                    multiplierNative = dualRewardConfig
                        ? (0, transform_1.tokenRateToNativeRate)(dualRewardConfig.multiplier, dualRewardConfig.tokenId, types_1.TokenID.APT)
                        : undefined;
                    lastPriceUpdate = new Date();
                    depositValue = undefined;
                    borrowValue = undefined;
                    if (tokenPrice !== undefined) {
                        depositValue = (0, transform_1.nativeAmountToValue)(tokenId, assetPoolRaw.deposit_amount, tokenPrice);
                        borrowValue = (0, transform_1.nativeAmountToValue)(tokenId, assetPoolRaw.borrow_amount, tokenPrice);
                    }
                    lmRewardInfo = getRewardInfo(types_1.TokenID.APT, assetPoolRaw.reward_per_year_deposit, assetPoolRaw.reward_per_year_borrow, aptPrice, depositValue, borrowValue);
                    _c = {
                        tokenName: assetPoolRaw.coin_name,
                        mintKey: mintKey
                    };
                    return [4 /*yield*/, addresses.getAssetPoolKey(base_pda, mintKey.toString())];
                case 7:
                    normalizedPool = (_c.poolKey = _d.sent(),
                        _c.allowBorrow = (0, transform_1.flagsToBool)(assetPoolRaw.flags, types_1.PoolFlag.AllowBorrow),
                        _c.isLp = (0, transform_1.flagsToBool)(assetPoolRaw.flags, types_1.PoolFlag.IsLp),
                        _c.isStable = (0, transform_1.flagsToBool)(assetPoolRaw.flags, types_1.PoolFlag.IsStable),
                        _c.depositAmount = (0, transform_1.nativeAmountToTokenAmount)(tokenId, assetPoolRaw.deposit_amount),
                        _c.depositValue = depositValue,
                        _c.depositRate = assetPoolRaw.deposit_rate,
                        _c.borrowAmount = (0, transform_1.nativeAmountToTokenAmount)(tokenId, assetPoolRaw.borrow_amount),
                        _c.borrowValue = borrowValue,
                        _c.borrowRate = assetPoolRaw.borrow_rate,
                        _c.farmYieldRate = assetPoolRaw.farm_yield,
                        _c.lastPoolUpdate = (0, transform_1.epochToDate)(assetPoolRaw.last_update_time),
                        _c.lastPriceUpdate = lastPriceUpdate,
                        _c.liquidityMiningReward = lmRewardInfo,
                        _c);
                    if (dualRewardConfig !== undefined && multiplierNative !== undefined) {
                        dualRewardInfo = getRewardInfo(dualRewardConfig.tokenId, assetPoolRaw.reward_per_year_deposit.mul(multiplierNative), assetPoolRaw.reward_per_year_borrow.mul(multiplierNative), dualRewardTokenPrice, depositValue, borrowValue);
                        normalizedPool.dualIncentiveReward = dualRewardInfo;
                    }
                    return [2 /*return*/, normalizedPool];
            }
        });
    });
}
exports.normalizePool = normalizePool;
function getRewardInfo(rewardTokenId, nativeAmtPerYearForDeposit, nativeAmtPerYearForBorrow, rewardTokenPrice, depositValue, borrowValue) {
    var nativeAmtPerYear = nativeAmtPerYearForDeposit.add(nativeAmtPerYearForBorrow);
    var amountPerYear = (0, transform_1.nativeAmountToTokenAmount)(rewardTokenId, nativeAmtPerYear);
    var amountPerDay = amountPerYear.dividedBy(360);
    var amountPerYearForDeposit = (0, transform_1.nativeAmountToTokenAmount)(rewardTokenId, nativeAmtPerYearForDeposit);
    var amountPerYearForBorrow = (0, transform_1.nativeAmountToTokenAmount)(rewardTokenId, nativeAmtPerYearForBorrow);
    var rewardInfo = {
        tokenName: rewardTokenId,
        tokenMint: constants_1.MINTS[rewardTokenId],
        amountPerDay: amountPerDay,
        amountPerWeek: amountPerDay.mul(7),
        amountPerMonth: amountPerDay.mul(30),
        amountPerYear: amountPerYear,
        amountPerYearForDeposit: amountPerYearForDeposit,
        amountPerYearForBorrow: amountPerYearForBorrow,
    };
    if (rewardTokenPrice !== undefined && depositValue !== undefined) {
        rewardInfo.aprForDeposit = depositValue.isZero()
            ? new decimal_js_1.default(0)
            : amountPerYearForDeposit.mul(rewardTokenPrice).div(depositValue);
    }
    if (rewardTokenPrice !== undefined && borrowValue !== undefined) {
        rewardInfo.aprForBorrow = borrowValue.isZero()
            ? new decimal_js_1.default(0)
            : amountPerYearForBorrow.mul(rewardTokenPrice).div(borrowValue);
    }
    return rewardInfo;
}
//# sourceMappingURL=pool.js.map