"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fastForwardPositionAmount = exports.fastForwardUserAssetInfo = exports.getUserAssetInfo = exports.getUserAssetInfoList = exports.getBorrowPowerInfo = exports.PortfolioLoader = exports.createPortfolioLoader = void 0;
var types_1 = require("../types");
var constants_1 = require("../constants");
var ActionWrapper_1 = require("../utils/ActionWrapper");
var PriceInfo_1 = require("../utils/PriceInfo");
var addresses_1 = require("../addresses");
var decimal_js_1 = require("decimal.js");
var transform_1 = require("../utils/transform");
function createPortfolioLoader(userWalletKey, connection, fetchPrice, config) {
    var _this = this;
    if (config === void 0) { config = constants_1.PUBLIC_CONFIG; }
    if (fetchPrice === undefined) {
        var priceInfo_1 = new PriceInfo_1.PriceInfo(config);
        fetchPrice = function (tokenId) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(tokenId === types_1.TokenID.MNDE)) return [3 /*break*/, 2];
                        return [4 /*yield*/, priceInfo_1.fetchCoinGeckoPrice(tokenId)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [4 /*yield*/, priceInfo_1.fetchPrice(tokenId, connection)];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
    }
    var portfolioLoader = new PortfolioLoader(userWalletKey, connection, config, fetchPrice);
    return portfolioLoader;
}
exports.createPortfolioLoader = createPortfolioLoader;
var PortfolioLoader = /** @class */ (function () {
    function PortfolioLoader(userWalletKey, connection, config, fetchPrice) {
        this.userWalletKey = userWalletKey;
        this.connection = connection;
        this.config = config;
        this.fetchPrice = fetchPrice;
        this.actionWrapper = new ActionWrapper_1.ActionWrapper(this.connection, this.config);
        this.addresses = new addresses_1.Addresses(this.config);
        this.assetPoolsCache = {};
        this.priceCache = {};
    }
    PortfolioLoader.prototype.refreshPortfolio = function () {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var _c, _i, _d, userAssetInfo, tokenId, mintKey, _e, _f, _g, _h;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        _c = this;
                        return [4 /*yield*/, this.actionWrapper.getParsedUserInfo(this.userWalletKey)];
                    case 1:
                        _c.userInfoCache =
                            (_a = (_j.sent())) !== null && _a !== void 0 ? _a : undefined;
                        if (this.userInfoCache === undefined) {
                            throw new Error("Failed to fetch User Info for " + this.userWalletKey.toString());
                        }
                        _i = 0, _d = this.userInfoCache.user_asset_info;
                        _j.label = 2;
                    case 2:
                        if (!(_i < _d.length)) return [3 /*break*/, 6];
                        userAssetInfo = _d[_i];
                        tokenId = this.config.getTokenIdByPoolId(userAssetInfo.pool_id);
                        mintKey = constants_1.MINTS[tokenId];
                        _e = this.assetPoolsCache;
                        _f = tokenId;
                        return [4 /*yield*/, this.actionWrapper.getParsedAssetPool(mintKey)];
                    case 3:
                        _e[_f] =
                            (_b = (_j.sent())) !== null && _b !== void 0 ? _b : undefined;
                        _g = this.priceCache;
                        _h = tokenId;
                        return [4 /*yield*/, this.fetchPrice(tokenId)];
                    case 4:
                        _g[_h] = _j.sent();
                        _j.label = 5;
                    case 5:
                        _i++;
                        return [3 /*break*/, 2];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    PortfolioLoader.prototype.getUserInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = {
                            userWallet: this.userWalletKey.toString()
                        };
                        return [4 /*yield*/, this.getUserAssetInfoList()];
                    case 1:
                        _a.userAssetInfo = _b.sent();
                        return [4 /*yield*/, this.getBorrowPowerInfo()];
                    case 2: return [2 /*return*/, (_a.borrowPowerInfo = _b.sent(),
                            _a)];
                }
            });
        });
    };
    PortfolioLoader.prototype.getUserInfoAddress = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.addresses.getUserInfoKey(this.userWalletKey)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    PortfolioLoader.prototype.getBorrowPowerInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (this.userInfoCache === undefined) {
                    return [2 /*return*/, undefined];
                }
                return [2 /*return*/, getBorrowPowerInfo(this.userInfoCache, this.config, function (tokenId) { return Promise.resolve(_this.assetPoolsCache[tokenId]); }, function (tokenId) { return Promise.resolve(_this.priceCache[tokenId]); })];
            });
        });
    };
    PortfolioLoader.prototype.getUserAssetInfoList = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (this.userInfoCache === undefined) {
                    return [2 /*return*/, []];
                }
                return [2 /*return*/, getUserAssetInfoList(this.userInfoCache, this.config, function (tokenId) { return Promise.resolve(_this.assetPoolsCache[tokenId]); }, function (tokenId) { return Promise.resolve(_this.priceCache[tokenId]); })];
            });
        });
    };
    return PortfolioLoader;
}());
exports.PortfolioLoader = PortfolioLoader;
function getBorrowPowerInfo(userInfoRaw, appConfig, fetchPool, fetchPrice) {
    return __awaiter(this, void 0, void 0, function () {
        var userAssetInfoList, totalDeposit, totalCollateral, totalBorrow;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getUserAssetInfoList(userInfoRaw, appConfig, fetchPool, fetchPrice)];
                case 1:
                    userAssetInfoList = _a.sent();
                    if (userAssetInfoList === undefined) {
                        return [2 /*return*/, undefined];
                    }
                    if (userAssetInfoList.some(function (uai) { return uai.depositValue == undefined || uai.borrowValue === undefined; })) {
                        return [2 /*return*/, undefined];
                    }
                    totalDeposit = userAssetInfoList.reduce(function (acc, uai) { return acc.add(uai.depositValue); }, decimal_js_1.Decimal.abs(0));
                    totalCollateral = userAssetInfoList.reduce(function (acc, uai) { return acc.add(uai.ltv.mul(uai.depositValue)); }, decimal_js_1.Decimal.abs(0));
                    totalBorrow = userAssetInfoList.reduce(function (acc, uai) { return acc.add(uai.borrowValue); }, decimal_js_1.Decimal.abs(0));
                    return [2 /*return*/, {
                            totalDeposit: totalDeposit,
                            totalCollateral: totalCollateral,
                            maxBorrowAllowed: constants_1.SAFE_LIMIT.mul(totalCollateral),
                            totalBorrow: totalBorrow,
                            collateralRatio: totalCollateral.isZero()
                                ? new decimal_js_1.Decimal(Infinity)
                                : totalBorrow.div(totalCollateral),
                            safeLimit: constants_1.SAFE_LIMIT,
                            forceAssistLimit: constants_1.FORCE_ASSIST_LIMIT,
                            liquidationLimit: constants_1.LIQUIDATION_LIMIT,
                            assistTriggerLimit: userInfoRaw.assist.assist_mode === 0
                                ? undefined
                                : new decimal_js_1.Decimal(userInfoRaw.assist.self_deleverage_factor),
                            assistTargetLimit: userInfoRaw.assist.assist_mode === 0
                                ? undefined
                                : new decimal_js_1.Decimal(userInfoRaw.assist.post_deleverage_factor),
                        }];
            }
        });
    });
}
exports.getBorrowPowerInfo = getBorrowPowerInfo;
function getUserAssetInfoList(userInfoRaw, appConfig, fetchPool, fetchPrice) {
    return __awaiter(this, void 0, void 0, function () {
        var userAssetInfoList, _i, _a, userAssetInfoRaw, tokenId, assetPoolRaw, price, apiUserAssetInfo;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    userAssetInfoList = [];
                    _i = 0, _a = userInfoRaw.user_asset_info;
                    _b.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 5];
                    userAssetInfoRaw = _a[_i];
                    tokenId = appConfig.getTokenIdByPoolId(userAssetInfoRaw.pool_id);
                    return [4 /*yield*/, fetchPool(tokenId)];
                case 2:
                    assetPoolRaw = _b.sent();
                    return [4 /*yield*/, fetchPrice(tokenId)];
                case 3:
                    price = _b.sent();
                    if (assetPoolRaw === undefined) {
                        return [3 /*break*/, 4];
                    }
                    apiUserAssetInfo = getUserAssetInfo(tokenId, userAssetInfoRaw, assetPoolRaw, price);
                    if (apiUserAssetInfo === undefined) {
                        return [3 /*break*/, 4];
                    }
                    userAssetInfoList.push(apiUserAssetInfo);
                    _b.label = 4;
                case 4:
                    _i++;
                    return [3 /*break*/, 1];
                case 5: return [2 /*return*/, userAssetInfoList];
            }
        });
    });
}
exports.getUserAssetInfoList = getUserAssetInfoList;
function getUserAssetInfo(tokenId, userAssetInfoRaw, assetPoolRaw, price) {
    if (userAssetInfoRaw === undefined || assetPoolRaw === undefined) {
        return undefined;
    }
    return fastForwardUserAssetInfo(tokenId, userAssetInfoRaw, assetPoolRaw, price);
}
exports.getUserAssetInfo = getUserAssetInfo;
function fastForwardUserAssetInfo(tokenId, userAssetInfoRaw, assetPoolRaw, price) {
    var currentDepositAmount = fastForwardPositionAmount(userAssetInfoRaw.deposit_amount, userAssetInfoRaw.deposit_index, assetPoolRaw.deposit_index);
    var currentBorrowAmount = fastForwardPositionAmount(userAssetInfoRaw.borrow_amount, userAssetInfoRaw.borrow_index, assetPoolRaw.borrow_index);
    return {
        tokenId: tokenId,
        useAsCollateral: userAssetInfoRaw.use_as_collateral === 1,
        ltv: assetPoolRaw.ltv,
        depositAmount: (0, transform_1.nativeAmountToTokenAmount)(tokenId, currentDepositAmount),
        depositValue: price === undefined ? undefined : (0, transform_1.nativeAmountToValue)(tokenId, currentDepositAmount, price),
        borrowAmount: (0, transform_1.nativeAmountToTokenAmount)(tokenId, currentBorrowAmount),
        borrowValue: price === undefined ? undefined : (0, transform_1.nativeAmountToValue)(tokenId, currentBorrowAmount, price),
    };
}
exports.fastForwardUserAssetInfo = fastForwardUserAssetInfo;
function fastForwardPositionAmount(lastAmount, lastIndex, currentIndex) {
    return (0, transform_1.fastForwardAmount)((0, transform_1.rewindAmount)(lastAmount, lastIndex), currentIndex);
}
exports.fastForwardPositionAmount = fastForwardPositionAmount;
//# sourceMappingURL=portfolio.js.map