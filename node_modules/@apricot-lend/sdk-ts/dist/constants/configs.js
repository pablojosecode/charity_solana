"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DIRECT_SWAP_META = exports.PUBLIC_CONFIG = exports.ALPHA_CONFIG = exports.COINGECKO_PRICE_ID = exports.PYTH_PRICE = exports.SWITCHBOARD_PRICE = exports.LP_SWAP_METAS = exports.RAYDIUM_LP_METAS = exports.ORCA_LP_METAS = exports.SABER_LP_METAS = exports.RaydiumLpSwapInfo = exports.OrcaLpSwapInfo = exports.SaberLpSwapInfo = exports.DUAL_REWARD_CONFIGS = exports.SWAP_METAS = exports.LP_TO_NEED_2ND_STAKE = exports.LP_TO_DEX = exports.LP_TO_TARGET_SWAP = exports.LP_TO_LR = exports.LIQUIDATION_DISCOUNT = exports.CATEGORY = exports.InterestRate = exports.DECIMAL_MULT = exports.MINTS = exports.LIQUIDATION_LIMIT = exports.FORCE_ASSIST_LIMIT = exports.SAFE_LIMIT = exports.FAKE_KEY = void 0;
var spl_token_1 = require("@solana/spl-token");
var web3_js_1 = require("@solana/web3.js");
var tiny_invariant_1 = __importDefault(require("tiny-invariant"));
var __1 = require("..");
var types_1 = require("../types");
var commands_1 = require("./commands");
var decimal_js_1 = require("decimal.js");
var solana_swaps_js_1 = require("@apricot-lend/solana-swaps-js");
exports.FAKE_KEY = web3_js_1.SystemProgram.programId;
exports.SAFE_LIMIT = new decimal_js_1.Decimal(0.9);
exports.FORCE_ASSIST_LIMIT = new decimal_js_1.Decimal(1.0);
exports.LIQUIDATION_LIMIT = new decimal_js_1.Decimal(1.01);
// prettier-ignore
exports.MINTS = (_a = {},
    _a[types_1.TokenID.APT] = new web3_js_1.PublicKey("APTtJyaRX5yGTsJU522N4VYWg3vCvSb65eam5GrPT5Rt"),
    _a[types_1.TokenID.BTC] = new web3_js_1.PublicKey("9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E"),
    _a[types_1.TokenID.ETH] = new web3_js_1.PublicKey("2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk"),
    _a[types_1.TokenID.SOL] = new web3_js_1.PublicKey("So11111111111111111111111111111111111111112"),
    _a[types_1.TokenID.mSOL] = new web3_js_1.PublicKey("mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So"),
    _a[types_1.TokenID.stSOL] = new web3_js_1.PublicKey("7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj"),
    _a[types_1.TokenID.whETH] = new web3_js_1.PublicKey("7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs"),
    _a[types_1.TokenID.scnSOL] = new web3_js_1.PublicKey("5oVNBeEEQvYi1cX3ir8Dx5n1P7pdxydbGF2X4TxVusJm"),
    _a[types_1.TokenID.RAY] = new web3_js_1.PublicKey("4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R"),
    _a[types_1.TokenID.ORCA] = new web3_js_1.PublicKey("orcaEKTdK7LKz57vaAYr9QeNsVEPfiu6QeMU1kektZE"),
    _a[types_1.TokenID.SBR] = new web3_js_1.PublicKey("Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1"),
    _a[types_1.TokenID.MERC] = new web3_js_1.PublicKey("MERt85fc5boKw3BW1eYdxonEuJNvXbiMbs6hvheau5K"),
    _a[types_1.TokenID.MNDE] = new web3_js_1.PublicKey("MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey"),
    _a[types_1.TokenID.FTT] = new web3_js_1.PublicKey("AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3"),
    _a[types_1.TokenID.SRM] = new web3_js_1.PublicKey("SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt"),
    _a[types_1.TokenID.wLDO] = new web3_js_1.PublicKey("HZRCwxP2Vq9PCpPXooayhJ2bxTpo5xfpQrwB1svh332p"),
    _a[types_1.TokenID.SOCN] = new web3_js_1.PublicKey("11111111111111111111111111111111"),
    _a[types_1.TokenID.wLUNA] = new web3_js_1.PublicKey("F6v4wfAdJB8D8p77bMXZgYt8TDKsYxLYxH5AFhUkYx9W"),
    _a[types_1.TokenID.USDT] = new web3_js_1.PublicKey("Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB"),
    _a[types_1.TokenID.USDC] = new web3_js_1.PublicKey("EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"),
    _a[types_1.TokenID.UST] = new web3_js_1.PublicKey("CXLBjMMcwkc17GfJtBos6rQCo1ypeH6eDbB82Kby4MRm"),
    _a[types_1.TokenID.USTv2] = new web3_js_1.PublicKey("9vMJfxuKxXBoEa7rM12mYLMwTacLMLDJqHozw96WQL8i"),
    _a[types_1.TokenID.USDT_USDC_SABER] = new web3_js_1.PublicKey("2poo1w1DL6yd2WNTCnNTzDqkC6MBXq7axo77P16yrBuf"),
    _a[types_1.TokenID.mSOL_SOL_SABER] = new web3_js_1.PublicKey('SoLEao8wTzSfqhuou8rcYsVoLjthVmiXuEjzdNPMnCz'),
    _a[types_1.TokenID.stSOL_SOL_SABER] = new web3_js_1.PublicKey('stSjCmjQ96BiGhTk8gkU22j1739R8YBQVMq7KXWTqUV'),
    _a[types_1.TokenID.USDC_USDT_ORCA] = new web3_js_1.PublicKey("H2uzgruPvonVpCRhwwdukcpXK8TG17swFNzYFr2rtPxy"),
    _a[types_1.TokenID.UST_USDC_SABER] = new web3_js_1.PublicKey("UST32f2JtPGocLzsL41B3VBBoJzTm1mK1j3rwyM3Wgc"),
    _a[types_1.TokenID.SOL_USDC_RAYDIUM] = new web3_js_1.PublicKey("8HoQnePLqPj4M7PUDzfw8e3Ymdwgc7NLGnaTUapubyvu"),
    _a[types_1.TokenID.RAY_USDC_RAYDIUM] = new web3_js_1.PublicKey("FbC6K13MzHvN42bXrtGaWsvZY9fxrackRSZcBGfjPc7m"),
    _a[types_1.TokenID.SOL_USDT_RAYDIUM] = new web3_js_1.PublicKey("Epm4KfTj4DMrvqn6Bwg2Tr2N8vhQuNbuK8bESFp4k33K"),
    _a[types_1.TokenID.SOL_USDC_ORCA] = new web3_js_1.PublicKey("APDFRM3HMr8CAGXwKHiu2f5ePSpaiEJhaURwhsRrUUt9"),
    _a[types_1.TokenID.mSOL_SOL_ORCA] = new web3_js_1.PublicKey("29cdoMgu6MS2VXpcMo1sqRdWEzdUR9tjvoh8fcK8Z87R"),
    _a[types_1.TokenID.ORCA_USDC_ORCA] = new web3_js_1.PublicKey("n8Mpu28RjeYD7oUX3LG1tPxzhRZh3YYLRSHcHRdS3Zx"),
    _a[types_1.TokenID.ORCA_SOL_ORCA] = new web3_js_1.PublicKey("2uVjAuRXavpM6h1scGQaxqb6HVaNRn6T2X7HHXTabz25"),
    _a[types_1.TokenID.ETH_USDC_ORCA] = new web3_js_1.PublicKey("3e1W6Aqcbuk2DfHUwRiRcyzpyYRRjg6yhZZcyEARydUX"),
    _a[types_1.TokenID.SOL_USDT_ORCA] = new web3_js_1.PublicKey("FZthQCuYHhcfiDma7QrX7buDHwrZEd7vL8SjS6LQa3Tx"),
    _a[types_1.TokenID.mSOL_SOL_RAYDIUM] = new web3_js_1.PublicKey("5ijRoAHVgd5T5CNtK5KDRUBZ7Bffb69nktMj5n6ks6m4"),
    _a[types_1.TokenID.ETH_SOL_ORCA] = new web3_js_1.PublicKey("71FymgN2ZUf7VvVTLE8jYEnjP3jSK1Frp2XT1nHs8Hob"),
    _a[types_1.TokenID.BTC_mSOL_ORCA] = new web3_js_1.PublicKey("8nKJ4z9FSw6wrVZKASqBiS9DS1CiNsRnqwCCKVQjqdkB"),
    _a[types_1.TokenID.mSOL_USDC_ORCA] = new web3_js_1.PublicKey("8PSfyiTVwPb6Rr2iZ8F3kNpbg65BCfJM9v8LfB916r44"),
    _a[types_1.TokenID.USTv2_USDC_SABER] = new web3_js_1.PublicKey("USTCmQpbUGj5iTsXdnTYHZupY1QpftDZhLokSVk6UWi"),
    _a[types_1.TokenID.APT_USDC_ORCA] = new web3_js_1.PublicKey("HNrYngS1eoqkjWro9D3Y5Z9sWBDzPNK2tX4rfV2Up177"),
    _a[types_1.TokenID.RAY_USDT_RAYDIUM] = new web3_js_1.PublicKey("C3sT1R3nsw4AVdepvLTLKr5Gvszr7jufyBWUCvy4TUvT"),
    _a[types_1.TokenID.RAY_ETH_RAYDIUM] = new web3_js_1.PublicKey("mjQH33MqZv5aKAbKHi8dG3g3qXeRQqq1GFcXceZkNSr"),
    _a[types_1.TokenID.RAY_SOL_RAYDIUM] = new web3_js_1.PublicKey("89ZKE4aoyfLBe2RuV6jM3JGNhaV18Nxh8eNtjRcndBip"),
    _a[types_1.TokenID.SRM_USDC_RAYDIUM] = new web3_js_1.PublicKey("9XnZd82j34KxNLgQfz29jGbYdxsYznTWRpvZE3SRE7JG"),
    _a[types_1.TokenID.stSOL_USTv2_ORCA] = new web3_js_1.PublicKey('HTZd53fYwYQRyAjiaPsZy9Gf41gobFdqkF4oKe3XLi95'),
    _a[types_1.TokenID.ORCA_whETH_ORCA] = new web3_js_1.PublicKey('GsfyYHkSgC3Ta6aWR9MjB2sxoBrkGGeR2tAwXbpphf3'),
    _a);
// prettier-ignore
exports.DECIMAL_MULT = (_b = {},
    _b[types_1.TokenID.APT] = 1e6,
    _b[types_1.TokenID.BTC] = 1e6,
    _b[types_1.TokenID.ETH] = 1e6,
    _b[types_1.TokenID.SOL] = 1e9,
    _b[types_1.TokenID.mSOL] = 1e9,
    _b[types_1.TokenID.stSOL] = 1e9,
    _b[types_1.TokenID.whETH] = 1e8,
    _b[types_1.TokenID.scnSOL] = 1e9,
    _b[types_1.TokenID.RAY] = 1e6,
    _b[types_1.TokenID.ORCA] = 1e6,
    _b[types_1.TokenID.SBR] = 1e6,
    _b[types_1.TokenID.MERC] = 1e6,
    _b[types_1.TokenID.MNDE] = 1e9,
    _b[types_1.TokenID.FTT] = 1e6,
    _b[types_1.TokenID.SRM] = 1e6,
    _b[types_1.TokenID.wLDO] = 1e8,
    _b[types_1.TokenID.SOCN] = 1e9,
    _b[types_1.TokenID.wLUNA] = 1e6,
    _b[types_1.TokenID.USDT] = 1e6,
    _b[types_1.TokenID.USDC] = 1e6,
    _b[types_1.TokenID.UST] = 1e9,
    _b[types_1.TokenID.USTv2] = 1e6,
    _b[types_1.TokenID.USDT_USDC_SABER] = 1e6,
    _b[types_1.TokenID.mSOL_SOL_SABER] = 1e9,
    _b[types_1.TokenID.stSOL_SOL_SABER] = 1e9,
    _b[types_1.TokenID.USDC_USDT_ORCA] = 1e6,
    _b[types_1.TokenID.UST_USDC_SABER] = 1e9,
    _b[types_1.TokenID.SOL_USDC_RAYDIUM] = 1e9,
    _b[types_1.TokenID.RAY_USDC_RAYDIUM] = 1e6,
    _b[types_1.TokenID.SOL_USDT_RAYDIUM] = 1e9,
    _b[types_1.TokenID.SOL_USDC_ORCA] = 1e6,
    _b[types_1.TokenID.mSOL_SOL_ORCA] = 1e6,
    _b[types_1.TokenID.ORCA_USDC_ORCA] = 1e6,
    _b[types_1.TokenID.ORCA_SOL_ORCA] = 1e6,
    _b[types_1.TokenID.ETH_USDC_ORCA] = 1e6,
    _b[types_1.TokenID.SOL_USDT_ORCA] = 1e6,
    _b[types_1.TokenID.mSOL_SOL_RAYDIUM] = 1e9,
    _b[types_1.TokenID.ETH_SOL_ORCA] = 1e6,
    _b[types_1.TokenID.BTC_mSOL_ORCA] = 1e6,
    _b[types_1.TokenID.mSOL_USDC_ORCA] = 1e6,
    _b[types_1.TokenID.USTv2_USDC_SABER] = 1e6,
    _b[types_1.TokenID.APT_USDC_ORCA] = 1e6,
    _b[types_1.TokenID.RAY_USDT_RAYDIUM] = 1e6,
    _b[types_1.TokenID.RAY_ETH_RAYDIUM] = 1e6,
    _b[types_1.TokenID.RAY_SOL_RAYDIUM] = 1e6,
    _b[types_1.TokenID.SRM_USDC_RAYDIUM] = 1e6,
    _b[types_1.TokenID.stSOL_USTv2_ORCA] = 1e6,
    _b[types_1.TokenID.ORCA_whETH_ORCA] = 1e6,
    _b);
// prettier-ignore
var POOL_IDS = (_c = {},
    _c[types_1.TokenID.BTC] = 0,
    _c[types_1.TokenID.ETH] = 1,
    _c[types_1.TokenID.USDT] = 2,
    _c[types_1.TokenID.USDC] = 3,
    _c[types_1.TokenID.SOL] = 4,
    _c[types_1.TokenID.USDT_USDC_SABER] = 5,
    _c[types_1.TokenID.UST] = 6,
    // pool 7 deprecated
    _c[types_1.TokenID.USDC_USDT_ORCA] = 8,
    _c[types_1.TokenID.SOL_USDC_RAYDIUM] = 9,
    _c[types_1.TokenID.RAY_USDC_RAYDIUM] = 10,
    _c[types_1.TokenID.RAY] = 11,
    _c[types_1.TokenID.mSOL] = 12,
    _c[types_1.TokenID.ORCA] = 13,
    _c[types_1.TokenID.SOL_USDT_RAYDIUM] = 14,
    _c[types_1.TokenID.SOL_USDC_ORCA] = 15,
    _c[types_1.TokenID.mSOL_SOL_ORCA] = 16,
    _c[types_1.TokenID.ORCA_USDC_ORCA] = 17,
    _c[types_1.TokenID.ORCA_SOL_ORCA] = 18,
    _c[types_1.TokenID.ETH_USDC_ORCA] = 19,
    _c[types_1.TokenID.SOL_USDT_ORCA] = 20,
    _c[types_1.TokenID.USTv2] = 21,
    _c[types_1.TokenID.mSOL_SOL_RAYDIUM] = 22,
    _c[types_1.TokenID.ETH_SOL_ORCA] = 23,
    _c[types_1.TokenID.BTC_mSOL_ORCA] = 24,
    _c[types_1.TokenID.mSOL_USDC_ORCA] = 25,
    _c[types_1.TokenID.USTv2_USDC_SABER] = 26,
    _c[types_1.TokenID.APT] = 27,
    _c[types_1.TokenID.APT_USDC_ORCA] = 28,
    _c[types_1.TokenID.FTT] = 29,
    _c[types_1.TokenID.SRM] = 30,
    _c[types_1.TokenID.RAY_USDT_RAYDIUM] = 31,
    _c[types_1.TokenID.RAY_ETH_RAYDIUM] = 32,
    _c[types_1.TokenID.RAY_SOL_RAYDIUM] = 33,
    _c[types_1.TokenID.SRM_USDC_RAYDIUM] = 34,
    _c[types_1.TokenID.stSOL] = 35,
    _c[types_1.TokenID.whETH] = 36,
    _c[types_1.TokenID.scnSOL] = 37,
    _c[types_1.TokenID.stSOL_USTv2_ORCA] = 38,
    _c[types_1.TokenID.ORCA_whETH_ORCA] = 39,
    _c[types_1.TokenID.mSOL_SOL_SABER] = 40,
    _c[types_1.TokenID.stSOL_SOL_SABER] = 41,
    _c);
// prettier-ignore
var LTVS = (_d = {},
    _d[types_1.TokenID.APT] = 0,
    _d[types_1.TokenID.BTC] = 0.85,
    _d[types_1.TokenID.ETH] = 0.85,
    _d[types_1.TokenID.mSOL] = 0.8,
    _d[types_1.TokenID.SOL] = 0.8,
    _d[types_1.TokenID.stSOL] = 0.8,
    _d[types_1.TokenID.whETH] = 0.85,
    _d[types_1.TokenID.scnSOL] = 0.8,
    _d[types_1.TokenID.RAY] = 0.8,
    _d[types_1.TokenID.ORCA] = 0.8,
    _d[types_1.TokenID.FTT] = 0.8,
    _d[types_1.TokenID.SRM] = 0.8,
    _d[types_1.TokenID.USDT] = 0.90,
    _d[types_1.TokenID.USDC] = 0.90,
    _d[types_1.TokenID.UST] = 0.01,
    _d[types_1.TokenID.USTv2] = 0.01,
    _d[types_1.TokenID.USDT_USDC_SABER] = 0.8,
    _d[types_1.TokenID.mSOL_SOL_SABER] = 0.8,
    _d[types_1.TokenID.stSOL_SOL_SABER] = 0.8,
    _d[types_1.TokenID.USDC_USDT_ORCA] = 0.8,
    _d[types_1.TokenID.SOL_USDC_RAYDIUM] = 0.8,
    _d[types_1.TokenID.RAY_USDC_RAYDIUM] = 0.8,
    _d[types_1.TokenID.SOL_USDT_RAYDIUM] = 0.8,
    _d[types_1.TokenID.SOL_USDC_ORCA] = 0.8,
    _d[types_1.TokenID.mSOL_SOL_ORCA] = 0.8,
    _d[types_1.TokenID.ORCA_USDC_ORCA] = 0.8,
    _d[types_1.TokenID.ORCA_SOL_ORCA] = 0.8,
    _d[types_1.TokenID.ETH_USDC_ORCA] = 0.8,
    _d[types_1.TokenID.SOL_USDT_ORCA] = 0.8,
    _d[types_1.TokenID.mSOL_SOL_RAYDIUM] = 0.8,
    _d[types_1.TokenID.ETH_SOL_ORCA] = 0.8,
    _d[types_1.TokenID.BTC_mSOL_ORCA] = 0.8,
    _d[types_1.TokenID.mSOL_USDC_ORCA] = 0.8,
    _d[types_1.TokenID.USTv2_USDC_SABER] = 0.01,
    _d[types_1.TokenID.APT_USDC_ORCA] = 0.4,
    _d[types_1.TokenID.RAY_USDT_RAYDIUM] = 0.8,
    _d[types_1.TokenID.RAY_ETH_RAYDIUM] = 0.8,
    _d[types_1.TokenID.RAY_SOL_RAYDIUM] = 0.8,
    _d[types_1.TokenID.SRM_USDC_RAYDIUM] = 0.8,
    _d[types_1.TokenID.stSOL_USTv2_ORCA] = 0.8,
    _d[types_1.TokenID.ORCA_whETH_ORCA] = 0.8,
    _d);
var InterestRate = /** @class */ (function () {
    function InterestRate(baseRate, kink, kinkRate, fullRate) {
        this.baseRate = baseRate;
        this.kink = kink;
        this.kinkRate = kinkRate;
        this.fullRate = fullRate;
        (0, tiny_invariant_1.default)(baseRate >= 0);
        (0, tiny_invariant_1.default)(kink > 0);
        (0, tiny_invariant_1.default)(kink < 1);
        (0, tiny_invariant_1.default)(kinkRate > 0);
        (0, tiny_invariant_1.default)(fullRate > kinkRate);
        this.multiplier = (kinkRate - baseRate) / kink;
        this.jumpMultiplier = (fullRate - kinkRate) / (1 - kink);
    }
    return InterestRate;
}());
exports.InterestRate = InterestRate;
// prettier-ignore
var INTEREST_RATES = (_e = {},
    _e[types_1.TokenID.BTC] = new InterestRate(0.02, 0.85, 0.20, 2.0),
    _e[types_1.TokenID.ETH] = new InterestRate(0.02, 0.85, 0.20, 2.0),
    _e[types_1.TokenID.SOL] = new InterestRate(0.02, 0.85, 0.20, 2.0),
    _e[types_1.TokenID.mSOL] = new InterestRate(0.02, 0.85, 0.20, 2.0),
    _e[types_1.TokenID.stSOL] = new InterestRate(0.02, 0.85, 0.20, 2.0),
    _e[types_1.TokenID.whETH] = new InterestRate(0.02, 0.85, 0.20, 2.0),
    _e[types_1.TokenID.scnSOL] = new InterestRate(0.02, 0.85, 0.20, 2.0),
    _e[types_1.TokenID.APT] = new InterestRate(0.02, 0.85, 0.20, 2.0),
    _e[types_1.TokenID.RAY] = new InterestRate(0.02, 0.85, 0.20, 2.0),
    _e[types_1.TokenID.ORCA] = new InterestRate(0.02, 0.85, 0.20, 2.0),
    _e[types_1.TokenID.SBR] = new InterestRate(0.02, 0.85, 0.20, 2.0),
    _e[types_1.TokenID.FTT] = new InterestRate(0.02, 0.85, 0.20, 2.0),
    _e[types_1.TokenID.SRM] = new InterestRate(0.02, 0.85, 0.20, 2.0),
    _e[types_1.TokenID.USDT] = new InterestRate(0.01, 0.85, 0.08, 1.0),
    _e[types_1.TokenID.USDC] = new InterestRate(0.01, 0.85, 0.08, 1.0),
    _e[types_1.TokenID.UST] = new InterestRate(0.01, 0.85, 0.20, 30.0),
    _e[types_1.TokenID.USTv2] = new InterestRate(0.00, 0.99, 0.01, 0.02),
    _e);
// prettier-ignore
var FEES = (_f = {},
    _f[types_1.TokenID.BTC] = 0.2,
    _f[types_1.TokenID.ETH] = 0.2,
    _f[types_1.TokenID.mSOL] = 0.2,
    _f[types_1.TokenID.SOL] = 0.2,
    _f[types_1.TokenID.stSOL] = 0.2,
    _f[types_1.TokenID.whETH] = 0.2,
    _f[types_1.TokenID.scnSOL] = 0.2,
    _f[types_1.TokenID.APT] = 0.2,
    _f[types_1.TokenID.RAY] = 0.2,
    _f[types_1.TokenID.ORCA] = 0.2,
    _f[types_1.TokenID.FTT] = 0.2,
    _f[types_1.TokenID.SRM] = 0.2,
    _f[types_1.TokenID.USDT] = 0.2,
    _f[types_1.TokenID.USDC] = 0.2,
    _f[types_1.TokenID.UST] = 0.2,
    _f[types_1.TokenID.USTv2] = 0.2,
    _f[types_1.TokenID.USDT_USDC_SABER] = 0.0,
    _f[types_1.TokenID.mSOL_SOL_SABER] = 0.0,
    _f[types_1.TokenID.stSOL_SOL_SABER] = 0.0,
    _f[types_1.TokenID.USDC_USDT_ORCA] = 0.2,
    _f[types_1.TokenID.SOL_USDC_RAYDIUM] = 0.2,
    _f[types_1.TokenID.RAY_USDC_RAYDIUM] = 0.2,
    _f[types_1.TokenID.SOL_USDT_RAYDIUM] = 0.2,
    _f[types_1.TokenID.SOL_USDC_ORCA] = 0.2,
    _f[types_1.TokenID.mSOL_SOL_ORCA] = 0.2,
    _f[types_1.TokenID.ORCA_USDC_ORCA] = 0.2,
    _f[types_1.TokenID.ORCA_SOL_ORCA] = 0.2,
    _f[types_1.TokenID.ETH_USDC_ORCA] = 0.2,
    _f[types_1.TokenID.SOL_USDT_ORCA] = 0.2,
    _f[types_1.TokenID.mSOL_SOL_RAYDIUM] = 0.0,
    _f[types_1.TokenID.ETH_SOL_ORCA] = 0.2,
    _f[types_1.TokenID.BTC_mSOL_ORCA] = 0.2,
    _f[types_1.TokenID.mSOL_USDC_ORCA] = 0.2,
    _f[types_1.TokenID.USTv2_USDC_SABER] = 0.2,
    _f[types_1.TokenID.APT_USDC_ORCA] = 0.2,
    _f[types_1.TokenID.RAY_USDT_RAYDIUM] = 0.2,
    _f[types_1.TokenID.RAY_ETH_RAYDIUM] = 0.2,
    _f[types_1.TokenID.RAY_SOL_RAYDIUM] = 0.2,
    _f[types_1.TokenID.SRM_USDC_RAYDIUM] = 0.2,
    _f[types_1.TokenID.stSOL_USTv2_ORCA] = 0.2,
    _f[types_1.TokenID.ORCA_whETH_ORCA] = 0.2,
    _f);
// prettier-ignore
exports.CATEGORY = (_g = {},
    _g[types_1.TokenID.BTC] = types_1.TokenCategory.Volatile,
    _g[types_1.TokenID.ETH] = types_1.TokenCategory.Volatile,
    _g[types_1.TokenID.SOL] = types_1.TokenCategory.Volatile,
    _g[types_1.TokenID.mSOL] = types_1.TokenCategory.Volatile,
    _g[types_1.TokenID.stSOL] = types_1.TokenCategory.Volatile,
    _g[types_1.TokenID.whETH] = types_1.TokenCategory.Volatile,
    _g[types_1.TokenID.scnSOL] = types_1.TokenCategory.Volatile,
    _g[types_1.TokenID.APT] = types_1.TokenCategory.Volatile,
    _g[types_1.TokenID.RAY] = types_1.TokenCategory.Volatile,
    _g[types_1.TokenID.ORCA] = types_1.TokenCategory.Volatile,
    _g[types_1.TokenID.SBR] = types_1.TokenCategory.Volatile,
    _g[types_1.TokenID.MERC] = types_1.TokenCategory.Volatile,
    _g[types_1.TokenID.MNDE] = types_1.TokenCategory.Volatile,
    _g[types_1.TokenID.FTT] = types_1.TokenCategory.Volatile,
    _g[types_1.TokenID.SRM] = types_1.TokenCategory.Volatile,
    _g[types_1.TokenID.wLDO] = types_1.TokenCategory.Volatile,
    _g[types_1.TokenID.SOCN] = types_1.TokenCategory.Volatile,
    _g[types_1.TokenID.wLUNA] = types_1.TokenCategory.Volatile,
    _g[types_1.TokenID.USDT] = types_1.TokenCategory.Stable,
    _g[types_1.TokenID.USDC] = types_1.TokenCategory.Stable,
    _g[types_1.TokenID.UST] = types_1.TokenCategory.Stable,
    _g[types_1.TokenID.USTv2] = types_1.TokenCategory.Stable,
    _g[types_1.TokenID.USDT_USDC_SABER] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.mSOL_SOL_SABER] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.stSOL_SOL_SABER] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.USDC_USDT_ORCA] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.UST_USDC_SABER] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.SOL_USDC_RAYDIUM] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.RAY_USDC_RAYDIUM] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.SOL_USDT_RAYDIUM] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.SOL_USDC_ORCA] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.mSOL_SOL_ORCA] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.ORCA_USDC_ORCA] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.ORCA_SOL_ORCA] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.ETH_USDC_ORCA] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.SOL_USDT_ORCA] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.mSOL_SOL_RAYDIUM] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.ETH_SOL_ORCA] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.BTC_mSOL_ORCA] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.mSOL_USDC_ORCA] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.USTv2_USDC_SABER] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.APT_USDC_ORCA] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.RAY_USDT_RAYDIUM] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.RAY_ETH_RAYDIUM] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.RAY_SOL_RAYDIUM] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.SRM_USDC_RAYDIUM] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.stSOL_USTv2_ORCA] = types_1.TokenCategory.Lp,
    _g[types_1.TokenID.ORCA_whETH_ORCA] = types_1.TokenCategory.Lp,
    _g);
// prettier-ignore
exports.LIQUIDATION_DISCOUNT = (_h = {},
    _h[types_1.TokenID.BTC] = 0.04,
    _h[types_1.TokenID.ETH] = 0.04,
    _h[types_1.TokenID.SOL] = 0.04,
    _h[types_1.TokenID.mSOL] = 0.04,
    _h[types_1.TokenID.stSOL] = 0.04,
    _h[types_1.TokenID.whETH] = 0.04,
    _h[types_1.TokenID.scnSOL] = 0.04,
    _h[types_1.TokenID.RAY] = 0.04,
    _h[types_1.TokenID.APT] = 0,
    _h[types_1.TokenID.ORCA] = 0.04,
    _h[types_1.TokenID.FTT] = 0.04,
    _h[types_1.TokenID.SRM] = 0.04,
    _h[types_1.TokenID.USDT] = 0.04,
    _h[types_1.TokenID.USDC] = 0.04,
    _h[types_1.TokenID.UST] = 0.04,
    _h[types_1.TokenID.USTv2] = 0.04,
    _h[types_1.TokenID.USDT_USDC_SABER] = 0,
    _h[types_1.TokenID.mSOL_SOL_SABER] = 0,
    _h[types_1.TokenID.stSOL_SOL_SABER] = 0,
    _h[types_1.TokenID.USDC_USDT_ORCA] = 0,
    _h[types_1.TokenID.UST_USDC_SABER] = 0,
    _h[types_1.TokenID.SOL_USDC_RAYDIUM] = 0,
    _h[types_1.TokenID.RAY_USDC_RAYDIUM] = 0,
    _h[types_1.TokenID.SOL_USDT_RAYDIUM] = 0,
    _h[types_1.TokenID.SOL_USDC_ORCA] = 0,
    _h[types_1.TokenID.mSOL_SOL_ORCA] = 0,
    _h[types_1.TokenID.ORCA_USDC_ORCA] = 0,
    _h[types_1.TokenID.ORCA_SOL_ORCA] = 0,
    _h[types_1.TokenID.ETH_USDC_ORCA] = 0,
    _h[types_1.TokenID.SOL_USDT_ORCA] = 0,
    _h[types_1.TokenID.mSOL_SOL_RAYDIUM] = 0,
    _h[types_1.TokenID.ETH_SOL_ORCA] = 0,
    _h[types_1.TokenID.BTC_mSOL_ORCA] = 0,
    _h[types_1.TokenID.mSOL_USDC_ORCA] = 0,
    _h[types_1.TokenID.USTv2_USDC_SABER] = 0,
    _h[types_1.TokenID.APT_USDC_ORCA] = 0,
    _h[types_1.TokenID.RAY_USDT_RAYDIUM] = 0,
    _h[types_1.TokenID.RAY_ETH_RAYDIUM] = 0,
    _h[types_1.TokenID.RAY_SOL_RAYDIUM] = 0,
    _h[types_1.TokenID.SRM_USDC_RAYDIUM] = 0,
    _h[types_1.TokenID.stSOL_USTv2_ORCA] = 0,
    _h[types_1.TokenID.ORCA_whETH_ORCA] = 0,
    _h);
// prettier-ignore
exports.LP_TO_LR = (_j = {},
    _j[types_1.TokenID.USDT_USDC_SABER] = [types_1.TokenID.USDT, types_1.TokenID.USDC],
    _j[types_1.TokenID.mSOL_SOL_SABER] = [types_1.TokenID.mSOL, types_1.TokenID.SOL],
    _j[types_1.TokenID.stSOL_SOL_SABER] = [types_1.TokenID.stSOL, types_1.TokenID.SOL],
    _j[types_1.TokenID.USDC_USDT_ORCA] = [types_1.TokenID.USDC, types_1.TokenID.USDT],
    _j[types_1.TokenID.UST_USDC_SABER] = [types_1.TokenID.UST, types_1.TokenID.USDC],
    _j[types_1.TokenID.SOL_USDC_RAYDIUM] = [types_1.TokenID.SOL, types_1.TokenID.USDC],
    _j[types_1.TokenID.RAY_USDC_RAYDIUM] = [types_1.TokenID.RAY, types_1.TokenID.USDC],
    _j[types_1.TokenID.SOL_USDT_RAYDIUM] = [types_1.TokenID.SOL, types_1.TokenID.USDT],
    _j[types_1.TokenID.SOL_USDC_ORCA] = [types_1.TokenID.SOL, types_1.TokenID.USDC],
    _j[types_1.TokenID.mSOL_SOL_ORCA] = [types_1.TokenID.mSOL, types_1.TokenID.SOL],
    _j[types_1.TokenID.ORCA_USDC_ORCA] = [types_1.TokenID.ORCA, types_1.TokenID.USDC],
    _j[types_1.TokenID.ORCA_SOL_ORCA] = [types_1.TokenID.ORCA, types_1.TokenID.SOL],
    _j[types_1.TokenID.ETH_USDC_ORCA] = [types_1.TokenID.ETH, types_1.TokenID.USDC],
    _j[types_1.TokenID.SOL_USDT_ORCA] = [types_1.TokenID.SOL, types_1.TokenID.USDT],
    _j[types_1.TokenID.mSOL_SOL_RAYDIUM] = [types_1.TokenID.mSOL, types_1.TokenID.SOL],
    _j[types_1.TokenID.ETH_SOL_ORCA] = [types_1.TokenID.ETH, types_1.TokenID.SOL],
    _j[types_1.TokenID.BTC_mSOL_ORCA] = [types_1.TokenID.BTC, types_1.TokenID.mSOL],
    _j[types_1.TokenID.mSOL_USDC_ORCA] = [types_1.TokenID.mSOL, types_1.TokenID.USDC],
    _j[types_1.TokenID.USTv2_USDC_SABER] = [types_1.TokenID.USTv2, types_1.TokenID.USDC],
    _j[types_1.TokenID.APT_USDC_ORCA] = [types_1.TokenID.APT, types_1.TokenID.USDC],
    _j[types_1.TokenID.RAY_USDT_RAYDIUM] = [types_1.TokenID.RAY, types_1.TokenID.USDT],
    _j[types_1.TokenID.RAY_ETH_RAYDIUM] = [types_1.TokenID.RAY, types_1.TokenID.ETH],
    _j[types_1.TokenID.RAY_SOL_RAYDIUM] = [types_1.TokenID.RAY, types_1.TokenID.SOL],
    _j[types_1.TokenID.SRM_USDC_RAYDIUM] = [types_1.TokenID.SRM, types_1.TokenID.USDC],
    _j[types_1.TokenID.stSOL_USTv2_ORCA] = [types_1.TokenID.stSOL, types_1.TokenID.USTv2],
    _j[types_1.TokenID.ORCA_whETH_ORCA] = [types_1.TokenID.ORCA, types_1.TokenID.whETH],
    _j);
// prettier-ignore
exports.LP_TO_TARGET_SWAP = (_k = {},
    _k[types_1.TokenID.USDT_USDC_SABER] = commands_1.SWAP_SABER,
    _k[types_1.TokenID.mSOL_SOL_SABER] = commands_1.SWAP_SABER,
    _k[types_1.TokenID.stSOL_SOL_SABER] = commands_1.SWAP_SABER,
    _k[types_1.TokenID.USDC_USDT_ORCA] = commands_1.SWAP_ORCA,
    _k[types_1.TokenID.UST_USDC_SABER] = commands_1.SWAP_SABER,
    _k[types_1.TokenID.SOL_USDC_RAYDIUM] = commands_1.SWAP_RAYDIUM,
    _k[types_1.TokenID.RAY_USDC_RAYDIUM] = commands_1.SWAP_RAYDIUM,
    _k[types_1.TokenID.SOL_USDT_RAYDIUM] = commands_1.SWAP_RAYDIUM,
    _k[types_1.TokenID.SOL_USDC_ORCA] = commands_1.SWAP_ORCA,
    _k[types_1.TokenID.mSOL_SOL_ORCA] = commands_1.SWAP_ORCA,
    _k[types_1.TokenID.ORCA_USDC_ORCA] = commands_1.SWAP_ORCA,
    _k[types_1.TokenID.ORCA_SOL_ORCA] = commands_1.SWAP_ORCA,
    _k[types_1.TokenID.ETH_USDC_ORCA] = commands_1.SWAP_ORCA,
    _k[types_1.TokenID.SOL_USDT_ORCA] = commands_1.SWAP_ORCA,
    _k[types_1.TokenID.mSOL_SOL_RAYDIUM] = commands_1.SWAP_RAYDIUM,
    _k[types_1.TokenID.ETH_SOL_ORCA] = commands_1.SWAP_ORCA,
    _k[types_1.TokenID.BTC_mSOL_ORCA] = commands_1.SWAP_ORCA,
    _k[types_1.TokenID.mSOL_USDC_ORCA] = commands_1.SWAP_ORCA,
    _k[types_1.TokenID.USTv2_USDC_SABER] = commands_1.SWAP_SABER,
    _k[types_1.TokenID.APT_USDC_ORCA] = commands_1.SWAP_ORCA,
    _k[types_1.TokenID.RAY_USDT_RAYDIUM] = commands_1.SWAP_RAYDIUM,
    _k[types_1.TokenID.RAY_ETH_RAYDIUM] = commands_1.SWAP_RAYDIUM,
    _k[types_1.TokenID.RAY_SOL_RAYDIUM] = commands_1.SWAP_RAYDIUM,
    _k[types_1.TokenID.SRM_USDC_RAYDIUM] = commands_1.SWAP_RAYDIUM,
    _k[types_1.TokenID.stSOL_USTv2_ORCA] = commands_1.SWAP_ORCA,
    _k[types_1.TokenID.ORCA_whETH_ORCA] = commands_1.SWAP_ORCA,
    _k);
// prettier-ignore
exports.LP_TO_DEX = (_l = {},
    _l[types_1.TokenID.USDT_USDC_SABER] = types_1.Dex.Saber,
    _l[types_1.TokenID.mSOL_SOL_SABER] = types_1.Dex.Saber,
    _l[types_1.TokenID.stSOL_SOL_SABER] = types_1.Dex.Saber,
    _l[types_1.TokenID.USDC_USDT_ORCA] = types_1.Dex.Orca,
    _l[types_1.TokenID.UST_USDC_SABER] = types_1.Dex.Saber,
    _l[types_1.TokenID.SOL_USDC_RAYDIUM] = types_1.Dex.Raydium,
    _l[types_1.TokenID.RAY_USDC_RAYDIUM] = types_1.Dex.Raydium,
    _l[types_1.TokenID.SOL_USDT_RAYDIUM] = types_1.Dex.Raydium,
    _l[types_1.TokenID.SOL_USDC_ORCA] = types_1.Dex.Orca,
    _l[types_1.TokenID.mSOL_SOL_ORCA] = types_1.Dex.Orca,
    _l[types_1.TokenID.ORCA_USDC_ORCA] = types_1.Dex.Orca,
    _l[types_1.TokenID.ORCA_SOL_ORCA] = types_1.Dex.Orca,
    _l[types_1.TokenID.ETH_USDC_ORCA] = types_1.Dex.Orca,
    _l[types_1.TokenID.SOL_USDT_ORCA] = types_1.Dex.Orca,
    _l[types_1.TokenID.mSOL_SOL_RAYDIUM] = types_1.Dex.Raydium,
    _l[types_1.TokenID.ETH_SOL_ORCA] = types_1.Dex.Orca,
    _l[types_1.TokenID.BTC_mSOL_ORCA] = types_1.Dex.Orca,
    _l[types_1.TokenID.mSOL_USDC_ORCA] = types_1.Dex.Orca,
    _l[types_1.TokenID.USTv2_USDC_SABER] = types_1.Dex.Saber,
    _l[types_1.TokenID.APT_USDC_ORCA] = types_1.Dex.Orca,
    _l[types_1.TokenID.RAY_USDT_RAYDIUM] = types_1.Dex.Raydium,
    _l[types_1.TokenID.RAY_ETH_RAYDIUM] = types_1.Dex.Raydium,
    _l[types_1.TokenID.RAY_SOL_RAYDIUM] = types_1.Dex.Raydium,
    _l[types_1.TokenID.SRM_USDC_RAYDIUM] = types_1.Dex.Raydium,
    _l[types_1.TokenID.stSOL_USTv2_ORCA] = types_1.Dex.Orca,
    _l[types_1.TokenID.ORCA_whETH_ORCA] = types_1.Dex.Orca,
    _l);
// prettier-ignore
exports.LP_TO_NEED_2ND_STAKE = (_m = {},
    _m[types_1.TokenID.USDT_USDC_SABER] = false,
    _m[types_1.TokenID.mSOL_SOL_SABER] = false,
    _m[types_1.TokenID.stSOL_SOL_SABER] = false,
    _m[types_1.TokenID.USDC_USDT_ORCA] = false,
    _m[types_1.TokenID.UST_USDC_SABER] = false,
    _m[types_1.TokenID.SOL_USDC_RAYDIUM] = true,
    _m[types_1.TokenID.RAY_USDC_RAYDIUM] = true,
    _m[types_1.TokenID.SOL_USDT_RAYDIUM] = true,
    _m[types_1.TokenID.SOL_USDC_ORCA] = false,
    _m[types_1.TokenID.mSOL_SOL_ORCA] = true,
    _m[types_1.TokenID.ORCA_USDC_ORCA] = false,
    _m[types_1.TokenID.ORCA_SOL_ORCA] = false,
    _m[types_1.TokenID.ETH_USDC_ORCA] = false,
    _m[types_1.TokenID.SOL_USDT_ORCA] = false,
    _m[types_1.TokenID.mSOL_SOL_RAYDIUM] = false,
    _m[types_1.TokenID.ETH_SOL_ORCA] = false,
    _m[types_1.TokenID.BTC_mSOL_ORCA] = true,
    _m[types_1.TokenID.mSOL_USDC_ORCA] = true,
    _m[types_1.TokenID.USTv2_USDC_SABER] = false,
    _m[types_1.TokenID.APT_USDC_ORCA] = false,
    _m[types_1.TokenID.RAY_USDT_RAYDIUM] = true,
    _m[types_1.TokenID.RAY_ETH_RAYDIUM] = true,
    _m[types_1.TokenID.RAY_SOL_RAYDIUM] = true,
    _m[types_1.TokenID.SRM_USDC_RAYDIUM] = true,
    _m[types_1.TokenID.stSOL_USTv2_ORCA] = false,
    _m[types_1.TokenID.ORCA_whETH_ORCA] = false,
    _m);
// meta-info used by Addresses to compute keys needed when interacting with various Solana swaps
// check out Addresses to see how they are used
exports.SWAP_METAS = (_o = {},
    _o[commands_1.SWAP_SABER] = {
        stake_program: new web3_js_1.PublicKey('QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB'),
        deposit_program: new web3_js_1.PublicKey('SSwpkEEcbUqx4vtoEByFjSkhKdCT862DNVb52nZg1UZ'),
        redeem_program: new web3_js_1.PublicKey('RDM23yr8pr1kEAmhnFpaabPny6C9UVcEcok3Py5v86X'),
    },
    _o[commands_1.SWAP_ORCA] = {
        depositProgramPubkey: new web3_js_1.PublicKey('9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP'),
        farmProgramPubkey: new web3_js_1.PublicKey('82yxjeMsvaURa4MbZZ7WZZHfobirZYkH1zF8fmeGtyaQ'),
    },
    _o[commands_1.SWAP_RAYDIUM] = {
        depositProgramPubkey: new web3_js_1.PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8'),
        stakeProgramPubkey: new web3_js_1.PublicKey('EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q'),
        stakeProgramV5Pubkey: new web3_js_1.PublicKey('9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z'),
    },
    _o);
var isPublicOrAlpha = function (ownerKey) {
    var isPublic = ownerKey.toString() === '7Ne6h2w3LpTNTa7CNYcUs7UkjeJT3oW7jcrXWfVScTXW';
    var isAlpha = ownerKey.toString() === 'GipxmFXdiJaSevu6StymY2aphKVxgYmAmf2dT3fTEASc';
    if (!isAlpha && !isPublic) {
        throw new Error("Unknown ownerKey: " + ownerKey.toString());
    }
    return { isPublic: isPublic, isAlpha: isAlpha };
};
// prettier-ignore
exports.DUAL_REWARD_CONFIGS = (_p = {},
    _p[types_1.TokenID.mSOL] = { tokenId: types_1.TokenID.MNDE, multiplier: new decimal_js_1.Decimal(0.195) },
    _p[types_1.TokenID.stSOL] = { tokenId: types_1.TokenID.wLDO, multiplier: new decimal_js_1.Decimal(10.0 / 250.0) },
    _p[types_1.TokenID.scnSOL] = { tokenId: types_1.TokenID.SOCN, multiplier: new decimal_js_1.Decimal(65.0 / 125.0) },
    _p[types_1.TokenID.USTv2] = { tokenId: types_1.TokenID.wLUNA, multiplier: new decimal_js_1.Decimal(1.1 / 250.0) },
    _p);
// prettier-ignore
var SaberLpSwapInfo = /** @class */ (function () {
    function SaberLpSwapInfo(args) {
        this.swap = args.swap;
        this.swapAuthority = args.swapAuthority;
        this.tokenAVault = args.tokenAVault;
        this.tokenBVault = args.tokenBVault;
        this.tokenAfees = args.tokenAfees;
        this.tokenBfees = args.tokenBfees;
        //
        this.quarry = args.quarry;
        this.rewarder = args.rewarder;
        this.mint = args.mint;
    }
    SaberLpSwapInfo.prototype.getMinerKey = function (ownerKey) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, key, bump;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, web3_js_1.PublicKey.findProgramAddress([Buffer.from('Miner'), this.quarry.toBuffer(), ownerKey.toBuffer()], exports.SWAP_METAS[commands_1.SWAP_SABER].stake_program)];
                    case 1:
                        _a = _b.sent(), key = _a[0], bump = _a[1];
                        return [2 /*return*/, [key, bump]];
                }
            });
        });
    };
    SaberLpSwapInfo.prototype.getMinerVault = function (ownerKey) {
        return __awaiter(this, void 0, void 0, function () {
            var minerKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getMinerKey(ownerKey)];
                    case 1:
                        minerKey = (_a.sent())[0];
                        return [4 /*yield*/, spl_token_1.Token.getAssociatedTokenAddress(spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID, spl_token_1.TOKEN_PROGRAM_ID, this.mint, minerKey, true)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    // prettier-ignore
    SaberLpSwapInfo.prototype.getLpDepositKeys = function (_ownerKey) {
        return __awaiter(this, void 0, void 0, function () {
            var smeta;
            return __generator(this, function (_a) {
                smeta = exports.SWAP_METAS[commands_1.SWAP_SABER];
                return [2 /*return*/, [
                        { pubkey: smeta.deposit_program, isSigner: false, isWritable: false },
                        { pubkey: this.swap, isSigner: false, isWritable: false },
                        { pubkey: this.swapAuthority, isSigner: false, isWritable: false },
                        { pubkey: this.tokenAVault, isSigner: false, isWritable: true },
                        { pubkey: this.tokenBVault, isSigner: false, isWritable: true },
                        { pubkey: this.mint, isSigner: false, isWritable: true },
                        { pubkey: web3_js_1.SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },
                    ]];
            });
        });
    };
    // prettier-ignore
    SaberLpSwapInfo.prototype.getLpWithdrawKeys = function () {
        return __awaiter(this, void 0, void 0, function () {
            var smeta;
            return __generator(this, function (_a) {
                smeta = exports.SWAP_METAS[commands_1.SWAP_SABER];
                return [2 /*return*/, [
                        { pubkey: smeta.deposit_program, isSigner: false, isWritable: false },
                        { pubkey: this.swap, isSigner: false, isWritable: false },
                        { pubkey: this.swapAuthority, isSigner: false, isWritable: false },
                        { pubkey: this.mint, isSigner: false, isWritable: true },
                        { pubkey: this.tokenAVault, isSigner: false, isWritable: true },
                        { pubkey: this.tokenBVault, isSigner: false, isWritable: true },
                        { pubkey: this.tokenAfees, isSigner: false, isWritable: true },
                        { pubkey: this.tokenBfees, isSigner: false, isWritable: true },
                        { pubkey: web3_js_1.SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },
                    ]];
            });
        });
    };
    // prettier-ignore
    SaberLpSwapInfo.prototype.getLpStakeKeys = function (ownerKey) {
        return __awaiter(this, void 0, void 0, function () {
            var smeta, _a, minerKey, _minerBump, minerVault;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        smeta = exports.SWAP_METAS[commands_1.SWAP_SABER];
                        return [4 /*yield*/, this.getMinerKey(ownerKey)];
                    case 1:
                        _a = _b.sent(), minerKey = _a[0], _minerBump = _a[1];
                        return [4 /*yield*/, this.getMinerVault(ownerKey)];
                    case 2:
                        minerVault = _b.sent();
                        return [2 /*return*/, [
                                { pubkey: smeta.stake_program, isSigner: false, isWritable: false },
                                { pubkey: minerKey, isSigner: false, isWritable: true },
                                { pubkey: this.quarry, isSigner: false, isWritable: true },
                                { pubkey: minerVault, isSigner: false, isWritable: true },
                                { pubkey: spl_token_1.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
                                { pubkey: this.rewarder, isSigner: false, isWritable: false },
                                { pubkey: web3_js_1.SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },
                            ]];
                }
            });
        });
    };
    SaberLpSwapInfo.prototype.getLRVaults = function () {
        // only USDT_USDC_SABER has this inverted order
        var isUSDT_USDC = this.mint.toString() === exports.MINTS.USDT_USDC_SABER.toString();
        if (isUSDT_USDC) {
            return [this.tokenBVault, this.tokenAVault];
        }
        else {
            return [this.tokenAVault, this.tokenBVault];
        }
    };
    return SaberLpSwapInfo;
}());
exports.SaberLpSwapInfo = SaberLpSwapInfo;
// prettier-ignore
var OrcaLpSwapInfo = /** @class */ (function () {
    function OrcaLpSwapInfo(args) {
        this.isDoubleDipSupported = false;
        this.lpMintPubkey = args.lpMintPubkey;
        this.swapPubkey = args.swapPubkey;
        this.swapAuthority = args.swapAuthority;
        this.swapTokenAAccount = args.swapTokenAAccount;
        this.swapTokenBAccount = args.swapTokenBAccount;
        this.globalLpVault = args.globalLpVault;
        this.farmTokenMint = args.farmTokenMint;
        this.globalFarmState = args.globalFarmState;
        this.globalRewardTokenVault = args.globalRewardTokenVault;
        this.rewardTokenAuthority = args.rewardTokenAuthority;
        this.feeAccount = args.feeAccount;
        this.publicRewardTokAcc = args.publicRewardTokAcc;
        this.alphaRewardTokAcc = args.alphaRewardTokAcc;
        this.isDoubleDipSupported = !!args.isDoubleDipSupported;
        this.globalLp3Vault = args.globalLp3Vault;
        this.farmTokenLp3Mint = args.farmTokenLp3Mint;
        this.globalDoubleDipFarmState = args.globalDoubleDipFarmState;
        this.globalDoubleDipRewardTokenVault = args.globalDoubleDipRewardTokenVault;
        this.doubleDipRewardTokenAuthority = args.doubleDipRewardTokenAuthority;
        this.publicDoubleDipRewardAcc = args.publicDoubleDipRewardAcc;
        this.alphaDoubleDipRewardAcc = args.alphaDoubleDipRewardAcc;
        this.doubleDipRewardMint = args.doubleDipRewardMint;
        if (this.isDoubleDipSupported) {
            (0, tiny_invariant_1.default)(this.globalLp3Vault &&
                this.farmTokenLp3Mint &&
                this.globalDoubleDipFarmState &&
                this.globalDoubleDipRewardTokenVault &&
                this.doubleDipRewardTokenAuthority &&
                this.publicDoubleDipRewardAcc &&
                this.alphaDoubleDipRewardAcc &&
                this.doubleDipRewardMint);
        }
    }
    OrcaLpSwapInfo.prototype.getPdaKeys = function (ownerKey) {
        return __awaiter(this, void 0, void 0, function () {
            var smeta, pdaRewardTokenAccount, isPublic, pdaFarmTokenAccount, pdaFarmState;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        smeta = exports.SWAP_METAS[commands_1.SWAP_ORCA];
                        isPublic = isPublicOrAlpha(ownerKey).isPublic;
                        if (isPublic) {
                            pdaRewardTokenAccount = this.publicRewardTokAcc;
                        }
                        else {
                            pdaRewardTokenAccount = this.alphaRewardTokAcc;
                        }
                        return [4 /*yield*/, (0, __1.getAssociatedTokenPubkey)(ownerKey, this.farmTokenMint, true)];
                    case 1:
                        pdaFarmTokenAccount = _a.sent();
                        return [4 /*yield*/, web3_js_1.PublicKey.findProgramAddress([this.globalFarmState.toBuffer(), ownerKey.toBuffer(), spl_token_1.TOKEN_PROGRAM_ID.toBuffer()], smeta.farmProgramPubkey)];
                    case 2:
                        pdaFarmState = (_a.sent())[0];
                        return [2 /*return*/, {
                                pdaFarmTokenAccount: pdaFarmTokenAccount,
                                pdaRewardTokenAccount: pdaRewardTokenAccount,
                                pdaFarmState: pdaFarmState,
                            }];
                }
            });
        });
    };
    OrcaLpSwapInfo.prototype.getPdaDoubleDipKeys = function (ownerKey) {
        return __awaiter(this, void 0, void 0, function () {
            var smeta, pdaDoubleDipRewardTokenAccount, isPublic, pdaDoubleDipFarmTokenAccount, pdaDoubleDipFarmState;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isDoubleDipSupported) {
                            throw new Error('Double dip not supported for getting pda keys');
                        }
                        smeta = exports.SWAP_METAS[commands_1.SWAP_ORCA];
                        isPublic = isPublicOrAlpha(ownerKey).isPublic;
                        if (isPublic) {
                            pdaDoubleDipRewardTokenAccount = this.publicDoubleDipRewardAcc;
                        }
                        else {
                            pdaDoubleDipRewardTokenAccount = this.alphaDoubleDipRewardAcc;
                        }
                        return [4 /*yield*/, (0, __1.getAssociatedTokenPubkey)(ownerKey, this.farmTokenLp3Mint, true)];
                    case 1:
                        pdaDoubleDipFarmTokenAccount = _a.sent();
                        return [4 /*yield*/, web3_js_1.PublicKey.findProgramAddress([
                                this.globalDoubleDipFarmState.toBuffer(),
                                ownerKey.toBuffer(),
                                spl_token_1.TOKEN_PROGRAM_ID.toBuffer(),
                            ], smeta.farmProgramPubkey)];
                    case 2:
                        pdaDoubleDipFarmState = (_a.sent())[0];
                        return [2 /*return*/, {
                                pdaDoubleDipFarmTokenAccount: pdaDoubleDipFarmTokenAccount,
                                pdaDoubleDipRewardTokenAccount: pdaDoubleDipRewardTokenAccount,
                                pdaDoubleDipFarmState: pdaDoubleDipFarmState,
                            }];
                }
            });
        });
    };
    // prettier-ignore
    OrcaLpSwapInfo.prototype.getLpDepositKeys = function (_ownerKey) {
        return __awaiter(this, void 0, void 0, function () {
            var smeta;
            return __generator(this, function (_a) {
                smeta = exports.SWAP_METAS[commands_1.SWAP_ORCA];
                return [2 /*return*/, [
                        { pubkey: smeta.depositProgramPubkey, isSigner: false, isWritable: false },
                        { pubkey: this.swapPubkey, isSigner: false, isWritable: false },
                        { pubkey: this.swapAuthority, isSigner: false, isWritable: false },
                        { pubkey: this.swapTokenAAccount, isSigner: false, isWritable: true },
                        { pubkey: this.swapTokenBAccount, isSigner: false, isWritable: true },
                        { pubkey: this.lpMintPubkey, isSigner: false, isWritable: true }
                    ]];
            });
        });
    };
    // prettier-ignore
    OrcaLpSwapInfo.prototype.getLpWithdrawKeys = function (_ownerKey) {
        return __awaiter(this, void 0, void 0, function () {
            var smeta;
            return __generator(this, function (_a) {
                smeta = exports.SWAP_METAS[commands_1.SWAP_ORCA];
                return [2 /*return*/, [
                        { pubkey: smeta.depositProgramPubkey, isSigner: false, isWritable: false },
                        { pubkey: this.swapPubkey, isSigner: false, isWritable: false },
                        { pubkey: this.swapAuthority, isSigner: false, isWritable: false },
                        { pubkey: this.lpMintPubkey, isSigner: false, isWritable: true },
                        { pubkey: this.swapTokenAAccount, isSigner: false, isWritable: true },
                        { pubkey: this.swapTokenBAccount, isSigner: false, isWritable: true },
                        { pubkey: this.feeAccount, isSigner: false, isWritable: true }
                    ]];
            });
        });
    };
    OrcaLpSwapInfo.prototype.getLpStakeKeys = function (ownerKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        /*
                        For double-dipped transactions, we have removed staking instruction out of the corresponding lp-create and lp-redeem
                        transaction, and all into the second stake operation
                        */
                        if (this.isDoubleDipSupported) {
                            return [2 /*return*/, []];
                        }
                        return [4 /*yield*/, this.getFirstStakeKeys(ownerKey)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    // prettier-ignore
    OrcaLpSwapInfo.prototype.getFirstStakeKeys = function (ownerKey) {
        return __awaiter(this, void 0, void 0, function () {
            var smeta, pdaKeys;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        smeta = exports.SWAP_METAS[commands_1.SWAP_ORCA];
                        return [4 /*yield*/, this.getPdaKeys(ownerKey)];
                    case 1:
                        pdaKeys = _a.sent();
                        return [2 /*return*/, [
                                { pubkey: smeta.farmProgramPubkey, isSigner: false, isWritable: false },
                                { pubkey: this.globalLpVault, isSigner: false, isWritable: true },
                                { pubkey: this.farmTokenMint, isSigner: false, isWritable: true },
                                { pubkey: pdaKeys.pdaFarmTokenAccount, isSigner: false, isWritable: true },
                                { pubkey: this.globalFarmState, isSigner: false, isWritable: true },
                                { pubkey: pdaKeys.pdaFarmState, isSigner: false, isWritable: true },
                                { pubkey: this.globalRewardTokenVault, isSigner: false, isWritable: true },
                                { pubkey: pdaKeys.pdaRewardTokenAccount, isSigner: false, isWritable: true },
                                { pubkey: this.rewardTokenAuthority, isSigner: false, isWritable: false },
                                { pubkey: spl_token_1.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
                            ]];
                }
            });
        });
    };
    OrcaLpSwapInfo.prototype.getSecondStakeKeys = function (ownerKey) {
        return __awaiter(this, void 0, void 0, function () {
            var smeta, pdaKeys;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        smeta = exports.SWAP_METAS[commands_1.SWAP_ORCA];
                        return [4 /*yield*/, this.getPdaDoubleDipKeys(ownerKey)];
                    case 1:
                        pdaKeys = _a.sent();
                        return [2 /*return*/, [
                                { pubkey: smeta.farmProgramPubkey, isSigner: false, isWritable: false },
                                { pubkey: this.globalLp3Vault, isSigner: false, isWritable: true },
                                { pubkey: this.farmTokenLp3Mint, isSigner: false, isWritable: true },
                                { pubkey: pdaKeys.pdaDoubleDipFarmTokenAccount, isSigner: false, isWritable: true },
                                { pubkey: this.globalDoubleDipFarmState, isSigner: false, isWritable: true },
                                { pubkey: pdaKeys.pdaDoubleDipFarmState, isSigner: false, isWritable: true },
                                { pubkey: this.globalDoubleDipRewardTokenVault, isSigner: false, isWritable: true },
                                { pubkey: pdaKeys.pdaDoubleDipRewardTokenAccount, isSigner: false, isWritable: true },
                                { pubkey: this.doubleDipRewardTokenAuthority, isSigner: false, isWritable: false },
                                { pubkey: spl_token_1.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
                            ]];
                }
            });
        });
    };
    OrcaLpSwapInfo.prototype.getLRVaults = function () {
        return [this.swapTokenAAccount, this.swapTokenBAccount];
    };
    return OrcaLpSwapInfo;
}());
exports.OrcaLpSwapInfo = OrcaLpSwapInfo;
var RaydiumLpSwapInfo = /** @class */ (function () {
    function RaydiumLpSwapInfo(args) {
        this.lpMintPubkey = args.lpMintPubkey;
        this.ammIdPubkey = args.ammIdPubkey;
        this.ammAuthPubkey = args.ammAuthPubkey;
        this.ammOpenOrdersPubkey = args.ammOpenOrdersPubkey;
        this.ammTargetOrderPubkey = args.ammTargetOrderPubkey;
        this.poolCoinTokenPubkey = args.poolCoinTokenPubkey;
        this.poolPcTokenPubkey = args.poolPcTokenPubkey;
        this.poolWithdrawQueue = args.poolWithdrawQueue;
        this.poolTempLpTokenAccount = args.poolTempLpTokenAccount;
        this.serumProgramId = args.serumProgramId;
        this.serumMarketPubkey = args.serumMarketPubkey;
        this.serumCoinVaultAccount = args.serumCoinVaultAccount;
        this.serumPcVaultAccount = args.serumPcVaultAccount;
        this.serumVaultSigner = args.serumVaultSigner;
        this.rewardAccounts = args.rewardAccounts;
        this.stakeKeys = args.stakeKeys;
        this.stakeProgram = args.stakeProgram || exports.SWAP_METAS[commands_1.SWAP_RAYDIUM].stakeProgramV5Pubkey;
        this.serumEventQueueAccount = args.serumEventQueueAccount;
        this.serumBidsAccount = args.serumBidsAccount;
        this.serumAsksAccount = args.serumAsksAccount;
    }
    // prettier-ignore
    RaydiumLpSwapInfo.prototype.getLpDepositKeys = function (_ownerKey) {
        return __awaiter(this, void 0, void 0, function () {
            var smeta;
            return __generator(this, function (_a) {
                smeta = exports.SWAP_METAS[commands_1.SWAP_RAYDIUM];
                return [2 /*return*/, [
                        { pubkey: smeta.depositProgramPubkey, isSigner: false, isWritable: false },
                        { pubkey: this.ammIdPubkey, isSigner: false, isWritable: true },
                        { pubkey: this.ammAuthPubkey, isSigner: false, isWritable: false },
                        { pubkey: this.ammOpenOrdersPubkey, isSigner: false, isWritable: false },
                        { pubkey: this.ammTargetOrderPubkey, isSigner: false, isWritable: true },
                        { pubkey: this.lpMintPubkey, isSigner: false, isWritable: true },
                        { pubkey: this.poolCoinTokenPubkey, isSigner: false, isWritable: true },
                        { pubkey: this.poolPcTokenPubkey, isSigner: false, isWritable: true },
                        { pubkey: this.serumMarketPubkey, isSigner: false, isWritable: false },
                    ]];
            });
        });
    };
    // prettier-ignore
    RaydiumLpSwapInfo.prototype.getLpWithdrawKeys = function (_ownerKey) {
        return __awaiter(this, void 0, void 0, function () {
            var smeta;
            return __generator(this, function (_a) {
                smeta = exports.SWAP_METAS[commands_1.SWAP_RAYDIUM];
                return [2 /*return*/, __spreadArray([
                        { pubkey: smeta.depositProgramPubkey, isSigner: false, isWritable: false },
                        { pubkey: this.ammIdPubkey, isSigner: false, isWritable: true },
                        { pubkey: this.ammAuthPubkey, isSigner: false, isWritable: false },
                        { pubkey: this.ammOpenOrdersPubkey, isSigner: false, isWritable: true },
                        { pubkey: this.ammTargetOrderPubkey, isSigner: false, isWritable: true },
                        { pubkey: this.lpMintPubkey, isSigner: false, isWritable: true },
                        { pubkey: this.poolCoinTokenPubkey, isSigner: false, isWritable: true },
                        { pubkey: this.poolPcTokenPubkey, isSigner: false, isWritable: true },
                        { pubkey: this.poolWithdrawQueue, isSigner: false, isWritable: true },
                        { pubkey: this.poolTempLpTokenAccount, isSigner: false, isWritable: true },
                        { pubkey: this.serumProgramId, isSigner: false, isWritable: false },
                        { pubkey: this.serumMarketPubkey, isSigner: false, isWritable: true },
                        { pubkey: this.serumCoinVaultAccount, isSigner: false, isWritable: true },
                        { pubkey: this.serumPcVaultAccount, isSigner: false, isWritable: true },
                        { pubkey: this.serumVaultSigner, isSigner: false, isWritable: false }
                    ], (this.serumEventQueueAccount ? [
                        { pubkey: this.serumEventQueueAccount, isSigner: false, isWritable: true },
                        { pubkey: this.serumBidsAccount, isSigner: false, isWritable: true },
                        { pubkey: this.serumAsksAccount, isSigner: false, isWritable: true },
                    ] : []), true)];
            });
        });
    };
    RaydiumLpSwapInfo.prototype.getLpStakeKeys = function (ownerKey) {
        return __awaiter(this, void 0, void 0, function () {
            var stkeys, userLedger, isPublic, userRewardFirstAccount, keys, i, userRewardAccount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.stakeKeys) return [3 /*break*/, 1];
                        return [2 /*return*/, []];
                    case 1:
                        (0, tiny_invariant_1.default)(this.rewardAccounts);
                        stkeys = this.stakeKeys;
                        return [4 /*yield*/, this.getAssociatedLedger(ownerKey)];
                    case 2:
                        userLedger = _a.sent();
                        console.log("user ledger: " + userLedger.toBase58());
                        isPublic = isPublicOrAlpha(ownerKey).isPublic;
                        userRewardFirstAccount = isPublic
                            ? this.rewardAccounts[0].userRewardPublicAccountPubkey
                            : this.rewardAccounts[0].userRewardAlphaAccountPubkey;
                        keys = [
                            { pubkey: this.stakeProgram, isSigner: false, isWritable: false, },
                            { pubkey: stkeys.poolIdPubkey, isSigner: false, isWritable: true },
                            { pubkey: stkeys.poolAuthorityPubkey, isSigner: false, isWritable: false },
                            { pubkey: userLedger, isSigner: false, isWritable: true },
                            { pubkey: stkeys.poolLPVault, isSigner: false, isWritable: true },
                            { pubkey: userRewardFirstAccount, isSigner: false, isWritable: true },
                            { pubkey: this.rewardAccounts[0].rewardVault, isSigner: false, isWritable: true },
                            // Below account are not listed on solscan.io but explorer.solana.com, so you should better check both sites.
                            { pubkey: web3_js_1.SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },
                            { pubkey: spl_token_1.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
                        ];
                        if (this.rewardAccounts.length > 1) {
                            for (i = 1; i < this.rewardAccounts.length; i++) {
                                userRewardAccount = isPublic
                                    ? this.rewardAccounts[i].userRewardPublicAccountPubkey
                                    : this.rewardAccounts[i].userRewardAlphaAccountPubkey;
                                keys.push.apply(keys, [
                                    { pubkey: userRewardAccount, isSigner: false, isWritable: true },
                                    { pubkey: this.rewardAccounts[i].rewardVault, isSigner: false, isWritable: true },
                                ]);
                            }
                        }
                        return [2 /*return*/, keys];
                }
            });
        });
    };
    RaydiumLpSwapInfo.prototype.getUserRewardAccountsToClaim = function (ownerKey) {
        return __awaiter(this, void 0, void 0, function () {
            var isPublic;
            return __generator(this, function (_a) {
                isPublic = isPublicOrAlpha(ownerKey).isPublic;
                return [2 /*return*/, this.rewardAccounts.reduce(function (pre, cur) {
                        pre[cur.rewardToken] = isPublic
                            ? cur.userRewardPublicAccountPubkey
                            : cur.userRewardAlphaAccountPubkey;
                        return pre;
                    }, {})];
            });
        });
    };
    RaydiumLpSwapInfo.prototype.getLRVaults = function () {
        return [this.poolCoinTokenPubkey, this.poolPcTokenPubkey];
    };
    RaydiumLpSwapInfo.prototype.getAssociatedLedger = function (owner) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var poolId, publicKey;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        poolId = (_a = this.stakeKeys) === null || _a === void 0 ? void 0 : _a.poolIdPubkey;
                        (0, tiny_invariant_1.default)(poolId);
                        return [4 /*yield*/, web3_js_1.PublicKey.findProgramAddress([poolId.toBuffer(), owner.toBuffer(), Buffer.from('staker_info_v2_associated_seed', 'utf-8')], this.stakeProgram)];
                    case 1:
                        publicKey = (_b.sent())[0];
                        return [2 /*return*/, publicKey];
                }
            });
        });
    };
    return RaydiumLpSwapInfo;
}());
exports.RaydiumLpSwapInfo = RaydiumLpSwapInfo;
// prettier-ignore
exports.SABER_LP_METAS = (_q = {},
    _q[types_1.TokenID.USDT_USDC_SABER] = new SaberLpSwapInfo({
        swap: new web3_js_1.PublicKey("YAkoNb6HKmSxQN9L8hiBE5tPJRsniSSMzND1boHmZxe"),
        swapAuthority: new web3_js_1.PublicKey("5C1k9yV7y4CjMnKv8eGYDgWND8P89Pdfj79Trk2qmfGo"),
        tokenAVault: new web3_js_1.PublicKey("CfWX7o2TswwbxusJ4hCaPobu2jLCb1hfXuXJQjVq3jQF"),
        tokenBVault: new web3_js_1.PublicKey("EnTrdMMpdhugeH6Ban6gYZWXughWxKtVGfCwFn78ZmY3"),
        tokenAfees: new web3_js_1.PublicKey("XZuQG7CQrAA6y6tHM9CLrDjDUWwuUU2SBoV7pLaGDQT"),
        tokenBfees: new web3_js_1.PublicKey("63aJYYuZddSnCGyE8FNrCVQWnXhjh6CQSRwcDeSMhdVC"),
        // for stake/unstake
        quarry: new web3_js_1.PublicKey("Hs1X5YtXwZACueUtS9azZyXFDWVxAMLvm3tttubpK7ph"),
        rewarder: new web3_js_1.PublicKey("rXhAofQCT7NN9TUqigyEAUzV1uLL4boeD8CRkNBSkYk"),
        mint: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.USDT_USDC_SABER]),
    }),
    _q[types_1.TokenID.mSOL_SOL_SABER] = new SaberLpSwapInfo({
        swap: new web3_js_1.PublicKey("Lee1XZJfJ9Hm2K1qTyeCz1LXNc1YBZaKZszvNY4KCDw"),
        swapAuthority: new web3_js_1.PublicKey("2Sj4MZvmLhud4uRmGHJvDxq612nmF4JJsU1R4ZjNNGMS"),
        tokenAVault: new web3_js_1.PublicKey("9DgFSWkPDGijNKcLGbr3p5xoJbHsPgXUTr6QvGBJ5vGN"),
        tokenBVault: new web3_js_1.PublicKey("2hNHZg7XBhuhHVZ3JDEi4buq2fPQwuWBdQ9xkH7t1GQX"),
        tokenAfees: new web3_js_1.PublicKey("HzZRDMiJSqS5oxzfu17c35DChnkx58LZtas16Pgmuunn"),
        tokenBfees: new web3_js_1.PublicKey("3oebZVvPqba2egfdcbNXa1uS13SfSebxMaNVE82FMk7R"),
        // for stake/unstake
        quarry: new web3_js_1.PublicKey("7193EeecxsPPv9TMoQATTN8i1eTqEUSNU8aDLuFCQy68"),
        rewarder: new web3_js_1.PublicKey("rXhAofQCT7NN9TUqigyEAUzV1uLL4boeD8CRkNBSkYk"),
        mint: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.mSOL_SOL_SABER]),
    }),
    _q[types_1.TokenID.stSOL_SOL_SABER] = new SaberLpSwapInfo({
        swap: new web3_js_1.PublicKey("Lid8SLUxQ9RmF7XMqUA8c24RitTwzja8VSKngJxRcUa"),
        swapAuthority: new web3_js_1.PublicKey("8eyi347MTDeH5F6eVv2qjPxVnU685FFZLDGcj5QWHZ6y"),
        tokenAVault: new web3_js_1.PublicKey("4PgzyzLtds9bKZ2to9PMnKqJzKEUpjvNUaeN23phegax"),
        tokenBVault: new web3_js_1.PublicKey("AtymwxoVN9peZo7EXTcDz9jKVc4vRmisJKKrNfe3ewBa"),
        tokenAfees: new web3_js_1.PublicKey("2AbLYRQa7PV6gG6XgMjaey18RtPh85sXFmMmP4HsDdQK"),
        tokenBfees: new web3_js_1.PublicKey("Cv3YNq8iY1ttMS3iDgwBxd7QxnMC2pwcXUomtR7CTD8W"),
        // for stake/unstake
        quarry: new web3_js_1.PublicKey("2isVhcqVVpsAeZ94d1DGVErCQ7uZQNSJ85xikN8awHeC"),
        rewarder: new web3_js_1.PublicKey("rXhAofQCT7NN9TUqigyEAUzV1uLL4boeD8CRkNBSkYk"),
        mint: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.stSOL_SOL_SABER]),
    }),
    _q[types_1.TokenID.USTv2_USDC_SABER] = new SaberLpSwapInfo({
        swap: new web3_js_1.PublicKey("KwnjUuZhTMTSGAaavkLEmSyfobY16JNH4poL9oeeEvE"),
        swapAuthority: new web3_js_1.PublicKey("9osV5a7FXEjuMujxZJGBRXVAyQ5fJfBFNkyAf6fSz9kw"),
        tokenAVault: new web3_js_1.PublicKey("J63v6qEZmQpDqCD8bd4PXu2Pq5ZbyXrFcSa3Xt1HdAPQ"),
        tokenBVault: new web3_js_1.PublicKey("BnKQtTdLw9qPCDgZkWX3sURkBAoKCUYL1yahh6Mw7mRK"),
        tokenAfees: new web3_js_1.PublicKey("BYgyVxdrGa3XNj1cx1XHAVyRG8qYhBnv1DS59Bsvmg5h"),
        tokenBfees: new web3_js_1.PublicKey("G9nt2GazsDj3Ey3KdA49Sfaq9K95Dc72Ejps4NKTP2SR"),
        // for stake/unstake
        quarry: new web3_js_1.PublicKey("BYEUtsLjYAVHRiRR3Avjqnd2RQLRL8n933N52p9kSX2y"),
        rewarder: new web3_js_1.PublicKey("rXhAofQCT7NN9TUqigyEAUzV1uLL4boeD8CRkNBSkYk"),
        mint: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.USTv2_USDC_SABER]),
    }),
    _q);
// prettier-ignore
exports.ORCA_LP_METAS = (_r = {},
    _r[types_1.TokenID.USDC_USDT_ORCA] = new OrcaLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.USDC_USDT_ORCA]),
        swapPubkey: new web3_js_1.PublicKey("F13xvvx45jVGd84ynK3c8T89UejQVxjCLtmHfPmAXAHP"),
        swapAuthority: new web3_js_1.PublicKey("3cGHDS8uWhdxQj14vTmFtYHX3NMouPpE4o9MjQ43Bbf4"),
        swapTokenAAccount: new web3_js_1.PublicKey("6uUn2okWk5v4x9Gc4n2LLGHtWoa9tmizHq1363dW7t9W"),
        swapTokenBAccount: new web3_js_1.PublicKey("AiwmnLy7xPT28dqZpkRm6i1ZGwELUCzCsuN92v4JkSeU"),
        globalLpVault: new web3_js_1.PublicKey("9hPRfmQmZYiL4ZtuvGBk5SjMzmFCQ2h9a4GKoM82BR84"),
        farmTokenMint: new web3_js_1.PublicKey("GjpXgKwn4VW4J2pZdS3dovM58hiXWLJtopTfqG83zY2f"),
        globalFarmState: new web3_js_1.PublicKey("5psKJrxWnPmoAbCxk3An2CGh7wHAX2cWddf5vZuYbbVw"),
        globalRewardTokenVault: new web3_js_1.PublicKey("AYbtHmuJxXpo91m988UdyTtzC6J72WvMAW7XkXqFhAbz"),
        rewardTokenAuthority: new web3_js_1.PublicKey("5YGvg6mfuvJtHdVWDXTs4sYy6GwQAUduK8qurDcL111S"),
        feeAccount: new web3_js_1.PublicKey("B4RNxMJGRzKFQyTq2Uwkmpyjtew13n7KtdqZy6qgENTu"),
        publicRewardTokAcc: new web3_js_1.PublicKey("FSQWYCVXiGXRfKd1NmchusEa9wADez9eQGt5RY5eDjiy"),
        alphaRewardTokAcc: new web3_js_1.PublicKey("GUFm5nznu9B8Anfg3pZDxSofs8pUMjQZdVYnhbdvnkeV"),
    }),
    _r[types_1.TokenID.SOL_USDC_ORCA] = new OrcaLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.SOL_USDC_ORCA]),
        swapPubkey: new web3_js_1.PublicKey("EGZ7tiLeH62TPV1gL8WwbXGzEPa9zmcpVnnkPKKnrE2U"),
        swapAuthority: new web3_js_1.PublicKey("JU8kmKzDHF9sXWsnoznaFDFezLsE5uomX2JkRMbmsQP"),
        swapTokenAAccount: new web3_js_1.PublicKey("ANP74VNsHwSrq9uUSjiSNyNWvf6ZPrKTmE4gHoNd13Lg"),
        swapTokenBAccount: new web3_js_1.PublicKey("75HgnSvXbWKZBpZHveX68ZzAhDqMzNDS29X6BGLtxMo1"),
        globalLpVault: new web3_js_1.PublicKey("7ipefo5V3QEJWeuT2PohFSEUaranZxMSeWQo2rcNigr3"),
        farmTokenMint: new web3_js_1.PublicKey("FFdjrSvNALfdgxANNpt3x85WpeVMdQSH5SEP2poM8fcK"),
        globalFarmState: new web3_js_1.PublicKey("85HrPbJtrN82aeB74WTwoFxcNgmf5aDNP2ENngbDpd5G"),
        globalRewardTokenVault: new web3_js_1.PublicKey("kjjFC8RAF7GuBQ9iYgyTcPmvsRafJ2Ec2AmoS6DjakJ"),
        rewardTokenAuthority: new web3_js_1.PublicKey("MDcWkwPqr5HrA91g4GGax7bVP1NDDetnR12nGhoAdYj"),
        feeAccount: new web3_js_1.PublicKey("8JnSiuvQq3BVuCU3n4DrSTw9chBSPvEMswrhtifVkr1o"),
        publicRewardTokAcc: new web3_js_1.PublicKey("Hr5yQGW35HBP8fJLKfranRbbKzfSPHrhKFf1ZP68LmVp"),
        alphaRewardTokAcc: new web3_js_1.PublicKey("85hb3QUq7M8W3dMxCdxQ9vnezV7fRPBUGbq24XTEaLcg"),
    }),
    _r[types_1.TokenID.mSOL_SOL_ORCA] = new OrcaLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.mSOL_SOL_ORCA]),
        swapPubkey: new web3_js_1.PublicKey("9EQMEzJdE2LDAY1hw1RytpufdwAXzatYfQ3M2UuT9b88"),
        swapAuthority: new web3_js_1.PublicKey("6cwehd4xhKkJ2s7iGh4CaDb7KhMgqczSBnyNJieUYbHn"),
        swapTokenAAccount: new web3_js_1.PublicKey("6xmki5RtGNHrfhTiHFfp9k3RQ9t8qgL1cYP2YCG2h179"),
        swapTokenBAccount: new web3_js_1.PublicKey("Ew2coQtVGLeca31vqB2ssHntjzZgUy1ad9VuuAX8yw7p"),
        globalLpVault: new web3_js_1.PublicKey("DuTZUmTRydVc3EN78brdYFUfskn6s93zH4WhY3Fo53AJ"),
        farmTokenMint: new web3_js_1.PublicKey("3RTGL7gPF4V1ns1AeGFApT7cBEGVDfmJ77DqQi9AC6uG"),
        globalFarmState: new web3_js_1.PublicKey("JADWjBW1Xs8WhW8kj3GTCRQn3LR4gwvbFTEMwv9ZNxQh"),
        globalRewardTokenVault: new web3_js_1.PublicKey("7dpUACKvEiuq5kyoGtgiA131hYwdxfFhEeD5TMT4mnzG"),
        rewardTokenAuthority: new web3_js_1.PublicKey("CtXKDXJ4wzgto48QQFANestEgtov5dJRrs9qpRw7BV1h"),
        feeAccount: new web3_js_1.PublicKey("6j2tt2UVYMQwqG3hRtyydW3odzBFwy3pN33tyB3xCKQ6"),
        publicRewardTokAcc: new web3_js_1.PublicKey("CA59mFikUhJYLesKAxx8j8unHrxTfXSEPjzoXFyrG9M1"),
        alphaRewardTokAcc: new web3_js_1.PublicKey("3XNau9dqDSjAARS3cvTjzUv2nRU2FEzaGJd31f6NApUU"),
        isDoubleDipSupported: exports.LP_TO_NEED_2ND_STAKE[types_1.TokenID.mSOL_SOL_ORCA],
        globalLp3Vault: new web3_js_1.PublicKey('AEZpFdJ5hA7MwVS7AReBbS9pMhoYRhLXgDyc1GWbSoXc'),
        farmTokenLp3Mint: new web3_js_1.PublicKey('576ABEdvLG1iFU3bLC8AMJ3mo5LhfgPPhMtTeVAGG6u7'),
        globalDoubleDipFarmState: new web3_js_1.PublicKey('2SciNw7cEsKJc1PMRDzWCcEzvuScmEaUgmrJXCi9UFxY'),
        globalDoubleDipRewardTokenVault: new web3_js_1.PublicKey('DCHpFt1bCk9mTudj6VsKbADvUPT3tAJvJ2rcBZQry8Wz'),
        doubleDipRewardTokenAuthority: new web3_js_1.PublicKey('5uk8F4MaFSu1pF9Q7k8xcyWgqyo9q2dqr3Kb4Esvd1n3'),
        publicDoubleDipRewardAcc: new web3_js_1.PublicKey("5U5uowAVYyggB6DvVZE12cLZE7EjxkdKGt8VpvbsNbAy"),
        alphaDoubleDipRewardAcc: new web3_js_1.PublicKey("GfSzQknESVecnF5z9G1gpEtcaxZkcT742uUdbhJoU5Ap"),
        doubleDipRewardMint: new web3_js_1.PublicKey("MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey"),
    }),
    _r[types_1.TokenID.ORCA_USDC_ORCA] = new OrcaLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.ORCA_USDC_ORCA]),
        swapPubkey: new web3_js_1.PublicKey("2p7nYbtPBgtmY69NsE8DAW6szpRJn7tQvDnqvoEWQvjY"),
        swapAuthority: new web3_js_1.PublicKey("3fr1AhdiAmWLeNrS24CMoAu9pPgbzVhwLtJ6QUPmw2ob"),
        swapTokenAAccount: new web3_js_1.PublicKey("9vYWHBPz817wJdQpE8u3h8UoY3sZ16ZXdCcvLB7jY4Dj"),
        swapTokenBAccount: new web3_js_1.PublicKey("6UczejMUv1tzdvUzKpULKHxrK9sqLm8edR1v9jinVWm9"),
        globalLpVault: new web3_js_1.PublicKey("45BAAQCZYd2kP3Z3WvRwdtfUhvuW4FvpqVK4m8qrR5x1"),
        farmTokenMint: new web3_js_1.PublicKey("Gc7W5U66iuHQcC1cQyeX9hxkPF2QUVJPTf1NWbW8fNrt"),
        globalFarmState: new web3_js_1.PublicKey("9S1BsxbDNQXQccjFamVEGgxiYQHTeudvhEYwFr4oWeaf"),
        globalRewardTokenVault: new web3_js_1.PublicKey("DEiqe2Ta9TRMRtWdBqiFV13dhVrqCeG8MMmVwywvXvJo"),
        rewardTokenAuthority: new web3_js_1.PublicKey("66xaEjFoYfRcspc18oDj61mXDyznr9zam6tFNeqvs2jK"),
        feeAccount: new web3_js_1.PublicKey("7CXZED4jfRp3qdHB9Py3up6v1C4UhHofFvfT6RXbJLRN"),
        publicRewardTokAcc: new web3_js_1.PublicKey("G8cPgn6tiQQAQcTQupEi8fTBfo1RpqTii1hW65L4poTY"),
        alphaRewardTokAcc: new web3_js_1.PublicKey("8fFHftEm6PJBahCQukV6J27b7xzDeVPFdedjV1f4T36x"),
    }),
    _r[types_1.TokenID.ORCA_SOL_ORCA] = new OrcaLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.ORCA_SOL_ORCA]),
        swapPubkey: new web3_js_1.PublicKey("2ZnVuidTHpi5WWKUwFXauYGhvdT9jRKYv5MDahtbwtYr"),
        swapAuthority: new web3_js_1.PublicKey("2PH1quJj9MHQXATCmNZ6qQ2gZqM8R236DpKaz99ggVpm"),
        swapTokenAAccount: new web3_js_1.PublicKey("AioST8HKQJRqjE1mknk4Rydc8wVADhdQwRJmAAYX1T6Z"),
        swapTokenBAccount: new web3_js_1.PublicKey("73zdy95DynZP4exdpuXTDsexcrWbDJX9TFi2E6CDzXh4"),
        globalLpVault: new web3_js_1.PublicKey("7N7zxoDMMV1sCDiVEzinTyQxS2GoN388QprMCQX38BeT"),
        farmTokenMint: new web3_js_1.PublicKey("B5waaKnsmtqFawPspUwcuy1cRjAC7u2LrHSwxPSxK4sZ"),
        globalFarmState: new web3_js_1.PublicKey("F6pi7SyXWx56fP96mYQ4Yfh4yZ7oGNtDjwSYHT5Mz7Ld"),
        globalRewardTokenVault: new web3_js_1.PublicKey("CSbYA7Cd65Vis2oqX797zmnWmpgENmqrPdmPbTbRPykd"),
        rewardTokenAuthority: new web3_js_1.PublicKey("98RAHBKRTTC87nNwug1GEAnLVgouk9nRaa3u14jrp6Zz"),
        feeAccount: new web3_js_1.PublicKey("4Zc4kQZhRQeGztihvcGSWezJE1k44kKEgPCAkdeBfras"),
        publicRewardTokAcc: new web3_js_1.PublicKey("2G7ZWG9z6WtKJ5k5B32RTmLFB7hLVEnC5RmYD7gvCpG3"),
        alphaRewardTokAcc: new web3_js_1.PublicKey("8htfap3Gej5t4araQRHioggu2acsG3tQAc38PMtBhBhD"),
    }),
    _r[types_1.TokenID.ETH_USDC_ORCA] = new OrcaLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.ETH_USDC_ORCA]),
        swapPubkey: new web3_js_1.PublicKey("FgZut2qVQEyPBibaTJbbX2PxaMZvT1vjDebiVaDp5BWP"),
        swapAuthority: new web3_js_1.PublicKey("4dfCZR32xXhoTgMRhnViNaTFwiKP9A34TDjHCR3xM5rg"),
        swapTokenAAccount: new web3_js_1.PublicKey("H9h5yTBfCHcb4eRP87fXczzXgNaMzKihr7bf1sjw7iuZ"),
        swapTokenBAccount: new web3_js_1.PublicKey("JA98RXv2VdxQD8pRQq4dzJ1Bp4nH8nokCGmxvPWKJ3hx"),
        globalLpVault: new web3_js_1.PublicKey("6zoYTvgLd4UAhKSPwirEU9VNNNkpezwq8AM4jXW1Qop9"),
        farmTokenMint: new web3_js_1.PublicKey("HDP2AYFmvLz6sWpoSuNS62JjvW4HjMKp7doXucqpWN56"),
        globalFarmState: new web3_js_1.PublicKey("FpezTR76RRjgpBb9HhR6ap8BgQfkHyNMQSqJDcoXpjAb"),
        globalRewardTokenVault: new web3_js_1.PublicKey("9MWJmWVAGQ9C9SxwWKidStAA8HjDHpnZ7KfKgVJdrNtj"),
        rewardTokenAuthority: new web3_js_1.PublicKey("DFTLJrgsn7cLNX9hbqiUwM8C1y6f7AfyvEmbsFSkjQNR"),
        feeAccount: new web3_js_1.PublicKey("DLWewB12jzGn4wXJmFCddWDeof1Ma4cZYNRv9CP5hTvX"),
        publicRewardTokAcc: new web3_js_1.PublicKey("CtVJtQHSAcSQ3b4FD3A3Zk8vb2PaC4wn1oTnHtUMS8rf"),
        alphaRewardTokAcc: new web3_js_1.PublicKey("BSpFLmCAzJp5XMSfVXC2rq4LjJ2NSs2jqFS8agcENAkH"),
    }),
    _r[types_1.TokenID.SOL_USDT_ORCA] = new OrcaLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.SOL_USDT_ORCA]),
        swapPubkey: new web3_js_1.PublicKey("Dqk7mHQBx2ZWExmyrR2S8X6UG75CrbbpK2FSBZsNYsw6"),
        swapAuthority: new web3_js_1.PublicKey("2sxKY7hxVFrY5oNE2DgaPAJFamMzsmFLM2DgVcjK5yTy"),
        swapTokenAAccount: new web3_js_1.PublicKey("DTb8NKsfhEJGY1TrA7RXN6MBiTrjnkdMAfjPEjtmTT3M"),
        swapTokenBAccount: new web3_js_1.PublicKey("E8erPjPEorykpPjFV9yUYMYigEWKQUxuGfL2rJKLJ3KU"),
        globalLpVault: new web3_js_1.PublicKey("EXxH5tKDHLy68nWXS8w1BRUsiDEHMbKACLUmFWv8Q9tu"),
        farmTokenMint: new web3_js_1.PublicKey("71vZ7Jvu8fTyFzpX399dmoSovoz24rVbipLrRn2wBNzW"),
        globalFarmState: new web3_js_1.PublicKey("4RRRJkscV2DmwJUxTQgRdYock75GfwYJn7LTxy9rGTmY"),
        globalRewardTokenVault: new web3_js_1.PublicKey("H3ozvCeEwnsqnM2naCnXVxLLwH2XPC5kU8BH97XDpDwS"),
        rewardTokenAuthority: new web3_js_1.PublicKey("EavNUagNtD7DEdV4atcm3dEBXafARKCNJyNkyfz426m6"),
        feeAccount: new web3_js_1.PublicKey("BBKgw75FivTYXj85D2AWyVdaTdTWuSuHVXRm1Xu7fipb"),
        publicRewardTokAcc: new web3_js_1.PublicKey("9AfsnfPwRrJLjcCAasUcaYeVunpmxgev6yCVa6HiLkp7"),
        alphaRewardTokAcc: new web3_js_1.PublicKey("93xUo4bmSXdGxCNSDvk2xYH7YAY6KqDZ4mPMbwBuiyfm"),
    }),
    _r[types_1.TokenID.ETH_SOL_ORCA] = new OrcaLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.ETH_SOL_ORCA]),
        swapPubkey: new web3_js_1.PublicKey("EuK3xDa4rWuHeMQCBsHf1ETZNiEQb5C476oE9u9kp8Ji"),
        swapAuthority: new web3_js_1.PublicKey("DffrDbzPiswDJaiicBBo9CjqztKgFLrqXGwNJH4XQefZ"),
        swapTokenAAccount: new web3_js_1.PublicKey("7F2cLdio3i6CCJaypj9VfNDPW2DwT3vkDmZJDEfmxu6A"),
        swapTokenBAccount: new web3_js_1.PublicKey("5pUTGvN2AA2BEzBDU4CNDh3LHER15WS6J8oJf5XeZFD8"),
        globalLpVault: new web3_js_1.PublicKey("6ckhPnn6tCr88aq9SxhWaAA5G7izuXNKhVk1Xa62zhFD"),
        farmTokenMint: new web3_js_1.PublicKey("CGFTRh4jKLPbS9r4hZtbDfaRuC7qcA8rZpbLnVTzJBer"),
        globalFarmState: new web3_js_1.PublicKey("3ARgavt1NhqLmJWj3wAJy6XBarG6pJbEKRv1wzzRbbaN"),
        globalRewardTokenVault: new web3_js_1.PublicKey("FYTTVMqWPzbnhTsukgiWmPiNJam4yLTxHM9mpzdan2zo"),
        rewardTokenAuthority: new web3_js_1.PublicKey("HXY2Vvj2XyqiPNXV3PhM9YYKgfjqzXUX4tUFRnvqihdY"),
        feeAccount: new web3_js_1.PublicKey("unxKgWEc71ZiHwMqZs3VLqjcjmZhfTZEg94ZLGvjdMP"),
        publicRewardTokAcc: new web3_js_1.PublicKey("2NYnAKhCwCMoe5unHuaEQEYL1ugLypK8Hrx4Qp5ugSUf"),
        alphaRewardTokAcc: new web3_js_1.PublicKey("6uupGx988A2yiPEhZEayNSewkp45owfbQVrJcbcKoiC6"),
    }),
    _r[types_1.TokenID.BTC_mSOL_ORCA] = new OrcaLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.BTC_mSOL_ORCA]),
        swapPubkey: new web3_js_1.PublicKey("8DRw5wQE1pyg6RB1UwypGNFgb2Pzp2hpyDDNwo76Lcc8"),
        swapAuthority: new web3_js_1.PublicKey("3X1aLdyvcQNc8TvBMPiucMsRCnGMBnGsjJHpZEyCf3pn"),
        swapTokenAAccount: new web3_js_1.PublicKey("6D3sxC6yEe84FUnF5Kpbgx6gN57N9poJCKAtrCeCWdJo"),
        swapTokenBAccount: new web3_js_1.PublicKey("EPoVJLhi9QtVPVo8n31M5k5Knvb48j8zbYyRrUbrHwC5"),
        globalLpVault: new web3_js_1.PublicKey("75gpvckCXk49zTUwG8QrzUSP4NpWh3JXdyELBrnAhimL"),
        farmTokenMint: new web3_js_1.PublicKey("DzpLz78wuwyFsQToin8iDv6YK6aBEymRqQq82swiFh7r"),
        globalFarmState: new web3_js_1.PublicKey("GBrpFtiTabs14mc4Hi1RX9YiQY7res6JxrVfMTADfcQV"),
        globalRewardTokenVault: new web3_js_1.PublicKey("CNe5S831UP4YkumU7UsusTkf7uxJnAVdmPe6jhF51k4y"),
        rewardTokenAuthority: new web3_js_1.PublicKey("8sVCTztvytajkdczYEZVkSmuoRLjnMezwpT46L5w4RWR"),
        feeAccount: new web3_js_1.PublicKey("AqiLHbUAy4UWWKGVVgbHsaUVCMg1zemNkgsYBPSirT92"),
        publicRewardTokAcc: new web3_js_1.PublicKey("7Sfy525w1dpCQqXb2sEKuacV57333VCSCKGuubsxXvCc"),
        alphaRewardTokAcc: new web3_js_1.PublicKey("Bag2RfLUzSXYbnsnVAFeYYzfG6M4EGseUJsmJnC64Vrn"),
        isDoubleDipSupported: exports.LP_TO_NEED_2ND_STAKE[types_1.TokenID.BTC_mSOL_ORCA],
        globalLp3Vault: new web3_js_1.PublicKey('DuyHVLzsqg6SZeFNbpUWfJf67kvAXPWUdUGJYWJK5vTu'),
        farmTokenLp3Mint: new web3_js_1.PublicKey('6uA1ADUJbvwYJZpzUn9z9LuyKoRVngBKcQTKdXsSivA8'),
        globalDoubleDipFarmState: new web3_js_1.PublicKey('Cn7QNyosNQ8DyKEeMDPmtg66R7vKMXigcQ561kTkFD8E'),
        globalDoubleDipRewardTokenVault: new web3_js_1.PublicKey('Ea3FYh9RMJxwsyu3xS7BesLMtpX32DURohiEigG2iJCx'),
        doubleDipRewardTokenAuthority: new web3_js_1.PublicKey('9Lg5wBjcYDgY8S2ZAEqjtXAQ4UdHuw65aP1WmmWss4QX'),
        doubleDipRewardMint: new web3_js_1.PublicKey("MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey"),
        alphaDoubleDipRewardAcc: new web3_js_1.PublicKey("J5cxhkPf25Ff4NT7WfWhLQzp58dksfhBT1vqprxBY7D3"),
        publicDoubleDipRewardAcc: new web3_js_1.PublicKey("AoeNmMDdDBS7xyvXjtG79pCa8Duf4qFALs4KY49okdx2"),
    }),
    _r[types_1.TokenID.mSOL_USDC_ORCA] = new OrcaLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.mSOL_USDC_ORCA]),
        swapPubkey: new web3_js_1.PublicKey("Hme4Jnqhdz2jAPUMnS7jGE5zv6Y1ynqrUEhmUAWkXmzn"),
        swapAuthority: new web3_js_1.PublicKey("9Z7E42k46kxnBjAh8YGXDw3rRGwwxQUBYM7Ccrmwg6ZP"),
        swapTokenAAccount: new web3_js_1.PublicKey("GBa7G5f1FqAXEgByuHXsqsEdpyMjRgT9SNxZwmmnEJAY"),
        swapTokenBAccount: new web3_js_1.PublicKey("7hFgNawzzmpDM8TTVCKm8jykBrym8C3TQdb8TDAfAVkD"),
        globalLpVault: new web3_js_1.PublicKey("8F6NCo1PiakW7m3eeEZvdxsjXF5bkLD3QZsTxaNg9jvv"),
        farmTokenMint: new web3_js_1.PublicKey("5r3vDsNTGXXb9cGQfqyNuYD2bjhRPymGJBfDmKosR9Ev"),
        globalFarmState: new web3_js_1.PublicKey("EvtMzreDMq1U8ytV5fEmfoWNfPhrjZ87za835GuRvZCc"),
        globalRewardTokenVault: new web3_js_1.PublicKey("A1enLcj9XmuVeYCQScEruwnfAz7ksQhbuGFUgvgeS1a6"),
        rewardTokenAuthority: new web3_js_1.PublicKey("9czgZkSxLFtxmvWSb1PEHmUyBuNpAUxj9XAcHKikYnzt"),
        feeAccount: new web3_js_1.PublicKey("3W3Skj2vQsNEMhGRQprFXQy3Q8ZbM6ojdgiDCokVPWno"),
        publicRewardTokAcc: new web3_js_1.PublicKey("B16JMAgpR84Dr6rucq4GYLZV7pdk1uPF533P9KVwNUq4"),
        alphaRewardTokAcc: new web3_js_1.PublicKey("C7L8DS3ytgueAkcFojeshc2SEtePDPDXjv6gajyinGyL"),
        isDoubleDipSupported: exports.LP_TO_NEED_2ND_STAKE[types_1.TokenID.mSOL_USDC_ORCA],
        globalLp3Vault: new web3_js_1.PublicKey('CdbgqE5B9oADrSAWc51Mgw6c3B6nvYJ4c431rftpoVqZ'),
        farmTokenLp3Mint: new web3_js_1.PublicKey('9y3QYM5mcaB8tU7oXRzAQnzHVa75P8riDuPievLp64cY'),
        globalDoubleDipFarmState: new web3_js_1.PublicKey('5fhDMuGKRDPWVWXf7BBEwifRFrp6XwXctDQoG7UHGVt6'),
        globalDoubleDipRewardTokenVault: new web3_js_1.PublicKey('XbkV9HZpLdv3CjMUfoq4t8nkxR6UguHb4oP8aAKBGV2'),
        doubleDipRewardTokenAuthority: new web3_js_1.PublicKey('FvXa954NiCqE2jAthxV5oVcuuPAJCggwYtAihYDRhVUw'),
        doubleDipRewardMint: new web3_js_1.PublicKey("MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey"),
        alphaDoubleDipRewardAcc: new web3_js_1.PublicKey("H6pK9gb58SxvyCRZzgCj4kuX758sjYAcqPJpY1aBJzLv"),
        publicDoubleDipRewardAcc: new web3_js_1.PublicKey("3QaNhP4vT6PG3eoQwg2DRbH9ecmy7pR2f1PBPWCwDBYd"),
    }),
    _r[types_1.TokenID.APT_USDC_ORCA] = new OrcaLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.APT_USDC_ORCA]),
        swapPubkey: new web3_js_1.PublicKey("Fg3UabVqnfycMtkiTVoaia9eNafehtT9Y4TicH2iBtvK"),
        swapAuthority: new web3_js_1.PublicKey("JDEYn1JsacdxoB4v4mbctFSVrSUPttacX3gxWphFHJKZ"),
        swapTokenAAccount: new web3_js_1.PublicKey("636crNdZTf46gFUKuedaBCZDBMLahf7KGud2LyTMskU5"),
        swapTokenBAccount: new web3_js_1.PublicKey("DGEYFkEHyiuHWtHeCGiQGn1JbkGHqYrNwaP44miRbgxu"),
        globalLpVault: new web3_js_1.PublicKey("Ha7NSMkfjQt2pWF8JY5p89T38NpKdm5da4FR3sYednin"),
        farmTokenMint: new web3_js_1.PublicKey("Dx7DYSuaBufhXyQG7155ePkLmHyn6w7WeKKtQB9zscZV"),
        globalFarmState: new web3_js_1.PublicKey("3YZ5GYL625vWibn7d8hMdrMBawy9HGUyeTe4AoXoME1Q"),
        globalRewardTokenVault: new web3_js_1.PublicKey("HyCJbQkccvMwC5FHAYBMjQCKXEjDo9fbhBa5pj8sc2v5"),
        rewardTokenAuthority: new web3_js_1.PublicKey("53y344S5Cv32ViwajrHxnsgcmam7Mw2nydcRgJEkqdGd"),
        feeAccount: new web3_js_1.PublicKey("41H5mWwsZKewJeV4wWiNjQ3U4VYBnwqCpzvAWt86baHd"),
        publicRewardTokAcc: new web3_js_1.PublicKey("EgFva9mEFCV31AkhoZb6rN6zvbNGE1xdaRYAkKTtdNjN"),
        alphaRewardTokAcc: new web3_js_1.PublicKey("Cd5ijQFj1V7V5VwuoSkG6pEaPyeX2D9ZmqS7pE1RVdFX"),
    }),
    _r[types_1.TokenID.stSOL_USTv2_ORCA] = new OrcaLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.stSOL_USTv2_ORCA]),
        swapPubkey: new web3_js_1.PublicKey('9F3J6RY7PTkDb3SUUpg725uXyCceBGCpZrtmYGJwgMwF'),
        swapAuthority: new web3_js_1.PublicKey('wJydc21tAMxYDif8uvy5rWNGWDFNZnPPmqCvegyZRod'),
        swapTokenAAccount: new web3_js_1.PublicKey('GFso9SAGakm8ZFa3rmuonuerbcQ8ZbACNZN7idkKR5nw'),
        swapTokenBAccount: new web3_js_1.PublicKey('EZ7pJskN2a4pDknrdkLzGDHpzjbfgdBj3Tt594K9HZbL'),
        globalLpVault: new web3_js_1.PublicKey('EQBy5YqWkLxr1xx1CZh2dDdX57XR9Ata4jNJebtuR61h'),
        farmTokenMint: new web3_js_1.PublicKey('3Q44iV4URXdbS4Tk1PGs5VdWQoCxHB7zdcdMnemo8jfH'),
        globalFarmState: new web3_js_1.PublicKey('GxhewC22S6wsXT156yC9SARvDnijoc3YEYyLVcQFDUCx'),
        globalRewardTokenVault: new web3_js_1.PublicKey('FFjuVr4FYdRGkPwaQREVQWHsBFGwQ1LH6VkmVSJL5Vva'),
        rewardTokenAuthority: new web3_js_1.PublicKey('8za7LwVuYbP2PivS3KbeohpUkSmRqLdTDxhrVzsHyFZf'),
        feeAccount: new web3_js_1.PublicKey('5rCbmppxMBHwBjCkLUP6fireQ12cL8LRa26QRUimoxN6'),
        // public needs to be created later
        publicRewardTokAcc: new web3_js_1.PublicKey('6P4frmXufUBsT2s39zbQ5k5UDrzSpFcNKmZAgWZLHgMv'),
        alphaRewardTokAcc: new web3_js_1.PublicKey('DpBG9h4UWMfwRKXUzN1zo3jEkJLGE5RVz5Zt6Qr4Xt7c'),
    }),
    _r[types_1.TokenID.ORCA_whETH_ORCA] = new OrcaLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.ORCA_whETH_ORCA]),
        swapPubkey: new web3_js_1.PublicKey('D67u6UEuFp9Q4Fu2gnu5thxBoVj2eRgDDDirdWsMVsgm'),
        swapAuthority: new web3_js_1.PublicKey('4kwchkCnCaZPkBdnk85j9bJ9F1P883rwjbvsXGV7H5rM'),
        swapTokenAAccount: new web3_js_1.PublicKey('EMxDw1NjdddQjPk9gCUN4iDMy8HJ5siKYMVjGbjuUCrh'),
        swapTokenBAccount: new web3_js_1.PublicKey('DQyhcuEvE1K9DSd51agcNLg4CDrgthnKMVhU7q6R55LV'),
        globalLpVault: new web3_js_1.PublicKey('CYSwKVGEaPazRXUcCo2Ve9wyovK44E9ftLNSsvVqRuf1'),
        farmTokenMint: new web3_js_1.PublicKey('A7EAHvFEWzW8qSTFNLrEHN894GAZWZesNiebttEwtUGJ'),
        globalFarmState: new web3_js_1.PublicKey('AgWH92f8cPAuURyqehF6A9wFgupEsnDX3VP5eHyytabA'),
        globalRewardTokenVault: new web3_js_1.PublicKey('DoaerVHonB3FYpzKtqADug9UtrPLzgY1gbzZm6cRuymi'),
        rewardTokenAuthority: new web3_js_1.PublicKey('B1pahxFpN3GX4TKsw7fEDLw5MuuzmHNUbVcPZ6bp7KBM'),
        feeAccount: new web3_js_1.PublicKey('GdHXLai5M8FKedXUsECSzrV72nb1RTCCooFyTWT8WYmT'),
        // public needs to be created later
        publicRewardTokAcc: new web3_js_1.PublicKey('9jJVuB2UhzcGED6h476kieHwTVPmhY7EJsQyud38Q4r1'),
        alphaRewardTokAcc: new web3_js_1.PublicKey('HqTUasro97QUByk1LEbXGJCh672Bu1b5gnj31tLbbJfi'),
    }),
    _r);
// prettier-ignore
exports.RAYDIUM_LP_METAS = (_s = {},
    _s[types_1.TokenID.SOL_USDC_RAYDIUM] = new RaydiumLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.SOL_USDC_RAYDIUM]),
        ammIdPubkey: new web3_js_1.PublicKey('58oQChx4yWmvKdwLLZzBi4ChoCc2fqCUWBkwMihLYQo2'),
        ammAuthPubkey: new web3_js_1.PublicKey('5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'),
        ammOpenOrdersPubkey: new web3_js_1.PublicKey('HRk9CMrpq7Jn9sh7mzxE8CChHG8dneX9p475QKz4Fsfc'),
        ammTargetOrderPubkey: new web3_js_1.PublicKey('CZza3Ej4Mc58MnxWA385itCC9jCo3L1D7zc3LKy1bZMR'),
        poolCoinTokenPubkey: new web3_js_1.PublicKey('DQyrAcCrDXQ7NeoqGgDCZwBvWDcYmFCjSb9JtteuvPpz'),
        poolPcTokenPubkey: new web3_js_1.PublicKey('HLmqeL62xR1QoZ1HKKbXRrdN1p3phKpxRMb2VVopvBBz'),
        poolWithdrawQueue: new web3_js_1.PublicKey('G7xeGGLevkRwB5f44QNgQtrPKBdMfkT6ZZwpS9xcC97n'),
        poolTempLpTokenAccount: new web3_js_1.PublicKey('Awpt6N7ZYPBa4vG4BQNFhFxDj4sxExAA9rpBAoBw2uok'),
        serumProgramId: new web3_js_1.PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),
        serumMarketPubkey: new web3_js_1.PublicKey('9wFFyRfZBsuAha4YcuxcXLKwMxJR43S7fPfQLusDBzvT'),
        serumCoinVaultAccount: new web3_js_1.PublicKey('36c6YqAwyGKQG66XEp2dJc5JqjaBNv7sVghEtJv4c7u6'),
        serumPcVaultAccount: new web3_js_1.PublicKey('8CFo8bL8mZQK8abbFyypFMwEDd8tVJjHTTojMLgQTUSZ'),
        serumVaultSigner: new web3_js_1.PublicKey('F8Vyqk3unwxkXukZFQeYyGmFfTG3CAX4v24iyrjEYBJV'),
        serumEventQueueAccount: new web3_js_1.PublicKey('5KKsLVU6TcbVDK4BS6K1DGDxnh4Q9xjYJ8XaDCG5t8ht'),
        serumBidsAccount: new web3_js_1.PublicKey('14ivtgssEBoBjuZJtSAPKYgpUK7DmnSwuPMqJoVTSgKJ'),
        serumAsksAccount: new web3_js_1.PublicKey('CEQdAFKdycHugujQg9k2wbmxjcpdYZyVLfV9WerTnafJ'),
        rewardAccounts: [
            {
                rewardToken: types_1.TokenID.RAY,
                userRewardAlphaAccountPubkey: new web3_js_1.PublicKey('3ycsskwZL584nSTikjMR9DhVKRHFpYUbbx4m93kn6Djx'),
                userRewardPublicAccountPubkey: new web3_js_1.PublicKey('44tSF4Sisrsy7YXmtSYnFLzQnZeVvwgd5PTMzRvAqtq4'),
                rewardVault: new web3_js_1.PublicKey('38YS2N7VUb856QDsXHS1h8zv5556YgEy9zKbbL2mefjf'), // ray
            }, {
                rewardToken: types_1.TokenID.SRM,
                userRewardAlphaAccountPubkey: new web3_js_1.PublicKey('21rySZr2pQCaoGjdJy6gPx31vi5igVsKFAMRtqhgPgVX'),
                userRewardPublicAccountPubkey: new web3_js_1.PublicKey('BzqrcDc7wpciqtsSj7MsDajDdjHuS7XBdqaprSm8GaiB'),
                rewardVault: new web3_js_1.PublicKey('ANDJUfDryy3jY6DngwGRXVyxCJBT5JfojLDXwZYSpnEL'), // srm
            }
        ],
        stakeKeys: {
            poolIdPubkey: new web3_js_1.PublicKey('GUzaohfNuFbBqQTnPgPSNciv3aUvriXYjQduRE3ZkqFw'),
            poolAuthorityPubkey: new web3_js_1.PublicKey('DgbCWnbXg43nmeiAveMCkUUPEpAr3rZo3iop3TyP6S63'),
            poolLPVault: new web3_js_1.PublicKey('J6ECnRDZEXcxuruvErXDWsPZn9czowKynUr9eDSQ4QeN'),
        },
    }),
    _s[types_1.TokenID.RAY_USDC_RAYDIUM] = new RaydiumLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.RAY_USDC_RAYDIUM]),
        ammIdPubkey: new web3_js_1.PublicKey('6UmmUiYoBjSrhakAobJw8BvkmJtDVxaeBtbt7rxWo1mg'),
        ammAuthPubkey: new web3_js_1.PublicKey('5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'),
        ammOpenOrdersPubkey: new web3_js_1.PublicKey('J8u8nTHYtvudyqwLrXZboziN95LpaHFHpd97Jm5vtbkW'),
        ammTargetOrderPubkey: new web3_js_1.PublicKey('3cji8XW5uhtsA757vELVFAeJpskyHwbnTSceMFY5GjVT'),
        poolCoinTokenPubkey: new web3_js_1.PublicKey('FdmKUE4UMiJYFK5ogCngHzShuVKrFXBamPWcewDr31th'),
        poolPcTokenPubkey: new web3_js_1.PublicKey('Eqrhxd7bDUCH3MepKmdVkgwazXRzY6iHhEoBpY7yAohk'),
        poolWithdrawQueue: new web3_js_1.PublicKey('ERiPLHrxvjsoMuaWDWSTLdCMzRkQSo8SkLBLYEmSokyr'),
        poolTempLpTokenAccount: new web3_js_1.PublicKey('D1V5GMf3N26owUFcbz2qR5N4G81qPKQvS2Vc4SM73XGB'),
        serumProgramId: new web3_js_1.PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),
        serumMarketPubkey: new web3_js_1.PublicKey('2xiv8A5xrJ7RnGdxXB42uFEkYHJjszEhaJyKKt4WaLep'),
        serumCoinVaultAccount: new web3_js_1.PublicKey('GGcdamvNDYFhAXr93DWyJ8QmwawUHLCyRqWL3KngtLRa'),
        serumPcVaultAccount: new web3_js_1.PublicKey('22jHt5WmosAykp3LPGSAKgY45p7VGh4DFWSwp21SWBVe'),
        serumVaultSigner: new web3_js_1.PublicKey('FmhXe9uG6zun49p222xt3nG1rBAkWvzVz7dxERQ6ouGw'),
        serumEventQueueAccount: new web3_js_1.PublicKey('H9dZt8kvz1Fe5FyRisb77KcYTaN8LEbuVAfJSnAaEABz'),
        serumBidsAccount: new web3_js_1.PublicKey('Hf84mYadE1VqSvVWAvCWc9wqLXak4RwXiPb4A91EAUn5'),
        serumAsksAccount: new web3_js_1.PublicKey('DC1HsWWRCXVg3wk2NndS5LTbce3axwUwUZH1RgnV4oDN'),
        rewardAccounts: [
            {
                rewardToken: types_1.TokenID.RAY,
                userRewardAlphaAccountPubkey: new web3_js_1.PublicKey('496NG3Ym9UAmDoYe1YdJMnEhAGJhfrY4Wz2Poc85VcMZ'),
                userRewardPublicAccountPubkey: new web3_js_1.PublicKey('49i8NSa6z2DcWxBnnsZjyxKvLxEqXGZ833B4jUDNmxnT'),
                rewardVault: new web3_js_1.PublicKey('DpRueBHHhrQNvrjZX7CwGitJDJ8eZc3AHcyFMG4LqCQR'), // ray
            },
        ],
        stakeKeys: {
            poolIdPubkey: new web3_js_1.PublicKey('CHYrUBX2RKX8iBg7gYTkccoGNBzP44LdaazMHCLcdEgS'),
            poolAuthorityPubkey: new web3_js_1.PublicKey('5KQFnDd33J5NaMC9hQ64P5XzaaSz8Pt7NBCkZFYn1po'),
            poolLPVault: new web3_js_1.PublicKey('BNnXLFGva3K8ACruAc1gaP49NCbLkyE6xWhGV4G2HLrs'),
        },
        stakeProgram: exports.SWAP_METAS[commands_1.SWAP_RAYDIUM].stakeProgramPubkey,
    }),
    _s[types_1.TokenID.SOL_USDT_RAYDIUM] = new RaydiumLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.SOL_USDT_RAYDIUM]),
        ammIdPubkey: new web3_js_1.PublicKey('7XawhbbxtsRcQA8KTkHT9f9nc6d69UwqCDh6U5EEbEmX'),
        ammAuthPubkey: new web3_js_1.PublicKey('5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'),
        ammOpenOrdersPubkey: new web3_js_1.PublicKey('4NJVwEAoudfSvU5kdxKm5DsQe4AAqG6XxpZcNdQVinS4'),
        ammTargetOrderPubkey: new web3_js_1.PublicKey('9x4knb3nuNAzxsV7YFuGLgnYqKArGemY54r2vFExM1dp'),
        poolCoinTokenPubkey: new web3_js_1.PublicKey('876Z9waBygfzUrwwKFfnRcc7cfY4EQf6Kz1w7GRgbVYW'),
        poolPcTokenPubkey: new web3_js_1.PublicKey('CB86HtaqpXbNWbq67L18y5x2RhqoJ6smb7xHUcyWdQAQ'),
        poolWithdrawQueue: new web3_js_1.PublicKey('52AfgxYPTGruUA9XyE8eF46hdR6gMQiA6ShVoMMsC6jQ'),
        poolTempLpTokenAccount: new web3_js_1.PublicKey('2JKZRQc92TaH3fgTcUZyxfD7k7V7BMqhF24eussPtkwh'),
        serumProgramId: new web3_js_1.PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),
        serumMarketPubkey: new web3_js_1.PublicKey('HWHvQhFmJB3NUcu1aihKmrKegfVxBEHzwVX6yZCKEsi1'),
        serumCoinVaultAccount: new web3_js_1.PublicKey('29cTsXahEoEBwbHwVc59jToybFpagbBMV6Lh45pWEmiK'),
        serumPcVaultAccount: new web3_js_1.PublicKey('EJwyNJJPbHH4pboWQf1NxegoypuY48umbfkhyfPew4E'),
        serumVaultSigner: new web3_js_1.PublicKey('CzZAjoEqA6sjqtaiZiPqDkmxG6UuZWxwRWCenbBMc8Xz'),
        serumEventQueueAccount: new web3_js_1.PublicKey('GR363LDmwe25NZQMGtD2uvsiX66FzYByeQLcNFr596FK'),
        serumBidsAccount: new web3_js_1.PublicKey('2juozaawVqhQHfYZ9HNcs66sPatFHSHeKG5LsTbrS2Dn'),
        serumAsksAccount: new web3_js_1.PublicKey('ANXcuziKhxusxtthGxPxywY7FLRtmmCwFWDmU5eBDLdH'),
        rewardAccounts: [
            {
                rewardToken: types_1.TokenID.RAY,
                userRewardAlphaAccountPubkey: new web3_js_1.PublicKey('BrDvLLjYtTPyaBN2kDxRCSDzoNPdYiozPfggcgEJt3Pd'),
                userRewardPublicAccountPubkey: new web3_js_1.PublicKey('4aryP8pemzEuJjMteEPHFbM1SJdgoahx4AG1ZpdCvJZQ'),
                rewardVault: new web3_js_1.PublicKey('Bgj3meVYds8ficJc9xntbjmMBPVUuyn6CvDUm1AD39yq'), // ray
            }, {
                rewardToken: types_1.TokenID.SRM,
                userRewardAlphaAccountPubkey: new web3_js_1.PublicKey('6Cp9hLDQpbmiXZopk9oJMqGj8nSUbQpGLqm9VxYmZbFB'),
                userRewardPublicAccountPubkey: new web3_js_1.PublicKey('HBrRwtFzrL7CyngExF4N3LrKzSEf1ViFRLHJcVEwmphw'),
                rewardVault: new web3_js_1.PublicKey('DJifNDjNt7iHbkNHs9V6Wm5pdiuddtF9w3o4WEiraKrP'), // srm
            }
        ],
        stakeKeys: {
            poolIdPubkey: new web3_js_1.PublicKey('5r878BSWPtoXgnqaeFJi7BCycKZ5CodBB2vS9SeiV8q'),
            poolAuthorityPubkey: new web3_js_1.PublicKey('DimG1WK9N7NdbhddweGTDDBRaBdCmcbPtoWZJ4Fi4rn4'),
            poolLPVault: new web3_js_1.PublicKey('jfhZy3B6sqeu95z71GukkxpkDtfHXJiFAMULM6STWxb'),
        },
    }),
    _s[types_1.TokenID.mSOL_SOL_RAYDIUM] = new RaydiumLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.mSOL_SOL_RAYDIUM]),
        ammIdPubkey: new web3_js_1.PublicKey('EGyhb2uLAsRUbRx9dNFBjMVYnFaASWMvD6RE1aEf2LxL'),
        ammAuthPubkey: new web3_js_1.PublicKey('5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'),
        ammOpenOrdersPubkey: new web3_js_1.PublicKey('6c1u1cNEELKPmuH352WPNNEPdfTyVPHsei39DUPemC42'),
        ammTargetOrderPubkey: new web3_js_1.PublicKey('CLuMpSesLPqdxewQTxfiLdifQfDfRsxkFhPgiChmdGfk'),
        poolCoinTokenPubkey: new web3_js_1.PublicKey('85SxT7AdDQvJg6pZLoDf7vPiuXLj5UYZLVVNWD1NjnFK'),
        poolPcTokenPubkey: new web3_js_1.PublicKey('BtGUR6y7uwJ6UGXNMcY3gCLm7dM3WaBdmgtKVgGnE1TJ'),
        poolWithdrawQueue: new web3_js_1.PublicKey('7vvoHxA6di9EvzJKL6bmojbZnH3YaRXu2LitufrQhM21'),
        poolTempLpTokenAccount: new web3_js_1.PublicKey('ACn8TZ27fQ85kgdPKUfkETB4dS5JPFoq53z7uCgtHDai'),
        serumProgramId: new web3_js_1.PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),
        serumMarketPubkey: new web3_js_1.PublicKey('5cLrMai1DsLRYc1Nio9qMTicsWtvzjzZfJPXyAoF4t1Z'),
        serumCoinVaultAccount: new web3_js_1.PublicKey('2qmHPJn3URkrboLiJkQ5tBB4bmYWdb6MyhQzZ6ms7wf9'),
        serumPcVaultAccount: new web3_js_1.PublicKey('A6eEM36Vpyti2PoHK8h8Dqk5zu7YTaSRTQb7XXL8tcrV'),
        serumVaultSigner: new web3_js_1.PublicKey('EHMK3DdPiPBd9aBjeRU4aZjD7z568rmwHCSAAxRooPq6'),
        stakeKeys: null,
    }),
    _s[types_1.TokenID.RAY_USDT_RAYDIUM] = new RaydiumLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.RAY_USDT_RAYDIUM]),
        ammIdPubkey: new web3_js_1.PublicKey('DVa7Qmb5ct9RCpaU7UTpSaf3GVMYz17vNVU67XpdCRut'),
        ammAuthPubkey: new web3_js_1.PublicKey('5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'),
        ammOpenOrdersPubkey: new web3_js_1.PublicKey('7UF3m8hDGZ6bNnHzaT2YHrhp7A7n9qFfBj6QEpHPv5S8'),
        ammTargetOrderPubkey: new web3_js_1.PublicKey('3K2uLkKwVVPvZuMhcQAPLF8hw95somMeNwJS7vgWYrsJ'),
        poolCoinTokenPubkey: new web3_js_1.PublicKey('3wqhzSB9avepM9xMteiZnbJw75zmTBDVmPFLTQAGcSMN'),
        poolPcTokenPubkey: new web3_js_1.PublicKey('5GtSbKJEPaoumrDzNj4kGkgZtfDyUceKaHrPziazALC1'),
        poolWithdrawQueue: new web3_js_1.PublicKey('8VuvrSWfQP8vdbuMAP9AkfgLxU9hbRR6BmTJ8Gfas9aK'),
        poolTempLpTokenAccount: new web3_js_1.PublicKey('FBzqDD1cBgkZ1h6tiZNFpkh4sZyg6AG8K5P9DSuJoS5F'),
        serumProgramId: new web3_js_1.PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),
        serumMarketPubkey: new web3_js_1.PublicKey('teE55QrL4a4QSfydR9dnHF97jgCfptpuigbb53Lo95g'),
        serumCoinVaultAccount: new web3_js_1.PublicKey('2kVNVEgHicvfwiyhT2T51YiQGMPFWLMSp8qXc1hHzkpU'),
        serumPcVaultAccount: new web3_js_1.PublicKey('5AXZV7XfR7Ctr6yjQ9m9dbgycKeUXWnWqHwBTZT6mqC7'),
        serumVaultSigner: new web3_js_1.PublicKey('HzWpBN6ucpsA9wcfmhLAFYqEUmHjE9n2cGHwunG5avpL'),
        serumEventQueueAccount: new web3_js_1.PublicKey('58KcficuUqPDcMittSddhT8LzsPJoH46YP4uURoMo5EB'),
        serumBidsAccount: new web3_js_1.PublicKey('AvKStCiY8LTp3oDFrMkiHHxxhxk4sQUWnGVcetm4kRpy'),
        serumAsksAccount: new web3_js_1.PublicKey('Hj9kckvMX96mQokfMBzNCYEYMLEBYKQ9WwSc1GxasW11'),
        rewardAccounts: [
            {
                rewardToken: types_1.TokenID.RAY,
                userRewardAlphaAccountPubkey: new web3_js_1.PublicKey('Bq2M2YHcMVB9RDBjJsra4nP81qvJaAapY6fdCFoDNY61'),
                userRewardPublicAccountPubkey: new web3_js_1.PublicKey('3YUuGZJSF5Jdy3mXBXgWh86t2msj4d2WvNGawSsDZbHC'),
                rewardVault: new web3_js_1.PublicKey('HCHNuGzkqSnw9TbwpPv1gTnoqnqYepcojHw9DAToBrUj'), // ray
            },
        ],
        stakeKeys: {
            poolIdPubkey: new web3_js_1.PublicKey('AvbVWpBi2e4C9HPmZgShGdPoNydG4Yw8GJvG9HUcLgce'),
            poolAuthorityPubkey: new web3_js_1.PublicKey('8JYVFy3pYsPSpPRsqf43KSJFnJzn83nnRLQgG88XKB8q'),
            poolLPVault: new web3_js_1.PublicKey('4u4AnMBHXehdpP5tbD6qzB5Q4iZmvKKR5aUr2gavG7aw'),
        },
        stakeProgram: exports.SWAP_METAS[commands_1.SWAP_RAYDIUM].stakeProgramPubkey,
    }),
    _s[types_1.TokenID.RAY_ETH_RAYDIUM] = new RaydiumLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.RAY_ETH_RAYDIUM]),
        ammIdPubkey: new web3_js_1.PublicKey('8iQFhWyceGREsWnLM8NkG9GC8DvZunGZyMzuyUScgkMK'),
        ammAuthPubkey: new web3_js_1.PublicKey('5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'),
        ammOpenOrdersPubkey: new web3_js_1.PublicKey('7iztHknuo7FAXVrrpAjsHBEEjRTaNH4b3hecVApQnSwN'),
        ammTargetOrderPubkey: new web3_js_1.PublicKey('JChSqhn6yyEWqD95t8UR5DaZZtEZ1RGGjdwgMc8S6UUt'),
        poolCoinTokenPubkey: new web3_js_1.PublicKey('G3Szi8fUqxfZjZoNx17kQbxeMTyXt2ieRvju4f3eJt9j'),
        poolPcTokenPubkey: new web3_js_1.PublicKey('7MgaPPNa7ySdu5XV7ik29Xoav4qcDk4wznXZ2Muq9MnT'),
        poolWithdrawQueue: new web3_js_1.PublicKey('C9aijsE3tLbVyYaXXHi45qneDL5jfyN8befuJh8zzpou'),
        poolTempLpTokenAccount: new web3_js_1.PublicKey('3CDnyBsNnexdvfvo6ASde5Q4e72jzMQFHRRkSQr49vEG'),
        serumProgramId: new web3_js_1.PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),
        serumMarketPubkey: new web3_js_1.PublicKey('6jx6aoNFbmorwyncVP5V5ESKfuFc9oUYebob1iF6tgN4'),
        serumCoinVaultAccount: new web3_js_1.PublicKey('EVVtYo4AeCbmn2dYS1UnhtfjpzCXCcN26G1HmuHwMo7w'),
        serumPcVaultAccount: new web3_js_1.PublicKey('6ZT6KwvjLnJLpFdVfiRD9ifVUo4gv4MUie7VvPTuk69v'),
        serumVaultSigner: new web3_js_1.PublicKey('HXbRDLcX2FyqWJY95apnsTgBoRHyp7SWYXcMYod6EBrQ'),
        serumEventQueueAccount: new web3_js_1.PublicKey('EgcugBBSwM2FxqLQx5S6zAiU9x9qRS8qMVRMDFFU4Zty'),
        serumBidsAccount: new web3_js_1.PublicKey('Hdvh4ZGL9MkiQApNqfZtdmd4jM6Sz8e9akCUuxxkYhb8'),
        serumAsksAccount: new web3_js_1.PublicKey('7vWmTv9Mh8XbAxcduEqed2dLtro4N7hFroqch6mMxYKM'),
        rewardAccounts: [
            {
                rewardToken: types_1.TokenID.RAY,
                userRewardAlphaAccountPubkey: new web3_js_1.PublicKey('B2LykyWkPGVcqwRgozr4WRst5x9s5pCHhT9CA4NLwtui'),
                userRewardPublicAccountPubkey: new web3_js_1.PublicKey('5PzDUuUYWmkymdNznZmvWAj5nn89xwFbD844rMJveHY3'),
                rewardVault: new web3_js_1.PublicKey('7YfTgYQFGEJ4kb8jCF8cBrrUwEFskLin3EbvE1crqiQh'), // ray
            },
        ],
        stakeKeys: {
            poolIdPubkey: new web3_js_1.PublicKey('B6fbnZZ7sbKHR18ffEDD5Nncgp54iKN1GbCgjTRdqhS1'),
            poolAuthorityPubkey: new web3_js_1.PublicKey('6amoZ7YBbsz3uUUbkeEH4vDTNwjvgjxTiu6nGi9z1JGe'),
            poolLPVault: new web3_js_1.PublicKey('BjAfXpHTHz2kipraNddS6WwQvGGtbvyobn7MxLEEYfrH'),
        },
        stakeProgram: exports.SWAP_METAS[commands_1.SWAP_RAYDIUM].stakeProgramPubkey,
    }),
    _s[types_1.TokenID.RAY_SOL_RAYDIUM] = new RaydiumLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.RAY_SOL_RAYDIUM]),
        ammIdPubkey: new web3_js_1.PublicKey('AVs9TA4nWDzfPJE9gGVNJMVhcQy3V9PGazuz33BfG2RA'),
        ammAuthPubkey: new web3_js_1.PublicKey('5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'),
        ammOpenOrdersPubkey: new web3_js_1.PublicKey('6Su6Ea97dBxecd5W92KcVvv6SzCurE2BXGgFe9LNGMpE'),
        ammTargetOrderPubkey: new web3_js_1.PublicKey('5hATcCfvhVwAjNExvrg8rRkXmYyksHhVajWLa46iRsmE'),
        poolCoinTokenPubkey: new web3_js_1.PublicKey('Em6rHi68trYgBFyJ5261A2nhwuQWfLcirgzZZYoRcrkX'),
        poolPcTokenPubkey: new web3_js_1.PublicKey('3mEFzHsJyu2Cpjrz6zPmTzP7uoLFj9SbbecGVzzkL1mJ'),
        poolWithdrawQueue: new web3_js_1.PublicKey('FSHqX232PHE4ev9Dpdzrg9h2Tn1byChnX4tuoPUyjjdV'),
        poolTempLpTokenAccount: new web3_js_1.PublicKey('87CCkBfthmyqwPuCDwFmyqKWJfjYqPFhm5btkNyoALYZ'),
        serumProgramId: new web3_js_1.PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),
        serumMarketPubkey: new web3_js_1.PublicKey('C6tp2RVZnxBPFbnAsfTjis8BN9tycESAT4SgDQgbbrsA'),
        serumCoinVaultAccount: new web3_js_1.PublicKey('6U6U59zmFWrPSzm9sLX7kVkaK78Kz7XJYkrhP1DjF3uF'),
        serumPcVaultAccount: new web3_js_1.PublicKey('4YEx21yeUAZxUL9Fs7YU9Gm3u45GWoPFs8vcJiHga2eQ'),
        serumVaultSigner: new web3_js_1.PublicKey('7SdieGqwPJo5rMmSQM9JmntSEMoimM4dQn7NkGbNFcrd'),
        serumEventQueueAccount: new web3_js_1.PublicKey('4HGvdannxvmAhszVVig9auH6HsqVH17qoavDiNcnm9nj'),
        serumBidsAccount: new web3_js_1.PublicKey('C1nEbACFaHMUiKAUsXVYPWZsuxunJeBkqXHPFr8QgSj9'),
        serumAsksAccount: new web3_js_1.PublicKey('4DNBdnTw6wmrK4NmdSTTxs1kEz47yjqLGuoqsMeHvkMF'),
        rewardAccounts: [
            {
                rewardToken: types_1.TokenID.RAY,
                userRewardAlphaAccountPubkey: new web3_js_1.PublicKey('B7ewVyAG7YMDemDGKQNBxyGAuoN94w4J5K8NZa72A4BM'),
                userRewardPublicAccountPubkey: new web3_js_1.PublicKey('ChJUMQNtVNznGWaFUeNAqKD95hd1gmz9CRHobw3aMRbm'),
                rewardVault: new web3_js_1.PublicKey('6zA5RAQYgazm4dniS8AigjGFtRi4xneqjL7ehrSqCmhr'), // ray
            },
        ],
        stakeKeys: {
            poolIdPubkey: new web3_js_1.PublicKey('HUDr9BDaAGqi37xbQHzxCyXvfMCKPTPNF8g9c9bPu1Fu'),
            poolAuthorityPubkey: new web3_js_1.PublicKey('9VbmvaaPeNAke2MAL3h2Fw82VubH1tBCzwBzaWybGKiG'),
            poolLPVault: new web3_js_1.PublicKey('A4xQv2BQPB1WxsjiCC7tcMH7zUq255uCBkevFj8qSCyJ'),
        },
        stakeProgram: exports.SWAP_METAS[commands_1.SWAP_RAYDIUM].stakeProgramPubkey,
    }),
    _s[types_1.TokenID.SRM_USDC_RAYDIUM] = new RaydiumLpSwapInfo({
        lpMintPubkey: new web3_js_1.PublicKey(exports.MINTS[types_1.TokenID.SRM_USDC_RAYDIUM]),
        ammIdPubkey: new web3_js_1.PublicKey('8tzS7SkUZyHPQY7gLqsMCXZ5EDCgjESUHcB17tiR1h3Z'),
        ammAuthPubkey: new web3_js_1.PublicKey('5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1'),
        ammOpenOrdersPubkey: new web3_js_1.PublicKey('GJwrRrNeeQKY2eGzuXGc3KBrBftYbidCYhmA6AZj2Zur'),
        ammTargetOrderPubkey: new web3_js_1.PublicKey('26LLpo8rscCpMxyAnJsqhqESPnzjMGiFdmXA4eF2Jrk5'),
        poolCoinTokenPubkey: new web3_js_1.PublicKey('zuLDJ5SEe76L3bpFp2Sm9qTTe5vpJL3gdQFT5At5xXG'),
        poolPcTokenPubkey: new web3_js_1.PublicKey('4usvfgPDwXBX2ySX11ubTvJ3pvJHbGEW2ytpDGCSv5cw'),
        poolWithdrawQueue: new web3_js_1.PublicKey('7c1VbXTB7Xqx5eQQeUxAu5o6GHPq3P1ByhDsnRRUWYxB'),
        poolTempLpTokenAccount: new web3_js_1.PublicKey('2sozAi6zXDUCCkpgG3usphzeCDm4e2jTFngbm5atSdC9'),
        serumProgramId: new web3_js_1.PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),
        serumMarketPubkey: new web3_js_1.PublicKey('ByRys5tuUWDgL73G8JBAEfkdFf8JWBzPBDHsBVQ5vbQA'),
        serumCoinVaultAccount: new web3_js_1.PublicKey('Ecfy8et9Mft9Dkavnuh4mzHMa2KWYUbBTA5oDZNoWu84'),
        serumPcVaultAccount: new web3_js_1.PublicKey('hUgoKy5wjeFbZrXDW4ecr42T4F5Z1Tos31g68s5EHbP'),
        serumVaultSigner: new web3_js_1.PublicKey('GVV4ZT9pccwy9d17STafFDuiSqFbXuRTdvKQ1zJX6ttX'),
        rewardAccounts: [
            {
                rewardToken: types_1.TokenID.RAY,
                userRewardAlphaAccountPubkey: new web3_js_1.PublicKey('4jnfVscrBTf77bjkR2JSHQT6q7N7BWFyufG6YdZCR8re'),
                userRewardPublicAccountPubkey: new web3_js_1.PublicKey('2qgtUtNopD3ZCrQCbVsvYd1BrPeWxn4TcrXjwvTzLCYi'),
                rewardVault: new web3_js_1.PublicKey('9gs6XnKs3RMMSSQAZm3VCbRpoNmPMrGaQQGMmRKjPeSU'), // ray
            }, {
                rewardToken: types_1.TokenID.SRM,
                userRewardAlphaAccountPubkey: new web3_js_1.PublicKey('6E4seHTUoufVwALGE8XBYEMh5n7t4irwYXD6jtqgqzeM'),
                userRewardPublicAccountPubkey: new web3_js_1.PublicKey('2iy54EuEMgUVFMaRzxusiMSawgcHUgR34SZWaKkMosMc'),
                rewardVault: new web3_js_1.PublicKey('BsuQ3XCCapopam8byEzHzazyxcRn5dCT3UX9kUzozhw'), // srm
            }
        ],
        stakeKeys: {
            poolIdPubkey: new web3_js_1.PublicKey('27bysJaX5eu5Urb5kftR66otiVc6DKK7TnifKwnpNzYu'),
            poolAuthorityPubkey: new web3_js_1.PublicKey('HAWwtFc4MFNSXFyQbUZd2GefSwZLntCiumt1D6XM8jfk'),
            poolLPVault: new web3_js_1.PublicKey('HVEm5BG4jMHtwgrUtuiC9K17bjp9CjFpgqmzVABmzLxr'),
        },
    }),
    _s);
exports.LP_SWAP_METAS = {};
for (var key in exports.ORCA_LP_METAS) {
    var tokId = key;
    (0, tiny_invariant_1.default)(tokId in types_1.TokenID, "Invalid tokId: " + key);
    (0, tiny_invariant_1.default)(!(tokId in exports.LP_SWAP_METAS), tokId + " is duplicated");
    var value = exports.ORCA_LP_METAS[tokId];
    (0, tiny_invariant_1.default)(value);
    exports.LP_SWAP_METAS[tokId] = value;
}
for (var key in exports.SABER_LP_METAS) {
    var tokId = key;
    (0, tiny_invariant_1.default)(tokId in types_1.TokenID, "Invalid tokId: " + key);
    (0, tiny_invariant_1.default)(!(tokId in exports.LP_SWAP_METAS), tokId + " is duplicated");
    var value = exports.SABER_LP_METAS[tokId];
    (0, tiny_invariant_1.default)(value);
    exports.LP_SWAP_METAS[tokId] = value;
}
for (var key in exports.RAYDIUM_LP_METAS) {
    var tokId = key;
    (0, tiny_invariant_1.default)(tokId in types_1.TokenID, "Invalid tokId: " + key);
    (0, tiny_invariant_1.default)(!(tokId in exports.LP_SWAP_METAS), tokId + " is duplicated");
    var value = exports.RAYDIUM_LP_METAS[tokId];
    (0, tiny_invariant_1.default)(value);
    exports.LP_SWAP_METAS[tokId] = value;
}
exports.SWITCHBOARD_PRICE = (_t = {},
    _t[types_1.TokenID.BTC] = new web3_js_1.PublicKey('74YzQPGUT9VnjrBz8MuyDLKgKpbDqGot5xZJvTtMi6Ng'),
    _t[types_1.TokenID.ETH] = new web3_js_1.PublicKey('QJc2HgGhdtW4e7zjvLB1TGRuwEpTre2agU5Lap2UqYz'),
    _t[types_1.TokenID.SOL] = new web3_js_1.PublicKey('AdtRGGhmqvom3Jemp5YNrxd9q9unX36BZk1pujkkXijL'),
    _t[types_1.TokenID.mSOL] = new web3_js_1.PublicKey('CEPVH2t11KS4CaL3w4YxT9tRiijoGA4VEbnQ97cEpDmQ'),
    _t[types_1.TokenID.stSOL] = new web3_js_1.PublicKey('9r2p6vyF8Wp5YB2DASK95yuXEakQth6wmUmV2DpH91WX'),
    _t[types_1.TokenID.whETH] = new web3_js_1.PublicKey('QJc2HgGhdtW4e7zjvLB1TGRuwEpTre2agU5Lap2UqYz'),
    _t[types_1.TokenID.scnSOL] = new web3_js_1.PublicKey('DpzEKDSszosuzRUdRYzEcEbt6iZ4xhVEANQSRAYDYw8h'),
    _t[types_1.TokenID.APT] = new web3_js_1.PublicKey('CvLZbNUPLkbMuVK9YPqhvLu4UkXmrJbF98odXtPL6VRu'),
    _t[types_1.TokenID.RAY] = new web3_js_1.PublicKey('CppyF6264uKZkGua1brTUa2fSVdMFSCszwzDs76HCuzU'),
    _t[types_1.TokenID.ORCA] = new web3_js_1.PublicKey('EHwSRkm2ErRjWxCxrTxrmC7sT2kGb5jJcsiindUHAX7W'),
    _t[types_1.TokenID.SBR] = new web3_js_1.PublicKey('Lp3VNoRQi699VZe6u59TV8J38ELEUzxkaisoWsDuJgB'),
    // [TokenID.MERC]: new PublicKey(""), // MERC not on sb
    _t[types_1.TokenID.FTT] = new web3_js_1.PublicKey('6SqRewrr5f4ycWy7NvLmNgpXJbhwXrtTc1erL9aq2gP3'),
    _t[types_1.TokenID.SRM] = new web3_js_1.PublicKey('BAoygKcKN7wk8yKzLD6sxzUQUqLvhBV1rjMA4UJqfZuH'),
    _t[types_1.TokenID.USDT] = new web3_js_1.PublicKey('5mp8kbkTYwWWCsKSte8rURjTuyinsqBpJ9xAQsewPDD'),
    _t[types_1.TokenID.USDC] = new web3_js_1.PublicKey('CZx29wKMUxaJDq6aLVQTdViPL754tTR64NAgQBUGxxHb'),
    _t[types_1.TokenID.UST] = new web3_js_1.PublicKey('8o8gN6VnW45R8pPfQzUJUwJi2adFmsWwfGcFNmicWt61'),
    _t[types_1.TokenID.USTv2] = new web3_js_1.PublicKey('8o8gN6VnW45R8pPfQzUJUwJi2adFmsWwfGcFNmicWt61'),
    _t);
exports.PYTH_PRICE = (_u = {},
    _u[types_1.TokenID.BTC] = new web3_js_1.PublicKey('GVXRSBjFk6e6J3NbVPXohDJetcTjaeeuykUpbQF8UoMU'),
    _u[types_1.TokenID.ETH] = new web3_js_1.PublicKey('JBu1AL4obBcCMqKBBxhpWCNUt136ijcuMZLFvTP7iWdB'),
    _u[types_1.TokenID.SOL] = new web3_js_1.PublicKey('H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG'),
    _u[types_1.TokenID.mSOL] = new web3_js_1.PublicKey('E4v1BBgoso9s64TQvmyownAVJbhbEPGyzA3qn4n46qj9'),
    _u[types_1.TokenID.stSOL] = new web3_js_1.PublicKey('Bt1hEbY62aMriY1SyQqbeZbm8VmSbQVGBFzSzMuVNWzN'),
    _u[types_1.TokenID.whETH] = new web3_js_1.PublicKey('JBu1AL4obBcCMqKBBxhpWCNUt136ijcuMZLFvTP7iWdB'),
    // [TokenID.scnSOL]: new PublicKey(""),
    //[TokenID.APT]: new PublicKey(""),
    _u[types_1.TokenID.RAY] = new web3_js_1.PublicKey('AnLf8tVYCM816gmBjiy8n53eXKKEDydT5piYjjQDPgTB'),
    // [TokenID.ORCA]: new PublicKey(""),
    _u[types_1.TokenID.SBR] = new web3_js_1.PublicKey('8Td9VML1nHxQK6M8VVyzsHo32D7VBk72jSpa9U861z2A'),
    _u[types_1.TokenID.FTT] = new web3_js_1.PublicKey('8JPJJkmDScpcNmBRKGZuPuG2GYAveQgP3t5gFuMymwvF'),
    _u[types_1.TokenID.SRM] = new web3_js_1.PublicKey('3NBReDRTLKMQEKiLD5tGcx4kXbTf88b7f2xLS9UuGjym'),
    _u[types_1.TokenID.USDT] = new web3_js_1.PublicKey('3vxLXJqLqF3JG5TCbYycbKWRBbCJQLxQmBGCkyqEEefL'),
    _u[types_1.TokenID.USDC] = new web3_js_1.PublicKey('Gnt27xtC473ZT2Mw5u8wZ68Z3gULkSTb5DuxJy7eJotD'),
    _u[types_1.TokenID.UST] = new web3_js_1.PublicKey('H8DvrfSaRfUyP1Ytse1exGf7VSinLWtmKNNaBhA4as9P'),
    _u[types_1.TokenID.USTv2] = new web3_js_1.PublicKey('H8DvrfSaRfUyP1Ytse1exGf7VSinLWtmKNNaBhA4as9P'),
    _u);
exports.COINGECKO_PRICE_ID = (_v = {},
    _v[types_1.TokenID.MNDE] = 'marinade',
    _v[types_1.TokenID.wLDO] = 'lido-dao',
    _v[types_1.TokenID.wLUNA] = 'terra-luna',
    _v[types_1.TokenID.SOCN] = 'temp-socn',
    _v);
var FIREBASE_READER_CONFIG = {
    alpha: {
        apiKey: 'AIzaSyDWBTlo8oeJGnpV0CnQEBpeloMbHgN6xY8',
        authDomain: 'apricot-website-96904.firebaseapp.com',
        projectId: 'apricot-website-96904',
        storageBucket: 'apricot-website-96904.appspot.com',
        messagingSenderId: '181748660172',
        appId: '1:181748660172:web:fea7b301ef6a09c3d60f69',
        measurementId: 'G-W2RX0BF87Q',
    },
    public: {
        apiKey: 'AIzaSyAGpQxt6PUaLf1vhfhxL5hzWcP1QDIeOSc',
        authDomain: 'apricot-public.firebaseapp.com',
        projectId: 'apricot-public',
        storageBucket: 'apricot-public.appspot.com',
        messagingSenderId: '735163506624',
        appId: '1:735163506624:web:e6406687d889d993e93225',
        measurementId: 'G-VBTE0406R3',
    },
};
// alpha mainnet is where we deploy tests
exports.ALPHA_CONFIG = new types_1.AppConfig(new web3_js_1.PublicKey('5dtKmAzoJu4qDxMjjK7gWY2pPe6NWAX6HWQk5QUHaKQZ'), new web3_js_1.PublicKey('EFo9V7mFQgxz7xPMrJ6qLyrjfGXPgsEFEfGEtVQx2xKt'), new web3_js_1.PublicKey('3cWR2VDrVhQ43VX8B43MwTazfx66naioXurUh8vrkidt'), new web3_js_1.PublicKey('4DUvqxvab2BiJEYR7YHi3nM5tfyLNXFBQbJuExQPK9rf'), new web3_js_1.PublicKey('Ff9WeFriS8DoJkiZPEZRpmiFu5jzYx3xZzoGNpwWMp5J'), new web3_js_1.PublicKey('EQWujCg9fTnj2wi2oVWWkWsJmtRU2tpEUMhhiVSMtHCH'), new web3_js_1.PublicKey('Cuf4Hbuv9RDZ1vzuUE833MKzjeX7odsBeewEjhmVwVRk'), exports.MINTS, exports.DECIMAL_MULT, exports.CATEGORY, POOL_IDS, exports.LIQUIDATION_DISCOUNT, LTVS, exports.LP_TO_LR, exports.LP_TO_DEX, exports.LP_TO_TARGET_SWAP, exports.LP_TO_NEED_2ND_STAKE, exports.SWITCHBOARD_PRICE, exports.PYTH_PRICE, INTEREST_RATES, FEES, exports.LP_SWAP_METAS, FIREBASE_READER_CONFIG.alpha);
// public mainnet is where the real thing is
exports.PUBLIC_CONFIG = new types_1.AppConfig(
// not added yet
new web3_js_1.PublicKey('6UeJYTLU1adaoHWeApWsoj1xNEDbWA2RhM2DLc8CrDDi'), new web3_js_1.PublicKey('6L2QoTpr8WUd76eLAGnvow8i3WQzRP36C1qdUna9iwMn'), new web3_js_1.PublicKey('F5m8gNjC6pjynywcbw9kK1miSNJMw1nQGeviWykfCCXd'), new web3_js_1.PublicKey('FsSq4dqugLgZbsyLNt7bngtBkDApXaHUFXVQ6od5TeQ3'), new web3_js_1.PublicKey('GttyqdmooMEcgWqZPrb8FcdwjgaTLweLzuvVpnCMq5q1'), new web3_js_1.PublicKey('4aWV85p4o115qVo5p9sgbAGqYXmh34838xFpwuN1nxEP'), new web3_js_1.PublicKey('C1k4CehboSgUkmL3BJfw32Xj9HPs9NKTzhT5WXsYwWh4'), exports.MINTS, exports.DECIMAL_MULT, exports.CATEGORY, POOL_IDS, exports.LIQUIDATION_DISCOUNT, LTVS, exports.LP_TO_LR, exports.LP_TO_DEX, exports.LP_TO_TARGET_SWAP, exports.LP_TO_NEED_2ND_STAKE, exports.SWITCHBOARD_PRICE, exports.PYTH_PRICE, INTEREST_RATES, FEES, exports.LP_SWAP_METAS, FIREBASE_READER_CONFIG.public);
exports.DIRECT_SWAP_META = (_w = {},
    _w[types_1.TokenID.SOL] = (_x = {},
        _x[types_1.TokenID.USDC] = {
            targetSwap: commands_1.SWAP_RAYDIUM,
            getSwapKeys: function (_isBuy) {
                var smeta = solana_swaps_js_1.RAYDIUM_SOL_USDC_MARKET;
                // prettier-ignore
                return [
                    { pubkey: solana_swaps_js_1.RAYDIUM_AMM_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.amm, isSigner: false, isWritable: true },
                    { pubkey: smeta.ammAuthority, isSigner: false, isWritable: false },
                    { pubkey: smeta.openOrders, isSigner: false, isWritable: true },
                    { pubkey: smeta.targetOrders, isSigner: false, isWritable: true },
                    { pubkey: smeta.raydiumVaultA, isSigner: false, isWritable: true },
                    { pubkey: smeta.raydiumVaultB, isSigner: false, isWritable: true },
                    { pubkey: solana_swaps_js_1.SERUM_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.serumMarket, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumBids, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumAsks, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumEvents, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultA, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultB, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultSigner, isSigner: false, isWritable: false },
                ];
            },
        },
        _x),
    _w[types_1.TokenID.mSOL] = (_y = {},
        _y[types_1.TokenID.USDC] = {
            targetSwap: commands_1.SWAP_RAYDIUM,
            getSwapKeys: function (_isBuy) {
                var smeta = solana_swaps_js_1.RAYDIUM_mSOL_USDC_MARKET;
                // prettier-ignore
                return [
                    { pubkey: solana_swaps_js_1.RAYDIUM_AMM_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.amm, isSigner: false, isWritable: true },
                    { pubkey: smeta.ammAuthority, isSigner: false, isWritable: false },
                    { pubkey: smeta.openOrders, isSigner: false, isWritable: true },
                    { pubkey: smeta.targetOrders, isSigner: false, isWritable: true },
                    { pubkey: smeta.raydiumVaultA, isSigner: false, isWritable: true },
                    { pubkey: smeta.raydiumVaultB, isSigner: false, isWritable: true },
                    { pubkey: solana_swaps_js_1.SERUM_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.serumMarket, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumBids, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumAsks, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumEvents, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultA, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultB, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultSigner, isSigner: false, isWritable: false },
                ];
            },
        },
        _y),
    _w[types_1.TokenID.RAY] = (_z = {},
        _z[types_1.TokenID.USDC] = {
            targetSwap: commands_1.SWAP_RAYDIUM,
            getSwapKeys: function (_isBuy) {
                var smeta = solana_swaps_js_1.RAYDIUM_RAY_USDC_MARKET;
                // prettier-ignore
                return [
                    { pubkey: solana_swaps_js_1.RAYDIUM_AMM_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.amm, isSigner: false, isWritable: true },
                    { pubkey: smeta.ammAuthority, isSigner: false, isWritable: false },
                    { pubkey: smeta.openOrders, isSigner: false, isWritable: true },
                    { pubkey: smeta.targetOrders, isSigner: false, isWritable: true },
                    { pubkey: smeta.raydiumVaultA, isSigner: false, isWritable: true },
                    { pubkey: smeta.raydiumVaultB, isSigner: false, isWritable: true },
                    { pubkey: solana_swaps_js_1.SERUM_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.serumMarket, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumBids, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumAsks, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumEvents, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultA, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultB, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultSigner, isSigner: false, isWritable: false },
                ];
            },
        },
        _z),
    _w[types_1.TokenID.stSOL] = (_0 = {},
        _0[types_1.TokenID.USDC] = {
            targetSwap: commands_1.SWAP_RAYDIUM,
            getSwapKeys: function (_isBuy) {
                var smeta = solana_swaps_js_1.RAYDIUM_stSOL_USDC_MARKET;
                // prettier-ignore
                return [
                    { pubkey: solana_swaps_js_1.RAYDIUM_AMM_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.amm, isSigner: false, isWritable: true },
                    { pubkey: smeta.ammAuthority, isSigner: false, isWritable: false },
                    { pubkey: smeta.openOrders, isSigner: false, isWritable: true },
                    { pubkey: smeta.targetOrders, isSigner: false, isWritable: true },
                    { pubkey: smeta.raydiumVaultA, isSigner: false, isWritable: true },
                    { pubkey: smeta.raydiumVaultB, isSigner: false, isWritable: true },
                    { pubkey: solana_swaps_js_1.SERUM_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.serumMarket, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumBids, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumAsks, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumEvents, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultA, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultB, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultSigner, isSigner: false, isWritable: false },
                ];
            },
        },
        _0),
    _w[types_1.TokenID.whETH] = (_1 = {},
        _1[types_1.TokenID.USDC] = {
            targetSwap: commands_1.SWAP_RAYDIUM,
            getSwapKeys: function (_isBuy) {
                var smeta = solana_swaps_js_1.RAYDIUM_whETH_USDC_MARKET;
                // prettier-ignore
                return [
                    { pubkey: solana_swaps_js_1.RAYDIUM_AMM_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.amm, isSigner: false, isWritable: true },
                    { pubkey: smeta.ammAuthority, isSigner: false, isWritable: false },
                    { pubkey: smeta.openOrders, isSigner: false, isWritable: true },
                    { pubkey: smeta.targetOrders, isSigner: false, isWritable: true },
                    { pubkey: smeta.raydiumVaultA, isSigner: false, isWritable: true },
                    { pubkey: smeta.raydiumVaultB, isSigner: false, isWritable: true },
                    { pubkey: solana_swaps_js_1.SERUM_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.serumMarket, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumBids, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumAsks, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumEvents, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultA, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultB, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultSigner, isSigner: false, isWritable: false },
                ];
            },
        },
        _1),
    _w[types_1.TokenID.ORCA] = (_2 = {},
        _2[types_1.TokenID.USDC] = {
            targetSwap: commands_1.SWAP_ORCA,
            getSwapKeys: function (isBuy) {
                var smeta = solana_swaps_js_1.ORCA_ORCA_USDC_MARKET;
                var sourceVault = !isBuy ? smeta.vaultA : smeta.vaultB;
                var destVault = isBuy ? smeta.vaultA : smeta.vaultB;
                // prettier-ignore
                return [
                    { pubkey: solana_swaps_js_1.ORCA_SWAP_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.swap, isSigner: false, isWritable: false },
                    { pubkey: smeta.swapAuthority, isSigner: false, isWritable: false },
                    { pubkey: sourceVault, isSigner: false, isWritable: true },
                    { pubkey: destVault, isSigner: false, isWritable: true },
                    { pubkey: smeta.poolMint, isSigner: false, isWritable: true },
                    { pubkey: smeta.fees, isSigner: false, isWritable: true },
                ];
            },
        },
        _2),
    _w[types_1.TokenID.USDT] = (_3 = {},
        _3[types_1.TokenID.USDC] = {
            targetSwap: commands_1.SWAP_ORCA,
            getSwapKeys: function (isBuy) {
                var smeta = solana_swaps_js_1.ORCA_USDT_USDC_MARKET;
                var sourceVault = !isBuy ? smeta.vaultA : smeta.vaultB;
                var destVault = isBuy ? smeta.vaultA : smeta.vaultB;
                // prettier-ignore
                return [
                    { pubkey: solana_swaps_js_1.ORCA_SWAP_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.swap, isSigner: false, isWritable: false },
                    { pubkey: smeta.swapAuthority, isSigner: false, isWritable: false },
                    { pubkey: sourceVault, isSigner: false, isWritable: true },
                    { pubkey: destVault, isSigner: false, isWritable: true },
                    { pubkey: smeta.poolMint, isSigner: false, isWritable: true },
                    { pubkey: smeta.fees, isSigner: false, isWritable: true },
                ];
            },
        },
        _3),
    _w[types_1.TokenID.UST] = (_4 = {},
        _4[types_1.TokenID.USDC] = {
            targetSwap: commands_1.SWAP_MERCURIAL,
            getSwapKeys: function () {
                var smeta = solana_swaps_js_1.MERCURIAL_USTv1_USDC_MARKET;
                // prettier-ignore
                return [
                    { pubkey: solana_swaps_js_1.MERCURIAL_SWAP_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.swap, isSigner: false, isWritable: false },
                    { pubkey: smeta.swapAuthority, isSigner: false, isWritable: false },
                    { pubkey: smeta.vaultA, isSigner: false, isWritable: true },
                    { pubkey: smeta.vaultB, isSigner: false, isWritable: true },
                    { pubkey: smeta.vaultC, isSigner: false, isWritable: true },
                ];
            },
        },
        _4),
    _w[types_1.TokenID.USTv2] = (_5 = {},
        _5[types_1.TokenID.USDC] = {
            targetSwap: commands_1.SWAP_SABER,
            getSwapKeys: function (isBuy) {
                var smeta = solana_swaps_js_1.SABER_USTv2_USDC_MARKET;
                var sourceVault = !isBuy ? smeta.swapVaultA : smeta.swapVaultB;
                var destVault = isBuy ? smeta.swapVaultA : smeta.swapVaultB;
                var adminFeeDestination = isBuy ? smeta.adminFeeDestinationA : smeta.adminFeeDestinationB;
                // prettier-ignore
                return [
                    { pubkey: solana_swaps_js_1.SABER_SWAP_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.swap, isSigner: false, isWritable: false },
                    { pubkey: smeta.swapAuthority, isSigner: false, isWritable: false },
                    { pubkey: sourceVault, isSigner: false, isWritable: true },
                    { pubkey: destVault, isSigner: false, isWritable: true },
                    { pubkey: adminFeeDestination, isSigner: false, isWritable: true },
                    { pubkey: web3_js_1.SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },
                ];
            },
        },
        _5),
    _w[types_1.TokenID.APT] = (_6 = {},
        _6[types_1.TokenID.USDC] = {
            targetSwap: commands_1.SWAP_RAYDIUM,
            getSwapKeys: function (_isBuy) {
                var smeta = solana_swaps_js_1.RAYDIUM_APT_USDC_MARKET;
                // prettier-ignore
                return [
                    { pubkey: solana_swaps_js_1.RAYDIUM_AMM_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.amm, isSigner: false, isWritable: true },
                    { pubkey: smeta.ammAuthority, isSigner: false, isWritable: false },
                    { pubkey: smeta.openOrders, isSigner: false, isWritable: true },
                    { pubkey: smeta.targetOrders, isSigner: false, isWritable: true },
                    { pubkey: smeta.raydiumVaultA, isSigner: false, isWritable: true },
                    { pubkey: smeta.raydiumVaultB, isSigner: false, isWritable: true },
                    { pubkey: solana_swaps_js_1.SERUM_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.serumMarket, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumBids, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumAsks, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumEvents, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultA, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultB, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultSigner, isSigner: false, isWritable: false },
                ];
            },
        },
        _6),
    _w[types_1.TokenID.SRM] = (_7 = {},
        _7[types_1.TokenID.USDC] = {
            targetSwap: commands_1.SWAP_RAYDIUM,
            getSwapKeys: function (_isBuy) {
                var smeta = solana_swaps_js_1.RAYDIUM_SRM_USDC_MARKET;
                // prettier-ignore
                return [
                    { pubkey: solana_swaps_js_1.RAYDIUM_AMM_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.amm, isSigner: false, isWritable: true },
                    { pubkey: smeta.ammAuthority, isSigner: false, isWritable: false },
                    { pubkey: smeta.openOrders, isSigner: false, isWritable: true },
                    { pubkey: smeta.targetOrders, isSigner: false, isWritable: true },
                    { pubkey: smeta.raydiumVaultA, isSigner: false, isWritable: true },
                    { pubkey: smeta.raydiumVaultB, isSigner: false, isWritable: true },
                    { pubkey: solana_swaps_js_1.SERUM_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.serumMarket, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumBids, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumAsks, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumEvents, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultA, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultB, isSigner: false, isWritable: true },
                    { pubkey: smeta.serumVaultSigner, isSigner: false, isWritable: false },
                ];
            },
        },
        _7),
    _w[types_1.TokenID.FTT] = (_8 = {},
        _8[types_1.TokenID.USDC] = {
            targetSwap: commands_1.SWAP_ORCA,
            getSwapKeys: function (isBuy) {
                var smeta = solana_swaps_js_1.ORCA_FTT_USDC_MARKET;
                var sourceVault = !isBuy ? smeta.vaultA : smeta.vaultB;
                var destVault = isBuy ? smeta.vaultA : smeta.vaultB;
                // prettier-ignore
                return [
                    { pubkey: solana_swaps_js_1.ORCA_SWAP_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.swap, isSigner: false, isWritable: false },
                    { pubkey: smeta.swapAuthority, isSigner: false, isWritable: false },
                    { pubkey: sourceVault, isSigner: false, isWritable: true },
                    { pubkey: destVault, isSigner: false, isWritable: true },
                    { pubkey: smeta.poolMint, isSigner: false, isWritable: true },
                    { pubkey: smeta.fees, isSigner: false, isWritable: true },
                ];
            },
        },
        _8),
    _w[types_1.TokenID.scnSOL] = (_9 = {},
        _9[types_1.TokenID.USDC] = {
            targetSwap: commands_1.SWAP_ORCA,
            getSwapKeys: function (isBuy) {
                var smeta = solana_swaps_js_1.ORCA_scnSOL_USDC_MARKET;
                var sourceVault = !isBuy ? smeta.vaultA : smeta.vaultB;
                var destVault = isBuy ? smeta.vaultA : smeta.vaultB;
                // prettier-ignore
                return [
                    { pubkey: solana_swaps_js_1.ORCA_SWAP_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.swap, isSigner: false, isWritable: false },
                    { pubkey: smeta.swapAuthority, isSigner: false, isWritable: false },
                    { pubkey: sourceVault, isSigner: false, isWritable: true },
                    { pubkey: destVault, isSigner: false, isWritable: true },
                    { pubkey: smeta.poolMint, isSigner: false, isWritable: true },
                    { pubkey: smeta.fees, isSigner: false, isWritable: true },
                ];
            },
        },
        _9),
    _w[types_1.TokenID.BTC] = (_10 = {},
        _10[types_1.TokenID.USDC] = {
            targetSwap: commands_1.SWAP_ORCA,
            getSwapKeys: function (isBuy) {
                var smeta = solana_swaps_js_1.ORCA_BTC_USDC_MARKET;
                var sourceVault = !isBuy ? smeta.vaultA : smeta.vaultB;
                var destVault = isBuy ? smeta.vaultA : smeta.vaultB;
                // prettier-ignore
                return [
                    { pubkey: solana_swaps_js_1.ORCA_SWAP_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.swap, isSigner: false, isWritable: false },
                    { pubkey: smeta.swapAuthority, isSigner: false, isWritable: false },
                    { pubkey: sourceVault, isSigner: false, isWritable: true },
                    { pubkey: destVault, isSigner: false, isWritable: true },
                    { pubkey: smeta.poolMint, isSigner: false, isWritable: true },
                    { pubkey: smeta.fees, isSigner: false, isWritable: true },
                ];
            },
        },
        _10),
    _w[types_1.TokenID.ETH] = (_11 = {},
        _11[types_1.TokenID.USDC] = {
            targetSwap: commands_1.SWAP_ORCA,
            getSwapKeys: function (isBuy) {
                var smeta = solana_swaps_js_1.ORCA_ETH_USDC_MARKET;
                var sourceVault = !isBuy ? smeta.vaultA : smeta.vaultB;
                var destVault = isBuy ? smeta.vaultA : smeta.vaultB;
                // prettier-ignore
                return [
                    { pubkey: solana_swaps_js_1.ORCA_SWAP_PROGRAM, isSigner: false, isWritable: false },
                    { pubkey: smeta.swap, isSigner: false, isWritable: false },
                    { pubkey: smeta.swapAuthority, isSigner: false, isWritable: false },
                    { pubkey: sourceVault, isSigner: false, isWritable: true },
                    { pubkey: destVault, isSigner: false, isWritable: true },
                    { pubkey: smeta.poolMint, isSigner: false, isWritable: true },
                    { pubkey: smeta.fees, isSigner: false, isWritable: true },
                ];
            },
        },
        _11),
    _w);
//# sourceMappingURL=configs.js.map