import { PublicKey } from '@solana/web3.js';
import { TokenID, TokenCategory, AppConfig, Dex, LpSwapKeyInfo, AdhocSwapInfo, DualRewardInfo } from '../types';
import { Decimal } from 'decimal.js';
export declare const FAKE_KEY: PublicKey;
export declare const SAFE_LIMIT: Decimal;
export declare const FORCE_ASSIST_LIMIT: Decimal;
export declare const LIQUIDATION_LIMIT: Decimal;
export declare const MINTS: {
    [key in TokenID]: PublicKey;
};
export declare const DECIMAL_MULT: {
    [key in TokenID]: number;
};
export declare class InterestRate {
    baseRate: number;
    kink: number;
    kinkRate: number;
    fullRate: number;
    multiplier: number;
    jumpMultiplier: number;
    constructor(baseRate: number, kink: number, kinkRate: number, fullRate: number);
}
export declare const CATEGORY: {
    [key in TokenID]: TokenCategory;
};
export declare const LIQUIDATION_DISCOUNT: {
    [key in TokenID]?: number;
};
export declare const LP_TO_LR: {
    [key in TokenID]?: [TokenID, TokenID];
};
export declare const LP_TO_TARGET_SWAP: {
    [key in TokenID]?: number;
};
export declare const LP_TO_DEX: {
    [key in TokenID]?: Dex;
};
export declare const LP_TO_NEED_2ND_STAKE: {
    [key in TokenID]?: boolean;
};
export declare const SWAP_METAS: {
    3: {
        stake_program: PublicKey;
        deposit_program: PublicKey;
        redeem_program: PublicKey;
    };
    5: {
        depositProgramPubkey: PublicKey;
        farmProgramPubkey: PublicKey;
    };
    2: {
        depositProgramPubkey: PublicKey;
        stakeProgramPubkey: PublicKey;
        stakeProgramV5Pubkey: PublicKey;
    };
};
export declare const DUAL_REWARD_CONFIGS: {
    [key in TokenID]?: DualRewardInfo;
};
declare type SaberLpArgs = {
    swap: PublicKey;
    swapAuthority: PublicKey;
    tokenAVault: PublicKey;
    tokenBVault: PublicKey;
    tokenAfees: PublicKey;
    tokenBfees: PublicKey;
    quarry: PublicKey;
    rewarder: PublicKey;
    mint: PublicKey;
};
export declare class SaberLpSwapInfo implements LpSwapKeyInfo {
    swap: PublicKey;
    swapAuthority: PublicKey;
    tokenAVault: PublicKey;
    tokenBVault: PublicKey;
    tokenAfees: PublicKey;
    tokenBfees: PublicKey;
    quarry: PublicKey;
    rewarder: PublicKey;
    mint: PublicKey;
    constructor(args: SaberLpArgs);
    getMinerKey(ownerKey: PublicKey): Promise<[PublicKey, number]>;
    getMinerVault(ownerKey: PublicKey): Promise<PublicKey>;
    getLpDepositKeys(_ownerKey: PublicKey): Promise<{
        pubkey: PublicKey;
        isSigner: boolean;
        isWritable: boolean;
    }[]>;
    getLpWithdrawKeys(): Promise<{
        pubkey: PublicKey;
        isSigner: boolean;
        isWritable: boolean;
    }[]>;
    getLpStakeKeys(ownerKey: PublicKey): Promise<{
        pubkey: PublicKey;
        isSigner: boolean;
        isWritable: boolean;
    }[]>;
    getLRVaults(): [PublicKey, PublicKey];
}
declare type OrcaLpArgs = {
    lpMintPubkey: PublicKey;
    swapPubkey: PublicKey;
    swapAuthority: PublicKey;
    swapTokenAAccount: PublicKey;
    swapTokenBAccount: PublicKey;
    globalLpVault: PublicKey;
    farmTokenMint: PublicKey;
    globalFarmState: PublicKey;
    globalRewardTokenVault: PublicKey;
    rewardTokenAuthority: PublicKey;
    feeAccount: PublicKey;
    publicRewardTokAcc: PublicKey;
    alphaRewardTokAcc: PublicKey;
    isDoubleDipSupported?: boolean;
    globalLp3Vault?: PublicKey;
    farmTokenLp3Mint?: PublicKey;
    globalDoubleDipFarmState?: PublicKey;
    globalDoubleDipRewardTokenVault?: PublicKey;
    doubleDipRewardTokenAuthority?: PublicKey;
    publicDoubleDipRewardAcc?: PublicKey;
    alphaDoubleDipRewardAcc?: PublicKey;
    doubleDipRewardMint?: PublicKey;
};
export declare class OrcaLpSwapInfo implements LpSwapKeyInfo {
    lpMintPubkey: PublicKey;
    swapPubkey: PublicKey;
    swapAuthority: PublicKey;
    swapTokenAAccount: PublicKey;
    swapTokenBAccount: PublicKey;
    globalLpVault: PublicKey;
    farmTokenMint: PublicKey;
    globalFarmState: PublicKey;
    globalRewardTokenVault: PublicKey;
    rewardTokenAuthority: PublicKey;
    feeAccount: PublicKey;
    publicRewardTokAcc: PublicKey;
    alphaRewardTokAcc: PublicKey;
    isDoubleDipSupported: boolean;
    globalLp3Vault?: PublicKey;
    farmTokenLp3Mint?: PublicKey;
    globalDoubleDipFarmState?: PublicKey;
    globalDoubleDipRewardTokenVault?: PublicKey;
    doubleDipRewardTokenAuthority?: PublicKey;
    publicDoubleDipRewardAcc?: PublicKey;
    alphaDoubleDipRewardAcc?: PublicKey;
    doubleDipRewardMint?: PublicKey;
    constructor(args: OrcaLpArgs);
    getPdaKeys(ownerKey: PublicKey): Promise<{
        pdaFarmTokenAccount: PublicKey;
        pdaRewardTokenAccount: PublicKey;
        pdaFarmState: PublicKey;
    }>;
    getPdaDoubleDipKeys(ownerKey: PublicKey): Promise<{
        pdaDoubleDipFarmTokenAccount: PublicKey;
        pdaDoubleDipRewardTokenAccount: PublicKey;
        pdaDoubleDipFarmState: PublicKey;
    }>;
    getLpDepositKeys(_ownerKey: PublicKey): Promise<{
        pubkey: PublicKey;
        isSigner: boolean;
        isWritable: boolean;
    }[]>;
    getLpWithdrawKeys(_ownerKey: PublicKey): Promise<{
        pubkey: PublicKey;
        isSigner: boolean;
        isWritable: boolean;
    }[]>;
    getLpStakeKeys(ownerKey: PublicKey): Promise<{
        pubkey: PublicKey;
        isSigner: boolean;
        isWritable: boolean;
    }[]>;
    getFirstStakeKeys(ownerKey: PublicKey): Promise<{
        pubkey: PublicKey;
        isSigner: boolean;
        isWritable: boolean;
    }[]>;
    getSecondStakeKeys(ownerKey: PublicKey): Promise<{
        pubkey: PublicKey;
        isSigner: boolean;
        isWritable: boolean;
    }[]>;
    getLRVaults(): [PublicKey, PublicKey];
}
declare type RaydiumStakeKeys = {
    poolIdPubkey: PublicKey;
    poolAuthorityPubkey: PublicKey;
    poolLPVault: PublicKey;
};
declare type RaydiumRewardKeys = {
    rewardToken: TokenID;
    userRewardAlphaAccountPubkey: PublicKey;
    userRewardPublicAccountPubkey: PublicKey;
    rewardVault: PublicKey;
};
declare type RaydiumLpArgs = {
    lpMintPubkey: PublicKey;
    ammIdPubkey: PublicKey;
    ammAuthPubkey: PublicKey;
    ammOpenOrdersPubkey: PublicKey;
    ammTargetOrderPubkey: PublicKey;
    poolCoinTokenPubkey: PublicKey;
    poolPcTokenPubkey: PublicKey;
    poolWithdrawQueue: PublicKey;
    poolTempLpTokenAccount: PublicKey;
    serumProgramId: PublicKey;
    serumMarketPubkey: PublicKey;
    serumCoinVaultAccount: PublicKey;
    serumPcVaultAccount: PublicKey;
    serumVaultSigner: PublicKey;
    rewardAccounts?: RaydiumRewardKeys[];
    stakeKeys: RaydiumStakeKeys | null;
    stakeProgram?: PublicKey;
    serumEventQueueAccount?: PublicKey;
    serumBidsAccount?: PublicKey;
    serumAsksAccount?: PublicKey;
};
export declare class RaydiumLpSwapInfo implements LpSwapKeyInfo {
    lpMintPubkey: PublicKey;
    ammIdPubkey: PublicKey;
    ammAuthPubkey: PublicKey;
    ammOpenOrdersPubkey: PublicKey;
    ammTargetOrderPubkey: PublicKey;
    poolCoinTokenPubkey: PublicKey;
    poolPcTokenPubkey: PublicKey;
    poolWithdrawQueue: PublicKey;
    poolTempLpTokenAccount: PublicKey;
    serumProgramId: PublicKey;
    serumMarketPubkey: PublicKey;
    serumCoinVaultAccount: PublicKey;
    serumPcVaultAccount: PublicKey;
    serumVaultSigner: PublicKey;
    rewardAccounts?: RaydiumRewardKeys[];
    stakeKeys: RaydiumStakeKeys | null;
    stakeProgram: PublicKey;
    serumEventQueueAccount?: PublicKey;
    serumBidsAccount?: PublicKey;
    serumAsksAccount?: PublicKey;
    constructor(args: RaydiumLpArgs);
    getLpDepositKeys(_ownerKey: PublicKey): Promise<{
        pubkey: PublicKey;
        isSigner: boolean;
        isWritable: boolean;
    }[]>;
    getLpWithdrawKeys(_ownerKey: PublicKey): Promise<{
        pubkey: PublicKey;
        isSigner: boolean;
        isWritable: boolean;
    }[]>;
    getLpStakeKeys(ownerKey: PublicKey): Promise<{
        pubkey: PublicKey;
        isSigner: boolean;
        isWritable: boolean;
    }[]>;
    getUserRewardAccountsToClaim(ownerKey: PublicKey): Promise<Record<TokenID, PublicKey>>;
    getLRVaults(): [PublicKey, PublicKey];
    getAssociatedLedger(owner: PublicKey): Promise<PublicKey>;
}
export declare const SABER_LP_METAS: {
    [key in TokenID]?: SaberLpSwapInfo;
};
export declare const ORCA_LP_METAS: {
    [key in TokenID]?: OrcaLpSwapInfo;
};
export declare const RAYDIUM_LP_METAS: {
    [key in TokenID]?: RaydiumLpSwapInfo;
};
export declare const LP_SWAP_METAS: {
    [key in TokenID]?: LpSwapKeyInfo;
};
export declare const SWITCHBOARD_PRICE: {
    [key in TokenID]?: PublicKey;
};
export declare const PYTH_PRICE: {
    [key in TokenID]?: PublicKey;
};
export declare const COINGECKO_PRICE_ID: {
    [key in TokenID]?: string;
};
export declare const ALPHA_CONFIG: AppConfig;
export declare const PUBLIC_CONFIG: AppConfig;
export declare const DIRECT_SWAP_META: {
    [key in TokenID]?: {
        [key in TokenID]?: AdhocSwapInfo;
    };
};
export {};
