import { PublicKey, TransactionInstruction } from "@solana/web3.js";
export declare enum TokenID {
    APT = "APT",
    BTC = "BTC",
    ETH = "ETH",
    SOL = "SOL",
    mSOL = "mSOL",
    RAY = "RAY",
    SRM = "SRM",
    USDT = "USDT",
    USDC = "USDC",
    UST = "UST",
    PAI = "PAI",
    SBR = "SBR",
    ORCA = "ORCA",
    USTv2 = "USTv2",
    MNDE = "MNDE",
    FTT = "FTT",
    stSOL = "stSOL",
    whETH = "whETH",
    scnSOL = "scnSOL"
}
export declare enum SwapperType {
    Single = "Single",
    Multi = "Multi"
}
export declare abstract class Market {
    name: string;
    tokenIds: TokenID[];
    constructor(name: string, tokenIds: TokenID[]);
    abstract getSwapper(args: any): Swapper;
}
export declare abstract class MultiMarket {
    markets: Market[];
    constructor(markets: Market[]);
}
export interface PairMarket {
    tokenIdA: TokenID;
    tokenIdB: TokenID;
}
export interface Swapper {
    createSwapInstructions(fromToken: TokenID, fromAmount: number, fromTokenAccount: PublicKey, toToken: TokenID, minToAmount: number, toTokenAccount: PublicKey, tradeOwner: PublicKey): Promise<TransactionInstruction[]>;
}
export interface MultiSwapper {
    createMultiSwapInstructions(fromToken: TokenID, fromAmount: number, fromTokenAccount: PublicKey, middleToken: TokenID, middleTokenAccount: PublicKey, toToken: TokenID, minToAmount: number, toTokenAccount: PublicKey, tradeOwner: PublicKey): Promise<TransactionInstruction[]>;
}
export declare function IsMultiSwapper(object: any): boolean;
export declare class Dex {
    markets: {
        [name: string]: Market;
    };
    constructor(markets: [Market]);
}
