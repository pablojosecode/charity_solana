"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// test only works in node
var fs = __importStar(require("fs"));
var raydium_1 = require("./raydium");
var orca_1 = require("./orca");
var saber_1 = require("./saber");
var web3_js_1 = require("@solana/web3.js");
var spl_token_1 = require("@solana/spl-token");
var types_1 = require("./types");
var mints_1 = require("./mints");
var mercurial_1 = require("./mercurial");
var tiny_invariant_1 = __importDefault(require("tiny-invariant"));
if (process.argv.length < 6) {
    console.log("Usage: node " + process.argv[1] + " privateKeyFile COIN buySell sellAmt");
    console.log('privateKeyFile is the address of the private key json to use');
    console.log('COIN is one of BTC, ETH or SOL');
    console.log('buySell is buy or sell');
    process.exit();
}
var _a = process.argv, fileStr = _a[2], coin = _a[3], buySell = _a[4], sellAmt = _a[5], buyAmt = _a[6];
function getAssociatedTokAcc(tokenId, owner) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, spl_token_1.Token.getAssociatedTokenAddress(spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID, spl_token_1.TOKEN_PROGRAM_ID, mints_1.MINTS[tokenId], owner)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
function doSwap() {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function () {
        var keyStr, privateKey, keypair, aptTokenAccount, btcTokenAccount, ethTokenAccount, solTokenAccount, msolTokenAccount, usdcTokenAccount, usdtTokenAccount, ustTokenAccount, sbrTokenAccount, orcaTokenAccount, rayTokenAccount, ustv2TokenAccount, mndeTokenAccount, fttTokenAccount, srmTokenAccount, stSolTokenAccount, whEthTokenAccount, scnSOLTokenAccount, conn, isBuy, mainTokenType, tokenAccounts, mainTokenAcc, getSwapper, swapper, tokenBAcc, buyTokenID, buyTokenAcc, sellTokenID, sellTokenAcc, swapperType, parsedBuyBeforeAmt, tradeIxs, tradeTx, sig, parsedBuyAfterAmt;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    keyStr = fs.readFileSync(fileStr, 'utf8');
                    privateKey = JSON.parse(keyStr);
                    keypair = web3_js_1.Keypair.fromSecretKey(new Uint8Array(privateKey));
                    return [4 /*yield*/, getAssociatedTokAcc(types_1.TokenID.APT, keypair.publicKey)];
                case 1:
                    aptTokenAccount = _c.sent();
                    return [4 /*yield*/, getAssociatedTokAcc(types_1.TokenID.BTC, keypair.publicKey)];
                case 2:
                    btcTokenAccount = _c.sent();
                    return [4 /*yield*/, getAssociatedTokAcc(types_1.TokenID.ETH, keypair.publicKey)];
                case 3:
                    ethTokenAccount = _c.sent();
                    return [4 /*yield*/, getAssociatedTokAcc(types_1.TokenID.SOL, keypair.publicKey)];
                case 4:
                    solTokenAccount = _c.sent();
                    return [4 /*yield*/, getAssociatedTokAcc(types_1.TokenID.mSOL, keypair.publicKey)];
                case 5:
                    msolTokenAccount = _c.sent();
                    return [4 /*yield*/, getAssociatedTokAcc(types_1.TokenID.USDC, keypair.publicKey)];
                case 6:
                    usdcTokenAccount = _c.sent();
                    return [4 /*yield*/, getAssociatedTokAcc(types_1.TokenID.USDT, keypair.publicKey)];
                case 7:
                    usdtTokenAccount = _c.sent();
                    return [4 /*yield*/, getAssociatedTokAcc(types_1.TokenID.UST, keypair.publicKey)];
                case 8:
                    ustTokenAccount = _c.sent();
                    return [4 /*yield*/, getAssociatedTokAcc(types_1.TokenID.SBR, keypair.publicKey)];
                case 9:
                    sbrTokenAccount = _c.sent();
                    return [4 /*yield*/, getAssociatedTokAcc(types_1.TokenID.ORCA, keypair.publicKey)];
                case 10:
                    orcaTokenAccount = _c.sent();
                    return [4 /*yield*/, getAssociatedTokAcc(types_1.TokenID.RAY, keypair.publicKey)];
                case 11:
                    rayTokenAccount = _c.sent();
                    return [4 /*yield*/, getAssociatedTokAcc(types_1.TokenID.USTv2, keypair.publicKey)];
                case 12:
                    ustv2TokenAccount = _c.sent();
                    return [4 /*yield*/, getAssociatedTokAcc(types_1.TokenID.MNDE, keypair.publicKey)];
                case 13:
                    mndeTokenAccount = _c.sent();
                    return [4 /*yield*/, getAssociatedTokAcc(types_1.TokenID.FTT, keypair.publicKey)];
                case 14:
                    fttTokenAccount = _c.sent();
                    return [4 /*yield*/, getAssociatedTokAcc(types_1.TokenID.SRM, keypair.publicKey)];
                case 15:
                    srmTokenAccount = _c.sent();
                    return [4 /*yield*/, getAssociatedTokAcc(types_1.TokenID.stSOL, keypair.publicKey)];
                case 16:
                    stSolTokenAccount = _c.sent();
                    return [4 /*yield*/, getAssociatedTokAcc(types_1.TokenID.whETH, keypair.publicKey)];
                case 17:
                    whEthTokenAccount = _c.sent();
                    return [4 /*yield*/, getAssociatedTokAcc(types_1.TokenID.scnSOL, keypair.publicKey)];
                case 18:
                    scnSOLTokenAccount = _c.sent();
                    conn = new web3_js_1.Connection('https://apricot.genesysgo.net/', 'confirmed');
                    isBuy = buySell === 'buy';
                    mainTokenType = {
                        APT: types_1.TokenID.APT,
                        BTC: types_1.TokenID.BTC,
                        ETH: types_1.TokenID.ETH,
                        SOL: types_1.TokenID.SOL,
                        mSOL: types_1.TokenID.mSOL,
                        USDT: types_1.TokenID.USDT,
                        UST: types_1.TokenID.UST,
                        SBR: types_1.TokenID.SBR,
                        ORCA: types_1.TokenID.ORCA,
                        RAY: types_1.TokenID.RAY,
                        USTv2: types_1.TokenID.USTv2,
                        MNDE: types_1.TokenID.MNDE,
                        SRM: types_1.TokenID.SRM,
                        FTT: types_1.TokenID.FTT,
                        stSOL: types_1.TokenID.stSOL,
                        whETH: types_1.TokenID.whETH,
                        scnSOL: types_1.TokenID.scnSOL,
                    }[coin];
                    (0, tiny_invariant_1.default)(mainTokenType);
                    tokenAccounts = {
                        APT: aptTokenAccount,
                        USDC: usdcTokenAccount,
                        BTC: btcTokenAccount,
                        ETH: ethTokenAccount,
                        SOL: solTokenAccount,
                        mSOL: msolTokenAccount,
                        USDT: usdtTokenAccount,
                        UST: ustTokenAccount,
                        SBR: sbrTokenAccount,
                        ORCA: orcaTokenAccount,
                        RAY: rayTokenAccount,
                        USTv2: ustv2TokenAccount,
                        MNDE: mndeTokenAccount,
                        SRM: srmTokenAccount,
                        PAI: undefined,
                        FTT: fttTokenAccount,
                        stSOL: stSolTokenAccount,
                        whETH: whEthTokenAccount,
                        scnSOL: scnSOLTokenAccount,
                    };
                    mainTokenAcc = tokenAccounts[mainTokenType];
                    (0, tiny_invariant_1.default)(mainTokenAcc);
                    getSwapper = {
                        APT: function () { return raydium_1.RAYDIUM_APT_USDC_MARKET; },
                        BTC: function () { return raydium_1.RAYDIUM_BTC_USDC_MARKET; },
                        ETH: function () { return raydium_1.RAYDIUM_ETH_USDC_MARKET; },
                        SOL: function () { return raydium_1.RAYDIUM_SOL_USDC_MARKET; },
                        mSOL: function () { return raydium_1.RAYDIUM_mSOL_USDC_MARKET; },
                        USDT: function () { return orca_1.ORCA_USDT_USDC_MARKET; },
                        UST: function () { return mercurial_1.MERCURIAL_USTv1_USDC_MARKET; },
                        SBR: function () { return orca_1.ORCA_SBR_USDC_MARKET; },
                        ORCA: function () { return orca_1.ORCA_ORCA_USDC_MARKET; },
                        RAY: function () { return raydium_1.RAYDIUM_RAY_USDC_MARKET; },
                        USTv2: function () { return saber_1.SABER_USTv2_USDC_MARKET; },
                        MNDE: function () { return orca_1.ORCA_MNDE_mSOL_MARKET; },
                        FTT: function () { return orca_1.ORCA_FTT_USDC_MARKET; },
                        SRM: function () { return raydium_1.RAYDIUM_SRM_USDC_MARKET; },
                        stSOL: function () { return raydium_1.RAYDIUM_stSOL_USDC_MARKET; },
                        whETH: function () { return raydium_1.RAYDIUM_whETH_USDC_MARKET; },
                        scnSOL: function () { return orca_1.ORCA_scnSOL_USDC_MARKET; },
                    }[coin];
                    (0, tiny_invariant_1.default)(getSwapper);
                    swapper = getSwapper();
                    tokenBAcc = tokenAccounts[swapper.tokenIdB];
                    (0, tiny_invariant_1.default)(tokenBAcc);
                    buyTokenID = isBuy ? mainTokenType : swapper.tokenIdB;
                    buyTokenAcc = isBuy ? mainTokenAcc : tokenBAcc;
                    sellTokenID = isBuy ? swapper.tokenIdB : mainTokenType;
                    sellTokenAcc = isBuy ? tokenBAcc : mainTokenAcc;
                    swapperType = {
                        APT: types_1.SwapperType.Single,
                        BTC: types_1.SwapperType.Single,
                        ETH: types_1.SwapperType.Single,
                        SOL: types_1.SwapperType.Single,
                        mSOL: types_1.SwapperType.Single,
                        USDT: types_1.SwapperType.Single,
                        UST: types_1.SwapperType.Single,
                        SBR: types_1.SwapperType.Single,
                        ORCA: types_1.SwapperType.Single,
                        RAY: types_1.SwapperType.Single,
                        USTv2: types_1.SwapperType.Single,
                        MNDE: types_1.SwapperType.Single,
                        FTT: types_1.SwapperType.Single,
                        SRM: types_1.SwapperType.Single,
                        stSOL: types_1.SwapperType.Single,
                        whETH: types_1.SwapperType.Single,
                        scnSOL: types_1.SwapperType.Single,
                    }[coin];
                    (0, tiny_invariant_1.default)(swapperType);
                    return [4 /*yield*/, conn.getParsedAccountInfo(buyTokenAcc, 'confirmed')];
                case 19:
                    parsedBuyBeforeAmt = ((_a = (_c.sent()).value) === null || _a === void 0 ? void 0 : _a.data).parsed.info.tokenAmount.uiAmount;
                    console.log(sellTokenAcc.toString());
                    return [4 /*yield*/, swapper.createSwapInstructions(sellTokenID, parseFloat(sellAmt) * mints_1.DECIMALS[sellTokenID], sellTokenAcc, buyTokenID, parseFloat(buyAmt) * mints_1.DECIMALS[buyTokenID], buyTokenAcc, keypair.publicKey)];
                case 20:
                    tradeIxs = _c.sent();
                    tradeTx = new web3_js_1.Transaction();
                    tradeIxs.forEach(function (ix) { return tradeTx.add(ix); });
                    return [4 /*yield*/, conn.sendTransaction(tradeTx, [keypair], { preflightCommitment: 'confirmed' })];
                case 21:
                    sig = _c.sent();
                    return [4 /*yield*/, conn.confirmTransaction(sig, 'max')];
                case 22:
                    _c.sent();
                    return [4 /*yield*/, conn.getParsedAccountInfo(buyTokenAcc, 'confirmed')];
                case 23:
                    parsedBuyAfterAmt = ((_b = (_c.sent()).value) === null || _b === void 0 ? void 0 : _b.data).parsed.info.tokenAmount.uiAmount;
                    console.log(sig);
                    console.log("Received " + (parsedBuyAfterAmt - parsedBuyBeforeAmt));
                    console.log('DONE');
                    process.exit();
                    return [2 /*return*/];
            }
        });
    });
}
doSwap();
//# sourceMappingURL=doSwap.js.map