{"version":3,"sources":["/Users/mattstyles/projects/mathutil/src/point.ts","/Users/mattstyles/projects/mathutil/src/inputScalar.ts","/Users/mattstyles/projects/mathutil/src/vector2.ts","/Users/mattstyles/projects/mathutil/src/rect.ts","/Users/mattstyles/projects/mathutil/src/ray.ts","/Users/mattstyles/projects/mathutil/src/lerp.ts","/Users/mattstyles/projects/mathutil/src/toDegrees.ts","/Users/mattstyles/projects/mathutil/src/toRadians.ts","/Users/mattstyles/projects/mathutil/src/min.ts","/Users/mattstyles/projects/mathutil/src/max.ts","/Users/mattstyles/projects/mathutil/src/clamp.ts","/Users/mattstyles/projects/mathutil/src/wrap.ts","/Users/mattstyles/projects/mathutil/src/euclidean.ts","/Users/mattstyles/projects/mathutil/src/manhattan.ts","/Users/mattstyles/projects/mathutil/src/index.ts"],"sourcesContent":["import type {InputPoint, Position} from './inputScalar'\n\nimport {massageInputPoint} from './inputScalar'\n\nexport class Point {\n  pos: Position\n\n  constructor(x: number, y: number) {\n    this.pos = [x, y]\n  }\n\n  static of(x: InputPoint | number, y?: number) {\n    if (typeof x === 'number' && y != null) {\n      return new Point(x, y)\n    }\n\n    const p = massageInputPoint(x)\n    return new Point(p[0], p[1])\n  }\n\n  static translate(from: InputPoint, to: InputPoint) {\n    const f = massageInputPoint(from)\n    const t = massageInputPoint(to)\n    return Point.of(f[0] + t[0], f[1] + t[1])\n  }\n\n  get x(): number {\n    return this.pos[0]\n  }\n\n  get y(): number {\n    return this.pos[1]\n  }\n\n  set x(value: number) {\n    this.pos[0] = value\n  }\n\n  set y(value: number) {\n    this.pos[1] = value\n  }\n\n  position(): Position {\n    return this.pos\n  }\n\n  equal(x: InputPoint | number, y?: number): boolean {\n    if (typeof x === 'number' && y != null) {\n      return this.x === x && this.y === y\n    }\n\n    const p = massageInputPoint(x)\n    return this.equal(p[0], p[1])\n  }\n\n  equals(x: InputPoint | number, y?: number): boolean {\n    return this.equal(x, y)\n  }\n\n  translate(x: InputPoint | number, y?: number): this {\n    if (typeof x === 'number' && y != null) {\n      this.x += x\n      this.y += y\n      return this\n    }\n\n    const p = massageInputPoint(x)\n    return this.translate(p[0], p[1])\n  }\n\n  scale(s: number): this {\n    this.x *= s\n    this.y *= s\n    return this\n  }\n}\n","import {Point} from './point'\nimport {Vector2} from './vector2'\n\nexport type Position = [number, number]\nexport type InputPoint = Point | {x: number; y: number} | Position | number\n\nexport function massageInputPoint(x: InputPoint): Position {\n  if (x instanceof Point) {\n    return x.pos\n  }\n\n  if (typeof x === 'number') {\n    return [x, x]\n  }\n\n  if ('x' in x && 'y' in x) {\n    return [x.x, x.y]\n  }\n\n  return x\n}\n\nexport type InputVector = Vector2 | Position | {x: number; y: number} | number\nexport function massageVectorInput(x: InputVector): Position {\n  if (x instanceof Vector2) {\n    return x.pos\n  }\n\n  if (typeof x === 'number') {\n    return [x, x]\n  }\n\n  if ('x' in x && 'y' in x) {\n    return [x.x, x.y]\n  }\n\n  return x\n}\n","import type {InputVector, Position} from './inputScalar'\n\nimport {massageVectorInput} from './inputScalar'\n\nexport class Vector2 {\n  pos: Position\n\n  /**\n   * `x` and `y` refer to both direction and magnitude, they are stored in a\n   * point array for performance\n   * @constructs\n   * @param x <Number>\n   * @param y <Number>\n   */\n  constructor(x: number, y: number) {\n    this.pos = [x, y]\n    return this\n  }\n\n  static of(x: Vector2): Vector2\n  static of(x: number, y: number): Vector2\n  static of(x: Vector2 | number, y?: number) {\n    if (x instanceof Vector2) {\n      return new Vector2(x.pos[0], x.pos[1])\n    }\n\n    return new Vector2(x, y)\n  }\n\n  /**\n   * Adds two vectors and returns a new instance\n   * @param v1 <Vector2||Array||Number>\n   * @param v2 <Vector2||Array||Number>\n   * @returns <Vector2>\n   */\n  static add(v1: InputVector, v2: InputVector) {\n    const x = massageVectorInput(v1)\n    const y = massageVectorInput(v2)\n    return new Vector2(x[0] + y[0], x[1] + y[1])\n  }\n\n  /**\n   * Subtracts two vectors and returns a new instance\n   * @param v1 <Vector2||Array||Number>\n   * @param v2 <Vector2||Array||Number>\n   * @returns <Vector2>\n   */\n  static sub(v1: InputVector, v2: InputVector) {\n    const x = massageVectorInput(v1)\n    const y = massageVectorInput(v2)\n    return new Vector2(x[0] - y[0], x[1] - y[1])\n  }\n\n  /**\n   * Multiplies two vectors and returns a new instance\n   * @param v1 <Vector2||Array||Number>\n   * @param v2 <Vector2||Array||Number>\n   * @returns <Vector2>\n   */\n  static multiply(v1: InputVector, v2: InputVector) {\n    const x = massageVectorInput(v1)\n    const y = massageVectorInput(v2)\n    return new Vector2(x[0] * y[0], x[1] * y[1])\n  }\n\n  /**\n   * Divides two vectors and returns a new instance\n   * @param v1 <Vector2||Array||Number>\n   * @param v2 <Vector2||Array||Number>\n   * @returns <Vector2>\n   */\n  static divide(v1: InputVector, v2: InputVector) {\n    const x = massageVectorInput(v1)\n    const y = massageVectorInput(v2)\n    return new Vector2(\n      y[0] === 0 ? 0 : x[0] / y[0],\n      y[1] === 0 ? 0 : x[1] / y[1]\n    )\n  }\n\n  /**\n   * Returns the dot product of two vectors\n   * @param v1 <Vector2||Array||Number>\n   * @param v2 <Vector2||Array||Number>\n   * @returns <Float>\n   */\n  static dot(v1: InputVector, v2: InputVector) {\n    const x = massageVectorInput(v1)\n    const y = massageVectorInput(v2)\n    return x[0] * y[0] + x[1] * y[1]\n  }\n\n  /**\n   * Returns the cross product of two vectors\n   * @param v1 <Vector2||Array||Number>\n   * @param v2 <Vector2||Array||Number>\n   * @returns <Float>\n   */\n  static cross(v1: InputVector, v2: InputVector) {\n    const x = massageVectorInput(v1)\n    const y = massageVectorInput(v2)\n    return x[0] * y[1] - x[1] * y[0]\n  }\n\n  /**\n   * Returns the length of a vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <Float>\n   */\n  static len(vec: InputVector) {\n    const x = massageVectorInput(vec)\n    return Math.sqrt(Math.pow(x[0], 2) + Math.pow(x[1], 2))\n  }\n\n  /**\n   * Returns the unit vector of a given vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <Vector2>\n   */\n  static unit(vec: InputVector) {\n    const x = massageVectorInput(vec)\n    const len = Vector2.len(x)\n    return Vector2.divide(x, [len, len])\n  }\n\n  /**\n   * Returns the normal vector of a given vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <Vector2>\n   */\n  static normal(vec: InputVector) {\n    const x = massageVectorInput(vec)\n    return new Vector2(-x[1], x[0])\n  }\n\n  /**\n   * Returns the backface normal vector of a given vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <Vector2>\n   */\n  static backfaceNormal(vec: InputVector) {\n    const x = massageVectorInput(vec)\n    return new Vector2(x[1], -x[0])\n  }\n\n  /**\n   * Generates a unit vector from an angle\n   * @param angle <Float> in radians\n   * @returns <Vector2>\n   */\n  static fromAngle(angle: number) {\n    return new Vector2(1, 0).rotate(angle)\n  }\n\n  /**\n   * Generates a new vector from the given vector and angle\n   * @param vec <Vector2>\n   * @param angle <Float> in radians\n   * @returns <Vector2>\n   */\n  static rotate(vec: InputVector, angle: number) {\n    const x = massageVectorInput(vec)\n    const v = new Vector2(...x)\n    v.rotate(angle)\n    return v\n  }\n\n  /* -----------------------------------------------------------*\n   *\n   *  Basic ops\n   *\n   *----------------------------------------------------------- */\n\n  /**\n   * Getter for the x component of position\n   * @returns <Float>\n   */\n  get x() {\n    return this.pos[0]\n  }\n\n  /**\n   * Getter for the y component of position\n   * @returns <Float>\n   */\n  get y() {\n    return this.pos[1]\n  }\n\n  /**\n   * Getter for the length component of position i.e. the magnitude\n   * @returns <Float>\n   */\n  get length() {\n    return this.len()\n  }\n\n  /**\n   * Adds a second vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <this>\n   */\n  add(vec: InputVector) {\n    const p = massageVectorInput(vec)\n\n    this.pos = [this.pos[0] + p[0], this.pos[1] + p[1]]\n\n    return this\n  }\n\n  /**\n   * Subtracts a second vector and returns a new vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <this>\n   */\n  sub(vec: InputVector) {\n    const p = massageVectorInput(vec)\n\n    this.pos = [this.pos[0] - p[0], this.pos[1] - p[1]]\n\n    return this\n  }\n\n  /**\n   * Multiplies a second vector and returns a new vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <this>\n   */\n  multiply(vec: InputVector) {\n    const p = massageVectorInput(vec)\n\n    this.pos = [this.pos[0] * p[0], this.pos[1] * p[1]]\n\n    return this\n  }\n\n  /**\n   * Divides a second vector and returns a new vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <this>\n   */\n  divide(vec: InputVector) {\n    const p = massageVectorInput(vec)\n\n    this.pos = [\n      p[0] === 0 ? 0 : this.pos[0] / p[0],\n      p[1] === 0 ? 0 : this.pos[1] / p[1],\n    ]\n\n    return this\n  }\n\n  /**\n   * Sets the vector to the specified length\n   */\n  magnitude(len: InputVector) {\n    const vec = Vector2.multiply(this.unit(), len)\n    this.pos = vec.pos\n    return this\n  }\n\n  /**\n   * Returns the dot product of this vector and the supplied vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <Float>\n   */\n  dot(vec: InputVector) {\n    const p = massageVectorInput(vec)\n    return this.pos[0] * p[0] + this.pos[1] * p[1]\n  }\n\n  /**\n   * Returns the cross product of this vector and the supplied vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <Float>\n   */\n  cross(vec: InputVector) {\n    const p = massageVectorInput(vec)\n    return this.pos[0] * p[1] - this.pos[1] * p[0]\n  }\n\n  /**\n   * Returns the length of the vector\n   * @returns <Float>\n   */\n  len() {\n    return Math.sqrt(Math.pow(this.pos[0], 2) + Math.pow(this.pos[1], 2))\n  }\n\n  /**\n   * Slightly cheaper determinant of length, really only useful for length comparisons\n   * @returns <Float>\n   */\n  sqrLen() {\n    return Math.pow(this.pos[0], 2) + Math.pow(this.pos[1], 2)\n  }\n\n  /**\n   * Returns unit vector of this vector\n   * @returns <Vector2>\n   */\n  unit() {\n    const len = this.len()\n    return Vector2.divide(this, len)\n  }\n\n  /* -----------------------------------------------------------*\n   *\n   *  Rotation\n   *\n   *----------------------------------------------------------- */\n\n  /**\n   * Quick rotate 90 degrees to the left, where y is 'up' this is the normal vector\n   * @returns <Vector2>\n   */\n  normal() {\n    return new Vector2(-this.pos[1], this.pos[0])\n  }\n\n  /**\n   * Quick rotate 90 deg right, where y is 'up' this grabs the normal of the backface\n   * @returns <Vector2>\n   */\n  backfaceNormal() {\n    return new Vector2(this.pos[1], -this.pos[0])\n  }\n\n  /**\n   * Rotates the vector\n   * @TODO specify angle as an integer and use pre-calc tables for sin & cos\n   * @param angle <Float> in radians\n   * @returns <Vector2>\n   */\n  rotate(angle: number) {\n    const [x, y] = this.pos\n    const sin = Math.sin(angle)\n    const cos = Math.cos(angle)\n    this.pos = [x * cos - y * sin, x * sin + y * cos]\n    return this\n  }\n\n  /**\n   * Points the vector in a certain direction\n   * @param angle <Float> in radians\n   * @returns <Vector2>\n   */\n  turn(angle: number) {\n    const len = this.len()\n    const dir = new Vector2(1, 0).rotate(angle)\n    this.pos = [dir.pos[0] * len, dir.pos[1] * len]\n    return this\n  }\n\n  /**\n   * Returns the vector angle\n   * @returns <Float> in radians\n   */\n  angle() {\n    return Math.atan2(this.pos[1], this.pos[0])\n  }\n\n  /* -----------------------------------------------------------*\n   *\n   *  Useful stuff\n   *\n   *----------------------------------------------------------- */\n\n  /**\n   * Returns a new vector linearly interpolated along the length of\n   * this vector\n   * @param value <Float>\n   * @returns <Vector2>\n   */\n  lerp(value: number) {\n    return Vector2.multiply(this, value)\n  }\n\n  /**\n   * Calcs the distance between this vector and another one\n   * @param vec <Vector2||Point>\n   * @returns <Float>\n   */\n  distance(vec: InputVector) {\n    return Vector2.sub(this, vec).len()\n  }\n\n  /**\n   * Checks if the supplied vector is parallel to this vector\n   * @param vec <Vector2>\n   * @returns <Boolean>\n   */\n  isHeading(vec: Vector2) {\n    return Vector2.dot(this.unit(), vec.unit()) === 1\n  }\n\n  /**\n   * Checks if the supplied vector is generally heading in the same direction\n   * within `angle` degrees of accuracy\n   * @param vec <Vector2>\n   * @param angle <Float> in radians\n   * @returns <Boolean>\n   */\n  isNearHeading(vec: Vector2, angle: number) {\n    return Vector2.dot(this.unit(), vec.unit()) > Math.cos(angle)\n  }\n}\n","import type {Position, InputPoint} from './inputScalar'\n\nimport {Vector2} from './vector2'\nimport {massageInputPoint} from './inputScalar'\n\nexport class Rect {\n  pos: [...Position, ...Position]\n\n  /**\n   * Creates new Rect instance\n   * @constructs\n   */\n  constructor(x1: number, y1: number, x2: number, y2: number) {\n    this.pos = [x1, y1, x2, y2]\n  }\n\n  static of(x1: Rect): Rect\n  static of(x1: number, y1: number, x2: number, y2: number): Rect\n  static of(x1: number | Rect, y1?: number, x2?: number, y2?: number): Rect {\n    if (x1 instanceof Rect) {\n      return new Rect(x1.pos[0], x1.pos[1], x1.pos[2], x1.pos[3])\n    }\n\n    return new Rect(x1, y1, x2, y2)\n  }\n\n  /**\n   * Calculates the area of the given rectangle\n   * @returns <Float>\n   */\n  static area(rect: Rect): number {\n    if (!rect || !(rect instanceof Rect)) {\n      throw new Error('Specify rect to translate')\n    }\n\n    return (rect.pos[2] - rect.pos[0]) * (rect.pos[3] - rect.pos[1])\n  }\n\n  /**\n   * Translates the entire rectangle\n   * @param x <Float>\n   * @param y <Float>\n   * @returns <Rect>\n   */\n  static translate(rect: Rect, x = 0, y = 0): Rect {\n    if (!rect || !(rect instanceof Rect)) {\n      throw new Error('Specify rect to translate')\n    }\n\n    return new Rect(\n      rect.pos[0] + x,\n      rect.pos[1] + y,\n      rect.pos[2] + x,\n      rect.pos[3] + y\n    )\n  }\n\n  /**\n   * Scales the rect\n   * @param s <Float> scalar\n   * @returns <Rect>\n   */\n  static scale(rect: Rect, s: number): Rect {\n    if (!rect || !(rect instanceof Rect)) {\n      throw new Error('Specify rect to translate')\n    }\n\n    return new Rect(\n      rect.pos[0],\n      rect.pos[1],\n      rect.pos[0] + rect.width * s,\n      rect.pos[1] + rect.height * s\n    )\n  }\n\n  static constrict(rect: Rect, x: number, y?: number) {\n    if (!rect || !(rect instanceof Rect)) {\n      throw new Error('Specify rect to translate')\n    }\n\n    if (y == null) {\n      y = x\n    }\n\n    return new Rect(\n      rect.pos[0] + x,\n      rect.pos[1] + y,\n      rect.pos[2] - x,\n      rect.pos[3] - y\n    )\n  }\n\n  get width(): number {\n    return this.pos[2] - this.pos[0]\n  }\n\n  get height(): number {\n    return this.pos[3] - this.pos[1]\n  }\n\n  get area(): number {\n    return this.width * this.height\n  }\n\n  get origin(): Position {\n    return [this.pos[0], this.pos[1]]\n  }\n\n  get x(): number {\n    return this.pos[0]\n  }\n\n  get y(): number {\n    return this.pos[1]\n  }\n\n  get x1(): number {\n    return this.pos[0]\n  }\n\n  get y1(): number {\n    return this.pos[1]\n  }\n\n  get x2(): number {\n    return this.pos[2]\n  }\n\n  get y2(): number {\n    return this.pos[3]\n  }\n\n  setWidth(w: number): this {\n    this.pos[2] = this.pos[0] + w\n    return this\n  }\n\n  setHeight(h: number): this {\n    this.pos[3] = this.pos[1] + h\n    return this\n  }\n\n  floor() {\n    this.pos = this.pos.map(Math.floor) as [...Position, ...Position]\n    return this\n  }\n\n  ceil() {\n    this.pos = this.pos.map(Math.ceil) as [...Position, ...Position]\n    return this\n  }\n\n  round() {\n    this.pos[0] = Math.floor(this.pos[0])\n    this.pos[1] = Math.floor(this.pos[1])\n    this.pos[2] = Math.ceil(this.pos[2])\n    this.pos[3] = Math.ceil(this.pos[3])\n    return this\n  }\n\n  equal(x1: Rect): boolean\n  equal(x1: number, y1: number, x2: number, y2: number): boolean\n  equal(x1: Rect | number, y1?: number, x2?: number, y2?: number): boolean {\n    if (x1 instanceof Rect) {\n      return this.equal(...x1.pos)\n    }\n\n    return (\n      this.pos[0] === x1 &&\n      this.pos[1] === y1 &&\n      this.pos[2] === x2 &&\n      this.pos[3] === y2\n    )\n  }\n\n  equals(x1: Rect): boolean\n  equals(x1: number, y1: number, x2: number, y2: number): boolean\n  equals(x1: Rect | number, y1?: number, x2?: number, y2?: number): boolean {\n    if (x1 instanceof Rect) {\n      return this.equal(...x1.pos)\n    }\n\n    return this.equal(x1, y1, x2, y2)\n  }\n\n  /**\n   * Translates the entire rectangle\n   * @param x <Float>\n   * @param y <Float>\n   * @returns <this>\n   */\n  translate(x = 0, y = 0) {\n    this.pos = [\n      this.pos[0] + x,\n      this.pos[1] + y,\n      this.pos[2] + x,\n      this.pos[3] + y,\n    ]\n    return this\n  }\n\n  scale(s: number) {\n    this.pos = [\n      this.pos[0],\n      this.pos[1],\n      this.pos[0] + this.width * s,\n      this.pos[1] + this.height * s,\n    ]\n\n    return this\n  }\n\n  constrict(x: number, y?: number) {\n    if (y == null) {\n      y = x\n    }\n    this.pos = [\n      this.pos[0] + x,\n      this.pos[1] + y,\n      this.pos[2] - x,\n      this.pos[3] - y,\n    ]\n    return this\n  }\n\n  private _containsRect(rect: Rect): boolean {\n    const {pos} = this\n    return (\n      rect.pos[0] >= pos[0] &&\n      rect.pos[1] >= pos[1] &&\n      rect.pos[2] <= pos[2] &&\n      rect.pos[3] <= pos[3]\n    )\n  }\n\n  contains(x: Rect): boolean\n  contains(x: InputPoint): boolean\n  contains(x: number, y: number): boolean\n  contains(x: Rect | InputPoint, y?: number): boolean {\n    if (x instanceof Rect) {\n      return this._containsRect(x)\n    }\n\n    if (y == null) {\n      const [a, b] = massageInputPoint(x)\n      return this.contains(a, b)\n    }\n\n    const {pos} = this\n\n    return x >= pos[0] && y >= pos[1] && x <= pos[2] && y <= pos[3]\n  }\n\n  /**\n   * Returns a vector referencing the bottom-left, top-right diagonal\n   * @returns <Vector2>\n   */\n  slope(): Vector2 {\n    return new Vector2(this.pos[2] - this.pos[0], this.pos[3] - this.pos[1])\n  }\n}\n","import type {Position} from './inputScalar'\nimport {Vector2} from './vector2'\n\ntype CastOptions = {\n  initial: boolean\n  origin: Position\n  magnitude: number\n  step: number\n}\nconst castOpts: CastOptions = {\n  initial: false,\n  origin: [0, 0],\n  magnitude: 0,\n  step: 1,\n}\n\nexport class Ray {\n  dir: Vector2\n\n  constructor(v: Vector2) {\n    if (!(v instanceof Vector2)) {\n      throw new Error('Ray should be instantiated with a direction vector')\n    }\n\n    this.dir = v.unit()\n  }\n\n  static of(v: Vector2) {\n    return new Ray(v)\n  }\n\n  /**\n   * Returns a generator function that yields the process of casting the ray\n   * @param opts <Object>\n   *   @param initial <Boolean> should output initial position\n   *   @param origin <Array> length-2 array describing origin position for cast\n   *   @param magnitude <Number> magnitude of the ray section being cast\n   *   @param step <Number> amount to step per operation\n   */\n  cast(opts: CastOptions) {\n    opts = {\n      ...castOpts,\n      ...opts,\n    }\n\n    const u = new Vector2(...this.dir.pos)\n    let len = 0\n\n    /**\n     * Generator that performs the cast.\n     * A cast happens along a section of the ray specified by the origin and\n     * the magnitude, which defines the final position returned. The step\n     * dictates the distance between returned values.\n     * The origin, or initial value, is often undesired and so its output is\n     * hidden behind the initial flag.\n     */\n    return function* () {\n      if (opts.initial) {\n        yield Vector2.of(...opts.origin)\n      }\n\n      while (len < opts.magnitude) {\n        len = len + opts.step\n        u.magnitude(len)\n\n        // @TODO add is mutative, although magnitude resets it it might\n        // still be safer to return a new vector, although likely slower\n        // yield u.add(opts.origin).pos\n        yield Vector2.add(opts.origin, u)\n      }\n    }\n  }\n\n  /**\n   * Project casts the ray synchronously and returns a function that accepts\n   * a callback for each iteration of the ray cast\n   * @param opts <Object>\n   *   @param initial <Boolean> should output initial position\n   *   @param origin <Array> length-2 array describing origin position for cast\n   *   @param magnitude <Number> magnitude of the ray section being cast\n   *   @param step <Number> amount to step per operation\n   */\n  project(opts: CastOptions) {\n    opts = {\n      ...castOpts,\n      ...opts,\n    }\n\n    const u = new Vector2(...this.dir.pos)\n    let len = 0\n\n    return (cb: (v: Vector2) => void) => {\n      while (len < opts.magnitude) {\n        len = len + opts.step\n        u.magnitude(len)\n        cb(Vector2.add(opts.origin, u))\n      }\n    }\n  }\n}\n","function _performLerp(value: number, min: number, max: number): number {\n  return min + value * (max - min)\n}\n\ntype CurriedReturn = (value: number) => number\n\nfunction _curryLerp(min: number, max: number): CurriedReturn {\n  return function lerp(value) {\n    return _performLerp(value, min, max)\n  }\n}\n\n/**\n * Interpolates between 2 values.\n * `value` is optional and can be curried.\n * `value` range 0...1 corresponds to min...max, if the value falls outside of\n * 0...1 then projection will occur.\n * @param min <Number> the minimum boundary\n * @param max <Number> the maximum boundary\n * @param value <?Float> the interpolation value\n */\nexport function lerp(min: number, max: number): CurriedReturn\nexport function lerp(min: number, max: number, value: number): number\nexport function lerp(\n  min: number,\n  max: number,\n  value?: number\n): CurriedReturn | number {\n  if (typeof value === 'undefined') {\n    return _curryLerp(min, max)\n  }\n\n  return _performLerp(value, min, max)\n}\n","var scalar = 180 / Math.PI\n\nexport function toDegrees(value: number): number {\n  return value * scalar\n}\n","var scalar = Math.PI / 180\n\nexport function toRadians(value: number): number {\n  return value * scalar\n}\n","const reduceMin = (min: number, next: number): number => {\n  return next < min ? next : min\n}\n\n/**\n * Returns minimum number in a set\n */\nexport function min(set: number[] | Set<number>): number {\n  let m = Number.MAX_SAFE_INTEGER\n  for (const i of set) {\n    m = reduceMin(m, i)\n  }\n  return m\n}\n","const reduceMax = (max: number, next: number): number => {\n  return next > max ? next : max\n}\n\n/**\n * Returns minimum number in a set\n */\nexport function max(set: number[] | Set<number>): number {\n  let m = Number.MIN_SAFE_INTEGER\n  for (const i of set) {\n    m = reduceMax(m, i)\n  }\n  return m\n}\n","function _performClamp(value: number, min: number, max: number): number {\n  return value < min ? min : value > max ? max : value\n}\n\nfunction _curryClamp(min: number, max: number): CurriedReturn {\n  return function clamp(value) {\n    return _performClamp(value, min, max)\n  }\n}\n\ntype CurriedReturn = (value: number) => number\n\nexport function clamp(min: number, max: number): CurriedReturn\nexport function clamp(min: number, max: number, value: number): number\nexport function clamp(\n  min: number,\n  max: number,\n  value?: number\n): CurriedReturn | number {\n  if (typeof value === 'undefined') {\n    return _curryClamp(min, max)\n  }\n\n  return _performClamp(value, min, max)\n}\n","function _performWrap(value: number, min: number, max: number): number {\n  const range = max - min\n  if (range <= 0) {\n    return 0\n  }\n  let res = (value - min) % range\n  if (res < 0) {\n    res += range\n  }\n  return res + min\n}\n\ntype CurriedReturn = (value: number) => number\n\nfunction _curryWrap(min: number, max: number): CurriedReturn {\n  return function wrap(value) {\n    return _performWrap(value, min, max)\n  }\n}\n\n/**\n * ~Stolen~, borrowed from Phaser\n */\nexport function wrap(min: number, max: number): CurriedReturn\nexport function wrap(min: number, max: number, value: number): number\nexport function wrap(\n  min: number,\n  max: number,\n  value?: number\n): CurriedReturn | number {\n  if (typeof value === 'undefined') {\n    return _curryWrap(min, max)\n  }\n\n  return _performWrap(value, min, max)\n}\n","import type {InputPoint} from './inputScalar'\nimport {massageInputPoint} from './inputScalar'\n\n/**\n * Returns straight-line distance between two points\n */\nexport function euclidean(a: InputPoint, b: InputPoint): number {\n  const x = massageInputPoint(a)\n  const y = massageInputPoint(b)\n  return Math.sqrt(Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2))\n}\n","import type {InputPoint} from './inputScalar'\nimport {massageInputPoint} from './inputScalar'\n\nexport function manhattan(a: InputPoint, b: InputPoint): number {\n  const x = massageInputPoint(a)\n  const y = massageInputPoint(b)\n  return Math.abs(x[0] - y[0]) + Math.abs(x[1] - y[1])\n}\n","/**\n * Binds utilities to exports\n */\n\nexport {Point} from './point'\nexport {Rect} from './rect'\nexport {Vector2} from './vector2'\nexport {Ray} from './ray'\n\nexport {lerp} from './lerp'\nexport {toDegrees} from './toDegrees'\nexport {toRadians} from './toRadians'\nexport {min} from './min'\nexport {max} from './max'\n\nexport {clamp} from './clamp'\nexport {wrap} from './wrap'\n\nexport {euclidean} from './euclidean'\nexport {manhattan} from './manhattan'\n"],"names":[],"mappings":"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"}