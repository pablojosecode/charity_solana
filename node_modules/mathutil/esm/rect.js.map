{"version":3,"sources":["../src/rect.ts"],"sourcesContent":["import type {Position, InputPoint} from './inputScalar'\n\nimport {Vector2} from './vector2'\nimport {massageInputPoint} from './inputScalar'\n\nexport class Rect {\n  pos: [...Position, ...Position]\n\n  /**\n   * Creates new Rect instance\n   * @constructs\n   */\n  constructor(x1: number, y1: number, x2: number, y2: number) {\n    this.pos = [x1, y1, x2, y2]\n  }\n\n  static of(x1: Rect): Rect\n  static of(x1: number, y1: number, x2: number, y2: number): Rect\n  static of(x1: number | Rect, y1?: number, x2?: number, y2?: number): Rect {\n    if (x1 instanceof Rect) {\n      return new Rect(x1.pos[0], x1.pos[1], x1.pos[2], x1.pos[3])\n    }\n\n    return new Rect(x1, y1, x2, y2)\n  }\n\n  /**\n   * Calculates the area of the given rectangle\n   * @returns <Float>\n   */\n  static area(rect: Rect): number {\n    if (!rect || !(rect instanceof Rect)) {\n      throw new Error('Specify rect to translate')\n    }\n\n    return (rect.pos[2] - rect.pos[0]) * (rect.pos[3] - rect.pos[1])\n  }\n\n  /**\n   * Translates the entire rectangle\n   * @param x <Float>\n   * @param y <Float>\n   * @returns <Rect>\n   */\n  static translate(rect: Rect, x = 0, y = 0): Rect {\n    if (!rect || !(rect instanceof Rect)) {\n      throw new Error('Specify rect to translate')\n    }\n\n    return new Rect(\n      rect.pos[0] + x,\n      rect.pos[1] + y,\n      rect.pos[2] + x,\n      rect.pos[3] + y\n    )\n  }\n\n  /**\n   * Scales the rect\n   * @param s <Float> scalar\n   * @returns <Rect>\n   */\n  static scale(rect: Rect, s: number): Rect {\n    if (!rect || !(rect instanceof Rect)) {\n      throw new Error('Specify rect to translate')\n    }\n\n    return new Rect(\n      rect.pos[0],\n      rect.pos[1],\n      rect.pos[0] + rect.width * s,\n      rect.pos[1] + rect.height * s\n    )\n  }\n\n  static constrict(rect: Rect, x: number, y?: number) {\n    if (!rect || !(rect instanceof Rect)) {\n      throw new Error('Specify rect to translate')\n    }\n\n    if (y == null) {\n      y = x\n    }\n\n    return new Rect(\n      rect.pos[0] + x,\n      rect.pos[1] + y,\n      rect.pos[2] - x,\n      rect.pos[3] - y\n    )\n  }\n\n  get width(): number {\n    return this.pos[2] - this.pos[0]\n  }\n\n  get height(): number {\n    return this.pos[3] - this.pos[1]\n  }\n\n  get area(): number {\n    return this.width * this.height\n  }\n\n  get origin(): Position {\n    return [this.pos[0], this.pos[1]]\n  }\n\n  get x(): number {\n    return this.pos[0]\n  }\n\n  get y(): number {\n    return this.pos[1]\n  }\n\n  get x1(): number {\n    return this.pos[0]\n  }\n\n  get y1(): number {\n    return this.pos[1]\n  }\n\n  get x2(): number {\n    return this.pos[2]\n  }\n\n  get y2(): number {\n    return this.pos[3]\n  }\n\n  setWidth(w: number): this {\n    this.pos[2] = this.pos[0] + w\n    return this\n  }\n\n  setHeight(h: number): this {\n    this.pos[3] = this.pos[1] + h\n    return this\n  }\n\n  floor() {\n    this.pos = this.pos.map(Math.floor) as [...Position, ...Position]\n    return this\n  }\n\n  ceil() {\n    this.pos = this.pos.map(Math.ceil) as [...Position, ...Position]\n    return this\n  }\n\n  round() {\n    this.pos[0] = Math.floor(this.pos[0])\n    this.pos[1] = Math.floor(this.pos[1])\n    this.pos[2] = Math.ceil(this.pos[2])\n    this.pos[3] = Math.ceil(this.pos[3])\n    return this\n  }\n\n  equal(x1: Rect): boolean\n  equal(x1: number, y1: number, x2: number, y2: number): boolean\n  equal(x1: Rect | number, y1?: number, x2?: number, y2?: number): boolean {\n    if (x1 instanceof Rect) {\n      return this.equal(...x1.pos)\n    }\n\n    return (\n      this.pos[0] === x1 &&\n      this.pos[1] === y1 &&\n      this.pos[2] === x2 &&\n      this.pos[3] === y2\n    )\n  }\n\n  equals(x1: Rect): boolean\n  equals(x1: number, y1: number, x2: number, y2: number): boolean\n  equals(x1: Rect | number, y1?: number, x2?: number, y2?: number): boolean {\n    if (x1 instanceof Rect) {\n      return this.equal(...x1.pos)\n    }\n\n    return this.equal(x1, y1, x2, y2)\n  }\n\n  /**\n   * Translates the entire rectangle\n   * @param x <Float>\n   * @param y <Float>\n   * @returns <this>\n   */\n  translate(x = 0, y = 0) {\n    this.pos = [\n      this.pos[0] + x,\n      this.pos[1] + y,\n      this.pos[2] + x,\n      this.pos[3] + y,\n    ]\n    return this\n  }\n\n  scale(s: number) {\n    this.pos = [\n      this.pos[0],\n      this.pos[1],\n      this.pos[0] + this.width * s,\n      this.pos[1] + this.height * s,\n    ]\n\n    return this\n  }\n\n  constrict(x: number, y?: number) {\n    if (y == null) {\n      y = x\n    }\n    this.pos = [\n      this.pos[0] + x,\n      this.pos[1] + y,\n      this.pos[2] - x,\n      this.pos[3] - y,\n    ]\n    return this\n  }\n\n  private _containsRect(rect: Rect): boolean {\n    const {pos} = this\n    return (\n      rect.pos[0] >= pos[0] &&\n      rect.pos[1] >= pos[1] &&\n      rect.pos[2] <= pos[2] &&\n      rect.pos[3] <= pos[3]\n    )\n  }\n\n  contains(x: Rect): boolean\n  contains(x: InputPoint): boolean\n  contains(x: number, y: number): boolean\n  contains(x: Rect | InputPoint, y?: number): boolean {\n    if (x instanceof Rect) {\n      return this._containsRect(x)\n    }\n\n    if (y == null) {\n      const [a, b] = massageInputPoint(x)\n      return this.contains(a, b)\n    }\n\n    const {pos} = this\n\n    return x >= pos[0] && y >= pos[1] && x <= pos[2] && y <= pos[3]\n  }\n\n  /**\n   * Returns a vector referencing the bottom-left, top-right diagonal\n   * @returns <Vector2>\n   */\n  slope(): Vector2 {\n    return new Vector2(this.pos[2] - this.pos[0], this.pos[3] - this.pos[1])\n  }\n}\n"],"names":["Vector2","massageInputPoint","Rect","of","x1","y1","x2","y2","pos","area","rect","Error","translate","x","y","scale","s","width","height","constrict","origin","setWidth","w","setHeight","h","floor","map","Math","ceil","round","equal","equals","_containsRect","contains","a","b","slope"],"mappings":"AAEA,MAAM,CAAEA,OAAO,IAAPA,CAAO,KAAO,CAAW,WACjC,MAAM,CAAEC,iBAAiB,IAAjBA,CAAiB,KAAO,CAAe,eAE/C,MAAM,OAAOC,IAAI,QAaRC,EAAE,CAACC,CAAiB,CAAEC,CAAW,CAAEC,CAAW,CAAEC,CAAW,CAAQ,CAAC,OACrEH,CAAE,YAAYF,IAAI,CACb,GAAG,CAACA,IAAI,CAACE,CAAE,CAACI,GAAG,CAAC,CAAC,EAAGJ,CAAE,CAACI,GAAG,CAAC,CAAC,EAAGJ,CAAE,CAACI,GAAG,CAAC,CAAC,EAAGJ,CAAE,CAACI,GAAG,CAAC,CAAC,GAGpD,GAAG,CAACN,IAAI,CAACE,CAAE,CAAEC,CAAE,CAAEC,CAAE,CAAEC,CAAE,CAChC,CAAC,OAMME,IAAI,CAACC,CAAU,CAAU,CAAC,AAC/B,EAAE,EAAGA,CAAI,IAAMA,CAAI,YAAYR,IAAI,EACjC,KAAK,CAAC,GAAG,CAACS,KAAK,CAAC,CAA2B,4BAG7C,MAAM,CAAED,CAAI,CAACF,GAAG,CAAC,CAAC,EAAIE,CAAI,CAACF,GAAG,CAAC,CAAC,IAAME,CAAI,CAACF,GAAG,CAAC,CAAC,EAAIE,CAAI,CAACF,GAAG,CAAC,CAAC,EAChE,CAAC,OAQMI,SAAS,CAACF,CAAU,CAAEG,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAG,CAAC,CAAQ,CAAC,AAChD,EAAE,EAAGJ,CAAI,IAAMA,CAAI,YAAYR,IAAI,EACjC,KAAK,CAAC,GAAG,CAACS,KAAK,CAAC,CAA2B,4BAG7C,MAAM,CAAC,GAAG,CAACT,IAAI,CACbQ,CAAI,CAACF,GAAG,CAAC,CAAC,EAAIK,CAAC,CACfH,CAAI,CAACF,GAAG,CAAC,CAAC,EAAIM,CAAC,CACfJ,CAAI,CAACF,GAAG,CAAC,CAAC,EAAIK,CAAC,CACfH,CAAI,CAACF,GAAG,CAAC,CAAC,EAAIM,CAAC,CAEnB,CAAC,OAOMC,KAAK,CAACL,CAAU,CAAEM,CAAS,CAAQ,CAAC,AACzC,EAAE,EAAGN,CAAI,IAAMA,CAAI,YAAYR,IAAI,EACjC,KAAK,CAAC,GAAG,CAACS,KAAK,CAAC,CAA2B,4BAG7C,MAAM,CAAC,GAAG,CAACT,IAAI,CACbQ,CAAI,CAACF,GAAG,CAAC,CAAC,EACVE,CAAI,CAACF,GAAG,CAAC,CAAC,EACVE,CAAI,CAACF,GAAG,CAAC,CAAC,EAAIE,CAAI,CAACO,KAAK,CAAGD,CAAC,CAC5BN,CAAI,CAACF,GAAG,CAAC,CAAC,EAAIE,CAAI,CAACQ,MAAM,CAAGF,CAAC,CAEjC,CAAC,OAEMG,SAAS,CAACT,CAAU,CAAEG,CAAS,CAAEC,CAAU,CAAE,CAAC,AACnD,EAAE,EAAGJ,CAAI,IAAMA,CAAI,YAAYR,IAAI,EACjC,KAAK,CAAC,GAAG,CAACS,KAAK,CAAC,CAA2B,4BAO7C,MAAM,CAJG,IAAI,EAATG,CAAC,GACHA,CAAC,CAAGD,CAAC,EAGA,GAAG,CAACX,IAAI,CACbQ,CAAI,CAACF,GAAG,CAAC,CAAC,EAAIK,CAAC,CACfH,CAAI,CAACF,GAAG,CAAC,CAAC,EAAIM,CAAC,CACfJ,CAAI,CAACF,GAAG,CAAC,CAAC,EAAIK,CAAC,CACfH,CAAI,CAACF,GAAG,CAAC,CAAC,EAAIM,CAAC,CAEnB,CAAC,IAEGG,KAAK,EAAW,CAAC,AACnB,MAAM,CAAC,IAAI,CAACT,GAAG,CAAC,CAAC,EAAI,IAAI,CAACA,GAAG,CAAC,CAAC,CACjC,CAAC,IAEGU,MAAM,EAAW,CAAC,AACpB,MAAM,CAAC,IAAI,CAACV,GAAG,CAAC,CAAC,EAAI,IAAI,CAACA,GAAG,CAAC,CAAC,CACjC,CAAC,IAEGC,IAAI,EAAW,CAAC,AAClB,MAAM,CAAC,IAAI,CAACQ,KAAK,CAAG,IAAI,CAACC,MAAM,AACjC,CAAC,IAEGE,MAAM,EAAa,CAAC,AACtB,MAAM,AAAC,CAAC,IAAI,CAACZ,GAAG,CAAC,CAAC,EAAG,IAAI,CAACA,GAAG,CAAC,CAAC,CAAC,CAAC,AACnC,CAAC,IAEGK,CAAC,EAAW,CAAC,AACf,MAAM,CAAC,IAAI,CAACL,GAAG,CAAC,CAAC,CACnB,CAAC,IAEGM,CAAC,EAAW,CAAC,AACf,MAAM,CAAC,IAAI,CAACN,GAAG,CAAC,CAAC,CACnB,CAAC,IAEGJ,EAAE,EAAW,CAAC,AAChB,MAAM,CAAC,IAAI,CAACI,GAAG,CAAC,CAAC,CACnB,CAAC,IAEGH,EAAE,EAAW,CAAC,AAChB,MAAM,CAAC,IAAI,CAACG,GAAG,CAAC,CAAC,CACnB,CAAC,IAEGF,EAAE,EAAW,CAAC,AAChB,MAAM,CAAC,IAAI,CAACE,GAAG,CAAC,CAAC,CACnB,CAAC,IAEGD,EAAE,EAAW,CAAC,AAChB,MAAM,CAAC,IAAI,CAACC,GAAG,CAAC,CAAC,CACnB,CAAC,AAEDa,QAAQ,CAACC,CAAS,CAAQ,CAAC,AAEzB,MAAM,CADN,IAAI,CAACd,GAAG,CAAC,CAAC,EAAI,IAAI,CAACA,GAAG,CAAC,CAAC,EAAIc,CAAC,CACtB,IAAI,AACb,CAAC,AAEDC,SAAS,CAACC,CAAS,CAAQ,CAAC,AAE1B,MAAM,CADN,IAAI,CAAChB,GAAG,CAAC,CAAC,EAAI,IAAI,CAACA,GAAG,CAAC,CAAC,EAAIgB,CAAC,CACtB,IAAI,AACb,CAAC,AAEDC,KAAK,EAAG,CAAC,AAEP,MAAM,CADN,IAAI,CAACjB,GAAG,CAAG,IAAI,CAACA,GAAG,CAACkB,GAAG,CAACC,IAAI,CAACF,KAAK,EAC3B,IAAI,AACb,CAAC,AAEDG,IAAI,EAAG,CAAC,AAEN,MAAM,CADN,IAAI,CAACpB,GAAG,CAAG,IAAI,CAACA,GAAG,CAACkB,GAAG,CAACC,IAAI,CAACC,IAAI,EAC1B,IAAI,AACb,CAAC,AAEDC,KAAK,EAAG,CAAC,AAKP,MAAM,CAJN,IAAI,CAACrB,GAAG,CAAC,CAAC,EAAImB,IAAI,CAACF,KAAK,CAAC,IAAI,CAACjB,GAAG,CAAC,CAAC,GACnC,IAAI,CAACA,GAAG,CAAC,CAAC,EAAImB,IAAI,CAACF,KAAK,CAAC,IAAI,CAACjB,GAAG,CAAC,CAAC,GACnC,IAAI,CAACA,GAAG,CAAC,CAAC,EAAImB,IAAI,CAACC,IAAI,CAAC,IAAI,CAACpB,GAAG,CAAC,CAAC,GAClC,IAAI,CAACA,GAAG,CAAC,CAAC,EAAImB,IAAI,CAACC,IAAI,CAAC,IAAI,CAACpB,GAAG,CAAC,CAAC,GAC3B,IAAI,AACb,CAAC,AAIDsB,KAAK,CAAC1B,CAAiB,CAAEC,CAAW,CAAEC,CAAW,CAAEC,CAAW,CAAW,CAAC,OACpEH,CAAE,YAAYF,IAAI,CACb,IAAI,CAAC4B,KAAK,IAAI1B,CAAE,CAACI,GAAG,EAI3B,IAAI,CAACA,GAAG,CAAC,CAAC,IAAMJ,CAAE,EAClB,IAAI,CAACI,GAAG,CAAC,CAAC,IAAMH,CAAE,EAClB,IAAI,CAACG,GAAG,CAAC,CAAC,IAAMF,CAAE,EAClB,IAAI,CAACE,GAAG,CAAC,CAAC,IAAMD,CAAE,AAEtB,CAAC,AAIDwB,MAAM,CAAC3B,CAAiB,CAAEC,CAAW,CAAEC,CAAW,CAAEC,CAAW,CAAW,CAAC,OACrEH,CAAE,YAAYF,IAAI,CACb,IAAI,CAAC4B,KAAK,IAAI1B,CAAE,CAACI,GAAG,EAGtB,IAAI,CAACsB,KAAK,CAAC1B,CAAE,CAAEC,CAAE,CAAEC,CAAE,CAAEC,CAAE,CAClC,CAAC,AAQDK,SAAS,CAACC,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAG,CAAC,CAAE,CAAC,AAOvB,MAAM,CANN,IAAI,CAACN,GAAG,CAAG,CAAC,AACV,IAAI,CAACA,GAAG,CAAC,CAAC,EAAIK,CAAC,CACf,IAAI,CAACL,GAAG,CAAC,CAAC,EAAIM,CAAC,CACf,IAAI,CAACN,GAAG,CAAC,CAAC,EAAIK,CAAC,CACf,IAAI,CAACL,GAAG,CAAC,CAAC,EAAIM,CAAC,CACjB,CAAC,CACM,IAAI,AACb,CAAC,AAEDC,KAAK,CAACC,CAAS,CAAE,CAAC,AAQhB,MAAM,CAPN,IAAI,CAACR,GAAG,CAAG,CAAC,AACV,IAAI,CAACA,GAAG,CAAC,CAAC,EACV,IAAI,CAACA,GAAG,CAAC,CAAC,EACV,IAAI,CAACA,GAAG,CAAC,CAAC,EAAI,IAAI,CAACS,KAAK,CAAGD,CAAC,CAC5B,IAAI,CAACR,GAAG,CAAC,CAAC,EAAI,IAAI,CAACU,MAAM,CAAGF,CAAC,CAC/B,CAAC,CAEM,IAAI,AACb,CAAC,AAEDG,SAAS,CAACN,CAAS,CAAEC,CAAU,CAAE,CAAC,AAUhC,MAAM,CATG,IAAI,EAATA,CAAC,GACHA,CAAC,CAAGD,CAAC,EAEP,IAAI,CAACL,GAAG,CAAG,CAAC,AACV,IAAI,CAACA,GAAG,CAAC,CAAC,EAAIK,CAAC,CACf,IAAI,CAACL,GAAG,CAAC,CAAC,EAAIM,CAAC,CACf,IAAI,CAACN,GAAG,CAAC,CAAC,EAAIK,CAAC,CACf,IAAI,CAACL,GAAG,CAAC,CAAC,EAAIM,CAAC,CACjB,CAAC,CACM,IAAI,AACb,CAAC,AAEOkB,aAAa,CAACtB,CAAU,CAAW,CAAC,AAC1C,KAAK,AAAC,CAACF,GAAG,CAAHA,CAAG,CAAC,CAAG,IAAI,CAClB,MAAM,CACJE,CAAI,CAACF,GAAG,CAAC,CAAC,GAAKA,CAAG,CAAC,CAAC,GACpBE,CAAI,CAACF,GAAG,CAAC,CAAC,GAAKA,CAAG,CAAC,CAAC,GACpBE,CAAI,CAACF,GAAG,CAAC,CAAC,GAAKA,CAAG,CAAC,CAAC,GACpBE,CAAI,CAACF,GAAG,CAAC,CAAC,GAAKA,CAAG,CAAC,CAAC,CAExB,CAAC,AAKDyB,QAAQ,CAACpB,CAAoB,CAAEC,CAAU,CAAW,CAAC,AACnD,EAAE,CAAED,CAAC,YAAYX,IAAI,CACnB,MAAM,CAAC,IAAI,CAAC8B,aAAa,CAACnB,CAAC,EAG7B,EAAE,CAAO,IAAI,EAATC,CAAC,CAAU,CAAC,AACd,KAAK,CAAEoB,CAAC,CAAEC,CAAC,EAAIlC,CAAiB,CAACY,CAAC,EAClC,MAAM,CAAC,IAAI,CAACoB,QAAQ,CAACC,CAAC,CAAEC,CAAC,CAC3B,CAAC,AAED,KAAK,AAAC,CAAC3B,GAAG,CAAHA,CAAG,CAAC,CAAG,IAAI,CAElB,MAAM,CAACK,CAAC,EAAIL,CAAG,CAAC,CAAC,GAAKM,CAAC,EAAIN,CAAG,CAAC,CAAC,GAAKK,CAAC,EAAIL,CAAG,CAAC,CAAC,GAAKM,CAAC,EAAIN,CAAG,CAAC,CAAC,CAChE,CAAC,AAMD4B,KAAK,EAAY,CAAC,AAChB,MAAM,CAAC,GAAG,CAACpC,CAAO,CAAC,IAAI,CAACQ,GAAG,CAAC,CAAC,EAAI,IAAI,CAACA,GAAG,CAAC,CAAC,EAAG,IAAI,CAACA,GAAG,CAAC,CAAC,EAAI,IAAI,CAACA,GAAG,CAAC,CAAC,EACxE,CAAC,YAvPWJ,CAAU,CAAEC,CAAU,CAAEC,CAAU,CAAEC,CAAU,CAAE,CAAC,AAC3D,IAAI,CAACC,GAAG,CAAG,CAACJ,CAAE,CAAEC,CAAE,CAAEC,CAAE,CAAEC,CAAE,CAAC,AAC7B,CAAC"}