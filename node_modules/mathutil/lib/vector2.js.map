{"version":3,"sources":["../src/vector2.ts"],"sourcesContent":["import type {InputVector, Position} from './inputScalar'\n\nimport {massageVectorInput} from './inputScalar'\n\nexport class Vector2 {\n  pos: Position\n\n  /**\n   * `x` and `y` refer to both direction and magnitude, they are stored in a\n   * point array for performance\n   * @constructs\n   * @param x <Number>\n   * @param y <Number>\n   */\n  constructor(x: number, y: number) {\n    this.pos = [x, y]\n    return this\n  }\n\n  static of(x: Vector2): Vector2\n  static of(x: number, y: number): Vector2\n  static of(x: Vector2 | number, y?: number) {\n    if (x instanceof Vector2) {\n      return new Vector2(x.pos[0], x.pos[1])\n    }\n\n    return new Vector2(x, y)\n  }\n\n  /**\n   * Adds two vectors and returns a new instance\n   * @param v1 <Vector2||Array||Number>\n   * @param v2 <Vector2||Array||Number>\n   * @returns <Vector2>\n   */\n  static add(v1: InputVector, v2: InputVector) {\n    const x = massageVectorInput(v1)\n    const y = massageVectorInput(v2)\n    return new Vector2(x[0] + y[0], x[1] + y[1])\n  }\n\n  /**\n   * Subtracts two vectors and returns a new instance\n   * @param v1 <Vector2||Array||Number>\n   * @param v2 <Vector2||Array||Number>\n   * @returns <Vector2>\n   */\n  static sub(v1: InputVector, v2: InputVector) {\n    const x = massageVectorInput(v1)\n    const y = massageVectorInput(v2)\n    return new Vector2(x[0] - y[0], x[1] - y[1])\n  }\n\n  /**\n   * Multiplies two vectors and returns a new instance\n   * @param v1 <Vector2||Array||Number>\n   * @param v2 <Vector2||Array||Number>\n   * @returns <Vector2>\n   */\n  static multiply(v1: InputVector, v2: InputVector) {\n    const x = massageVectorInput(v1)\n    const y = massageVectorInput(v2)\n    return new Vector2(x[0] * y[0], x[1] * y[1])\n  }\n\n  /**\n   * Divides two vectors and returns a new instance\n   * @param v1 <Vector2||Array||Number>\n   * @param v2 <Vector2||Array||Number>\n   * @returns <Vector2>\n   */\n  static divide(v1: InputVector, v2: InputVector) {\n    const x = massageVectorInput(v1)\n    const y = massageVectorInput(v2)\n    return new Vector2(\n      y[0] === 0 ? 0 : x[0] / y[0],\n      y[1] === 0 ? 0 : x[1] / y[1]\n    )\n  }\n\n  /**\n   * Returns the dot product of two vectors\n   * @param v1 <Vector2||Array||Number>\n   * @param v2 <Vector2||Array||Number>\n   * @returns <Float>\n   */\n  static dot(v1: InputVector, v2: InputVector) {\n    const x = massageVectorInput(v1)\n    const y = massageVectorInput(v2)\n    return x[0] * y[0] + x[1] * y[1]\n  }\n\n  /**\n   * Returns the cross product of two vectors\n   * @param v1 <Vector2||Array||Number>\n   * @param v2 <Vector2||Array||Number>\n   * @returns <Float>\n   */\n  static cross(v1: InputVector, v2: InputVector) {\n    const x = massageVectorInput(v1)\n    const y = massageVectorInput(v2)\n    return x[0] * y[1] - x[1] * y[0]\n  }\n\n  /**\n   * Returns the length of a vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <Float>\n   */\n  static len(vec: InputVector) {\n    const x = massageVectorInput(vec)\n    return Math.sqrt(Math.pow(x[0], 2) + Math.pow(x[1], 2))\n  }\n\n  /**\n   * Returns the unit vector of a given vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <Vector2>\n   */\n  static unit(vec: InputVector) {\n    const x = massageVectorInput(vec)\n    const len = Vector2.len(x)\n    return Vector2.divide(x, [len, len])\n  }\n\n  /**\n   * Returns the normal vector of a given vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <Vector2>\n   */\n  static normal(vec: InputVector) {\n    const x = massageVectorInput(vec)\n    return new Vector2(-x[1], x[0])\n  }\n\n  /**\n   * Returns the backface normal vector of a given vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <Vector2>\n   */\n  static backfaceNormal(vec: InputVector) {\n    const x = massageVectorInput(vec)\n    return new Vector2(x[1], -x[0])\n  }\n\n  /**\n   * Generates a unit vector from an angle\n   * @param angle <Float> in radians\n   * @returns <Vector2>\n   */\n  static fromAngle(angle: number) {\n    return new Vector2(1, 0).rotate(angle)\n  }\n\n  /**\n   * Generates a new vector from the given vector and angle\n   * @param vec <Vector2>\n   * @param angle <Float> in radians\n   * @returns <Vector2>\n   */\n  static rotate(vec: InputVector, angle: number) {\n    const x = massageVectorInput(vec)\n    const v = new Vector2(...x)\n    v.rotate(angle)\n    return v\n  }\n\n  /* -----------------------------------------------------------*\n   *\n   *  Basic ops\n   *\n   *----------------------------------------------------------- */\n\n  /**\n   * Getter for the x component of position\n   * @returns <Float>\n   */\n  get x() {\n    return this.pos[0]\n  }\n\n  /**\n   * Getter for the y component of position\n   * @returns <Float>\n   */\n  get y() {\n    return this.pos[1]\n  }\n\n  /**\n   * Getter for the length component of position i.e. the magnitude\n   * @returns <Float>\n   */\n  get length() {\n    return this.len()\n  }\n\n  /**\n   * Adds a second vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <this>\n   */\n  add(vec: InputVector) {\n    const p = massageVectorInput(vec)\n\n    this.pos = [this.pos[0] + p[0], this.pos[1] + p[1]]\n\n    return this\n  }\n\n  /**\n   * Subtracts a second vector and returns a new vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <this>\n   */\n  sub(vec: InputVector) {\n    const p = massageVectorInput(vec)\n\n    this.pos = [this.pos[0] - p[0], this.pos[1] - p[1]]\n\n    return this\n  }\n\n  /**\n   * Multiplies a second vector and returns a new vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <this>\n   */\n  multiply(vec: InputVector) {\n    const p = massageVectorInput(vec)\n\n    this.pos = [this.pos[0] * p[0], this.pos[1] * p[1]]\n\n    return this\n  }\n\n  /**\n   * Divides a second vector and returns a new vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <this>\n   */\n  divide(vec: InputVector) {\n    const p = massageVectorInput(vec)\n\n    this.pos = [\n      p[0] === 0 ? 0 : this.pos[0] / p[0],\n      p[1] === 0 ? 0 : this.pos[1] / p[1],\n    ]\n\n    return this\n  }\n\n  /**\n   * Sets the vector to the specified length\n   */\n  magnitude(len: InputVector) {\n    const vec = Vector2.multiply(this.unit(), len)\n    this.pos = vec.pos\n    return this\n  }\n\n  /**\n   * Returns the dot product of this vector and the supplied vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <Float>\n   */\n  dot(vec: InputVector) {\n    const p = massageVectorInput(vec)\n    return this.pos[0] * p[0] + this.pos[1] * p[1]\n  }\n\n  /**\n   * Returns the cross product of this vector and the supplied vector\n   * @param vec <Vector2||Array||Number>\n   * @returns <Float>\n   */\n  cross(vec: InputVector) {\n    const p = massageVectorInput(vec)\n    return this.pos[0] * p[1] - this.pos[1] * p[0]\n  }\n\n  /**\n   * Returns the length of the vector\n   * @returns <Float>\n   */\n  len() {\n    return Math.sqrt(Math.pow(this.pos[0], 2) + Math.pow(this.pos[1], 2))\n  }\n\n  /**\n   * Slightly cheaper determinant of length, really only useful for length comparisons\n   * @returns <Float>\n   */\n  sqrLen() {\n    return Math.pow(this.pos[0], 2) + Math.pow(this.pos[1], 2)\n  }\n\n  /**\n   * Returns unit vector of this vector\n   * @returns <Vector2>\n   */\n  unit() {\n    const len = this.len()\n    return Vector2.divide(this, len)\n  }\n\n  /* -----------------------------------------------------------*\n   *\n   *  Rotation\n   *\n   *----------------------------------------------------------- */\n\n  /**\n   * Quick rotate 90 degrees to the left, where y is 'up' this is the normal vector\n   * @returns <Vector2>\n   */\n  normal() {\n    return new Vector2(-this.pos[1], this.pos[0])\n  }\n\n  /**\n   * Quick rotate 90 deg right, where y is 'up' this grabs the normal of the backface\n   * @returns <Vector2>\n   */\n  backfaceNormal() {\n    return new Vector2(this.pos[1], -this.pos[0])\n  }\n\n  /**\n   * Rotates the vector\n   * @TODO specify angle as an integer and use pre-calc tables for sin & cos\n   * @param angle <Float> in radians\n   * @returns <Vector2>\n   */\n  rotate(angle: number) {\n    const [x, y] = this.pos\n    const sin = Math.sin(angle)\n    const cos = Math.cos(angle)\n    this.pos = [x * cos - y * sin, x * sin + y * cos]\n    return this\n  }\n\n  /**\n   * Points the vector in a certain direction\n   * @param angle <Float> in radians\n   * @returns <Vector2>\n   */\n  turn(angle: number) {\n    const len = this.len()\n    const dir = new Vector2(1, 0).rotate(angle)\n    this.pos = [dir.pos[0] * len, dir.pos[1] * len]\n    return this\n  }\n\n  /**\n   * Returns the vector angle\n   * @returns <Float> in radians\n   */\n  angle() {\n    return Math.atan2(this.pos[1], this.pos[0])\n  }\n\n  /* -----------------------------------------------------------*\n   *\n   *  Useful stuff\n   *\n   *----------------------------------------------------------- */\n\n  /**\n   * Returns a new vector linearly interpolated along the length of\n   * this vector\n   * @param value <Float>\n   * @returns <Vector2>\n   */\n  lerp(value: number) {\n    return Vector2.multiply(this, value)\n  }\n\n  /**\n   * Calcs the distance between this vector and another one\n   * @param vec <Vector2||Point>\n   * @returns <Float>\n   */\n  distance(vec: InputVector) {\n    return Vector2.sub(this, vec).len()\n  }\n\n  /**\n   * Checks if the supplied vector is parallel to this vector\n   * @param vec <Vector2>\n   * @returns <Boolean>\n   */\n  isHeading(vec: Vector2) {\n    return Vector2.dot(this.unit(), vec.unit()) === 1\n  }\n\n  /**\n   * Checks if the supplied vector is generally heading in the same direction\n   * within `angle` degrees of accuracy\n   * @param vec <Vector2>\n   * @param angle <Float> in radians\n   * @returns <Boolean>\n   */\n  isNearHeading(vec: Vector2, angle: number) {\n    return Vector2.dot(this.unit(), vec.unit()) > Math.cos(angle)\n  }\n}\n"],"names":["Vector2","of","x","y","pos","add","v1","v2","sub","multiply","divide","dot","cross","len","vec","Math","sqrt","pow","unit","normal","backfaceNormal","fromAngle","angle","rotate","v","length","p","magnitude","sqrLen","sin","cos","turn","dir","atan2","lerp","value","distance","isHeading","isNearHeading"],"mappings":"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"}