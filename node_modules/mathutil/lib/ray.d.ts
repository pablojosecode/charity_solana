import type { Position } from './inputScalar';
import { Vector2 } from './vector2';
declare type CastOptions = {
    initial: boolean;
    origin: Position;
    magnitude: number;
    step: number;
};
export declare class Ray {
    dir: Vector2;
    constructor(v: Vector2);
    static of(v: Vector2): Ray;
    /**
     * Returns a generator function that yields the process of casting the ray
     * @param opts <Object>
     *   @param initial <Boolean> should output initial position
     *   @param origin <Array> length-2 array describing origin position for cast
     *   @param magnitude <Number> magnitude of the ray section being cast
     *   @param step <Number> amount to step per operation
     */
    cast(opts: CastOptions): () => Generator<Vector2, void, unknown>;
    /**
     * Project casts the ray synchronously and returns a function that accepts
     * a callback for each iteration of the ray cast
     * @param opts <Object>
     *   @param initial <Boolean> should output initial position
     *   @param origin <Array> length-2 array describing origin position for cast
     *   @param magnitude <Number> magnitude of the ray section being cast
     *   @param step <Number> amount to step per operation
     */
    project(opts: CastOptions): (cb: (v: Vector2) => void) => void;
}
export {};
