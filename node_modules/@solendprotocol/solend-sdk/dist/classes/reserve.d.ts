/// <reference types="node" />
import { AccountInfo, Connection } from "@solana/web3.js";
import BigNumber from "bignumber.js";
import BN from "bn.js";
import { FormattedMarketConfig, RewardsData } from "./market";
export declare type ReserveData = {
    optimalUtilizationRate: number;
    loanToValueRatio: number;
    liquidationBonus: number;
    liquidationThreshold: number;
    minBorrowRate: number;
    optimalBorrowRate: number;
    maxBorrowRate: number;
    borrowFeePercentage: number;
    hostFeePercentage: number;
    depositLimit: BN;
    reserveBorrowLimit: BN;
    name: string;
    symbol: string;
    decimals: number;
    mintAddress: string;
    totalDepositsWads: BN;
    totalBorrowsWads: BN;
    totalLiquidityWads: BN;
    supplyInterestAPY: number;
    borrowInterestAPY: number;
    assetPriceUSD: number;
    userDepositLimit?: number;
    cumulativeBorrowRateWads: BN;
    cTokenExchangeRate: number;
};
declare type FormattedReserveConfig = FormattedMarketConfig["reserves"][0];
export declare class SolendReserve {
    config: FormattedReserveConfig;
    private rewardsData;
    private buffer;
    stats: ReserveData | null;
    private connection;
    constructor(reserveConfig: FormattedReserveConfig, connection: Connection);
    private calculateSupplyAPY;
    private calculateBorrowAPY;
    private calculateSupplyAPR;
    private calculateUtilizationRatio;
    private calculateBorrowAPR;
    setBuffer(buffer: AccountInfo<Buffer> | null): void;
    load(rewardsData?: RewardsData): Promise<void>;
    calculateRewardAPY(rewardRate: string, poolSize: string, rewardPrice: number, tokenPrice: number, decimals: number): BigNumber;
    totalSupplyAPY(): {
        interestAPY: number;
        totalAPY: number;
        rewards: {
            rewardMint: string | undefined;
            rewardSymbol: string;
            apy: number;
            price: number;
        }[];
    };
    totalBorrowAPY(): {
        interestAPY: number;
        totalAPY: number;
        rewards: {
            rewardMint: string | undefined;
            rewardSymbol: string;
            apy: number;
            price: number;
        }[];
    };
    private formatReserveData;
}
export {};
