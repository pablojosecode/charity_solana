import { Connection, PublicKey } from "@solana/web3.js";
import { ConfigType } from "./types";
import { SolendObligation } from "./obligation";
import { SolendReserve } from "./reserve";
export declare type RewardInfo = {
    rewardRate: string;
    rewardMint?: string;
    rewardSymbol: string;
    price: number;
};
export declare type RewardsData = {
    [key: string]: {
        supply: Array<RewardInfo>;
        borrow: Array<RewardInfo>;
    };
};
export declare type RewardStatType = {
    rewardsPerShare: string;
    totalBalance: string;
    lastSlot: number;
    rewardRates: Array<{
        beginningSlot: number;
        rewardRate: string;
        name?: string;
    }>;
} | null;
export declare type RewardResponse = {
    supply: RewardStatType;
    borrow: RewardStatType;
};
export declare type FormattedMarketConfig = ReturnType<typeof formatReserveConfig>;
export declare function formatReserveConfig(config: ConfigType, marketAddress?: string): {
    pythProgramID: string;
    switchboardProgramID: string;
    programID: string;
    reserves: {
        priceAddress: string;
        switchboardFeedAddress: string;
        name: string;
        symbol: string;
        decimals: number;
        mintAddress: string;
        asset: string;
        address: string;
        collateralMintAddress: string;
        collateralSupplyAddress: string;
        liquidityAddress: string;
        liquidityFeeReceiverAddress: string;
        userSupplyCap?: number | undefined;
    }[];
    name: string;
    address: string;
    authorityAddress: string;
    isPrimary: boolean;
};
export declare class SolendMarket {
    reserves: Array<SolendReserve>;
    rewardsData: RewardsData | null;
    config: FormattedMarketConfig | null;
    private connection;
    private constructor();
    static initialize(connection: Connection, environment?: "production" | "devnet", marketAddress?: string): Promise<SolendMarket>;
    fetchObligationByWallet(publicKey: PublicKey): Promise<SolendObligation | null>;
    loadAll(): Promise<void>;
    private loadLMRewardData;
    private loadExternalRewardData;
    private loadPriceData;
    private getLatestRewardRate;
    loadRewards(): Promise<void>;
    loadReserves(): Promise<void>;
    refreshAll(): Promise<void>;
}
