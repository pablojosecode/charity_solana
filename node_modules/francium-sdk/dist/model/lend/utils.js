"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadLendRewardUserInfo = exports.findUserLendRewardAddress = exports.FarmingPoolLayout = exports.FarmingUserLayout = void 0;
const web3_js_1 = require("@solana/web3.js");
const BufferLayout = require("buffer-layout");
const rewards_1 = require("../../constants/lend/rewards");
exports.FarmingUserLayout = BufferLayout.struct([
    BufferLayout.u8("version"),
    BufferLayout.nu64("staked_amount"),
    BufferLayout.nu64("rewards_debt"),
    BufferLayout.nu64("rewards_debt_b"),
    BufferLayout.blob(32, "farming_pool"),
    BufferLayout.blob(32, "user_main"),
    BufferLayout.blob(32, "stake_token_account"),
    BufferLayout.blob(32, "rewards_token_accont"),
    BufferLayout.blob(32, "rewards_token_account_b"),
    BufferLayout.blob(128, "padding")
]);
exports.FarmingPoolLayout = BufferLayout.struct([
    BufferLayout.u8("version"),
    BufferLayout.u8("is_dual_rewards"),
    BufferLayout.blob(32, "admin"),
    BufferLayout.blob(32, "token_program_id"),
    BufferLayout.blob(32, "pool_authority"),
    BufferLayout.blob(32, "staked_token_mint"),
    BufferLayout.blob(32, "staked_token_account"),
    BufferLayout.blob(32, "rewards_token_mint"),
    BufferLayout.blob(32, "rewards_token_account"),
    BufferLayout.blob(32, "rewards_token_mint_b"),
    BufferLayout.blob(32, "rewards_token_account_b"),
    BufferLayout.nu64("pool_stake_cap"),
    BufferLayout.nu64("user_stake_cap"),
    BufferLayout.nu64("rewards_start_slot"),
    BufferLayout.nu64("rewards_end_slot"),
    BufferLayout.nu64("rewards_per_day"),
    BufferLayout.nu64("rewards_start_slot_b"),
    BufferLayout.nu64("rewards_end_slot_b"),
    BufferLayout.nu64("rewards_per_day_b"),
    BufferLayout.nu64("total_staked_amount"),
    BufferLayout.nu64("last_update_slot"),
    BufferLayout.blob(16, "accumulated_rewards_per_share"),
    BufferLayout.blob(16, "accumulated_rewards_per_share_b"),
    BufferLayout.blob(128, "padding")
]);
function findUserLendRewardAddress(userPublicKey, userStakeTokenAccount, farmingPoolAccount = rewards_1.lendRewardInfo.USDC.farmingPoolAccount, programId = rewards_1.lendRewardInfo.USDC.programId) {
    return __awaiter(this, void 0, void 0, function* () {
        const [farmInfoPub, nonce] = yield web3_js_1.PublicKey.findProgramAddress([
            userPublicKey.toBuffer(),
            farmingPoolAccount.toBuffer(),
            userStakeTokenAccount.toBuffer()
        ], programId);
        return farmInfoPub;
    });
}
exports.findUserLendRewardAddress = findUserLendRewardAddress;
function loadLendRewardUserInfo(connection, userInfoAccount, programId) {
    return __awaiter(this, void 0, void 0, function* () {
        const accountInfo = yield connection.getAccountInfo(userInfoAccount, 'confirmed');
        if (accountInfo === null) {
            throw new Error('Failed to find account');
        }
        if (!accountInfo.owner.equals(programId)) {
            throw new Error(`Invalid owner: ${JSON.stringify(accountInfo.owner)}`);
        }
        const buf = Buffer.from(accountInfo.data);
        const decodeData = exports.FarmingUserLayout.decode(buf);
        return decodeData;
    });
}
exports.loadLendRewardUserInfo = loadLendRewardUserInfo;
