"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLendingPoolBalance = void 0;
const spl_token_1 = require("@solana/spl-token");
const pools_1 = require("../../constants/lend/pools");
const lodash_1 = require("lodash");
function getLendingPoolBalance(connection, userPublicKey) {
    return __awaiter(this, void 0, void 0, function* () {
        const userTokenAccounts = yield connection.getParsedTokenAccountsByOwner(userPublicKey, {
            programId: spl_token_1.TOKEN_PROGRAM_ID
        }, 'confirmed');
        const result = {};
        pools_1.lendingPoolList.forEach(i => {
            const info = pools_1.lendingPools[i.pool];
            const mint = info.lendingPoolShareMint;
            const account = (0, lodash_1.find)(userTokenAccounts.value, (accountInfo) => {
                const parsedInfo = accountInfo.account.data.parsed.info;
                const mintAddress = parsedInfo.mint;
                if (mintAddress === mint.toBase58()) {
                    return true;
                }
                return false;
            });
            if (account) {
                result[i.pool] = {
                    amount: Number(account.account.data.parsed.info.tokenAmount.amount),
                    scale: i.scale
                };
            }
        });
        return result;
    });
}
exports.getLendingPoolBalance = getLendingPoolBalance;
