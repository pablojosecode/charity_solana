"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStSolExchangeRate = exports.addReferral = exports.MAINNET_PROGRAM_ADDRESSES = exports.INSTRUCTION = void 0;
const borsh_1 = require("@project-serum/borsh");
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const BufferLayout = require("buffer-layout");
const bignumber_js_1 = require("bignumber.js");
const referrerId = '82z4r6cZ11zxuxh7vtVYECgLDbmdh3VfiorEyxjMi9gq';
const MEMO_PROGRAM_ID = new web3_js_1.PublicKey('MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr');
var INSTRUCTION;
(function (INSTRUCTION) {
    INSTRUCTION[INSTRUCTION["STAKE"] = 1] = "STAKE";
    INSTRUCTION[INSTRUCTION["UNSTAKE"] = 2] = "UNSTAKE";
})(INSTRUCTION = exports.INSTRUCTION || (exports.INSTRUCTION = {}));
exports.MAINNET_PROGRAM_ADDRESSES = {
    solidoProgramId: new web3_js_1.PublicKey('CrX7kMhLC3cSsXJdT7JDgqrRVWGnUpX3gfEfxxU2NVLi'),
    solidoInstanceId: new web3_js_1.PublicKey('49Yi1TKkNyYjPAFdR9LBvoHcUjuPX4Df5T5yv39w2XTn'),
    stSolMintAddress: new web3_js_1.PublicKey('7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj'),
    reserveAccount: new web3_js_1.PublicKey('3Kwv3pEAuoe4WevPB4rgMBTZndGDb53XT7qwQKnvHPfX'),
    mintAuthority: new web3_js_1.PublicKey('8kRRsKezwXS21beVDcAoTmih1XbyFnEAMXXiGXz6J3Jz')
};
function mintStSol(userPublicKey, userTokenAccount, amount) {
    const dataLayout = (0, borsh_1.struct)([(0, borsh_1.u8)('instruction'), (0, borsh_1.u64)('amount')]);
    const data = Buffer.alloc(dataLayout.span);
    dataLayout.encode({
        instruction: INSTRUCTION.STAKE,
        amount,
    }, data);
    const keys = [
        { pubkey: exports.MAINNET_PROGRAM_ADDRESSES.solidoInstanceId, isSigner: false, isWritable: true },
        { pubkey: userPublicKey, isSigner: true, isWritable: true },
        { pubkey: userTokenAccount, isSigner: false, isWritable: true },
        { pubkey: exports.MAINNET_PROGRAM_ADDRESSES.stSolMintAddress, isSigner: false, isWritable: true },
        { pubkey: exports.MAINNET_PROGRAM_ADDRESSES.reserveAccount, isSigner: false, isWritable: true },
        { pubkey: exports.MAINNET_PROGRAM_ADDRESSES.mintAuthority, isSigner: false, isWritable: false },
        { pubkey: spl_token_1.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
        { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false },
    ];
    return new web3_js_1.TransactionInstruction({
        keys,
        programId: exports.MAINNET_PROGRAM_ADDRESSES.solidoProgramId,
        data,
    });
}
exports.default = mintStSol;
function addReferral(userPublicKey) {
    return new web3_js_1.TransactionInstruction({
        programId: MEMO_PROGRAM_ID,
        data: Buffer.from(JSON.stringify({
            referrer: referrerId
        })),
        keys: [{ isSigner: true, isWritable: false, pubkey: userPublicKey }],
    });
}
exports.addReferral = addReferral;
function getStSolExchangeRate(connection) {
    return __awaiter(this, void 0, void 0, function* () {
        const InfoLayout = BufferLayout.struct([
            (0, borsh_1.u8)('lido_version'),
            (0, borsh_1.u128)('manager1'),
            (0, borsh_1.u128)('manager2'),
            (0, borsh_1.u128)('st_sol_mint1'),
            (0, borsh_1.u128)('st_sol_mint2'),
            (0, borsh_1.u64)('computed_in_epoch'),
            (0, borsh_1.u64)('st_sol_supply'),
            (0, borsh_1.u64)('sol_balance')
        ]);
        const accountInfo = yield connection.getAccountInfo(exports.MAINNET_PROGRAM_ADDRESSES.solidoInstanceId);
        const buf = Buffer.from(accountInfo.data);
        const decodeData = InfoLayout.decode(buf);
        return new bignumber_js_1.default(decodeData.st_sol_supply.toString()).dividedBy(new bignumber_js_1.default(decodeData.sol_balance.toString())).toNumber();
    });
}
exports.getStSolExchangeRate = getStSolExchangeRate;
