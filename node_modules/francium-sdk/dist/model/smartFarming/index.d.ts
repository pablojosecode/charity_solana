import { Program, web3, BN } from '@project-serum/anchor';
import { AccountMeta, Connection, PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';
import { SmartFarmingInfoItem } from '../../constants/smartFarming/raydium/pools';
import { OrcaSmartFarmingInfoItem } from '../../constants/smartFarming/orca/pools';
export interface FormattedUserSmartLendingPositionItem {
    pool: string;
    userInfoAccount: PublicKey;
    userLPShares: BN;
}
export declare class FranciumSmartFarming {
    private idl;
    program: Program;
    connection: Connection;
    config: {
        raydium: {
            [pool: string]: SmartFarmingInfoItem;
        };
        orca: {
            [pool: string]: OrcaSmartFarmingInfoItem;
        };
    };
    constructor(config: {
        connection: Connection;
    });
    getAllPoolStatus(): Promise<{
        pool: string;
        poolInfoAccount: web3.PublicKey;
        decimals: number;
        platform: string;
        alias: string;
        info: any;
        maxCapacityLimit: number;
        currentAmount: number;
        rewardInfo: {
            token: string;
            decimals: number;
            rewardsPerSecond: number;
        }[];
    }[]>;
    getUserPositions(userPublicKey: PublicKey): Promise<{
        publicKey: any;
        account: any;
    }[]>;
    getFormattedUserPositions(userPublicKey?: PublicKey): Promise<{
        pool: {
            pool: string;
            poolInfoAccount: web3.PublicKey;
            decimals: number;
            platform: string;
            alias: string;
            info: any;
            maxCapacityLimit: number;
            currentAmount: number;
            rewardInfo: {
                token: string;
                decimals: number;
                rewardsPerSecond: number;
            }[];
        }[];
        user: any[];
    }>;
    withdraw(userPublicKey: PublicKey, poolName: string, platform: string, configs: {
        userInfoAccount: PublicKey;
        shareAmount: BN;
        withdrawType?: number;
    }): Promise<web3.Transaction[]>;
    deposit(userPublicKey: PublicKey, poolName: string, platform: string, configs: {
        userInfoAccount?: PublicKey;
        amount0: BN;
        amount1: BN;
        borrow0: BN;
        borrow1: BN;
    }): Promise<web3.Transaction[]>;
    initUserInfo(userPublicKey: PublicKey, targetLendInfo: SmartFarmingInfoItem): Promise<[PublicKey, TransactionInstruction]>;
    initUserAccount(userPublicKey: PublicKey, targetFarmInfo: SmartFarmingInfoItem, trx?: Transaction): Promise<any[]>;
    transfer(userPublicKey: PublicKey, userInfoAccount: PublicKey, targetInfo: SmartFarmingInfoItem, configs: {
        amount0: BN;
        amount1: BN;
        userToken0Account: PublicKey;
        userToken1Account: PublicKey;
    }): Promise<any[]>;
    transferToWSOL(amount: BN, WSOLAccount: PublicKey, userPublicKey: PublicKey): web3.TransactionInstruction[];
    borrow(userPublicKey: PublicKey, userInfoAccount: PublicKey, targetInfo: SmartFarmingInfoItem | OrcaSmartFarmingInfoItem, platform: string, configs: {
        borrow0: BN;
        borrow1: BN;
    }): Promise<web3.TransactionInstruction[]>;
    swapForBalance(userPublicKey: PublicKey, userInfoAccount: PublicKey, targetInfo: SmartFarmingInfoItem): web3.TransactionInstruction;
    swapForBalanceOrca(userPublicKey: PublicKey, userInfoAccount: PublicKey, targetInfo: OrcaSmartFarmingInfoItem): web3.TransactionInstruction;
    addLiquidity(userPublicKey: PublicKey, userInfoAccount: PublicKey, targetInfo: SmartFarmingInfoItem, userRewardAccount: PublicKey): web3.TransactionInstruction;
    addLiquidityOrca(userPublicKey: PublicKey, userInfoAccount: PublicKey, targetInfo: OrcaSmartFarmingInfoItem, userRewardAccount: PublicKey): web3.TransactionInstruction;
    stakeToVault(userPublicKey: PublicKey, userInfoAccount: PublicKey, targetInfo: SmartFarmingInfoItem): web3.TransactionInstruction;
    stakeToVaultOrca(userPublicKey: PublicKey, userInfoAccount: PublicKey, targetInfo: OrcaSmartFarmingInfoItem): any[];
    buildBorrowIx(userPublicKey: PublicKey, userInfoAccount: PublicKey, targetInfo: SmartFarmingInfoItem, index: number, amount: BN): web3.TransactionInstruction;
    buildBorrowIxOrca(userPublicKey: PublicKey, userInfoAccount: PublicKey, targetInfo: OrcaSmartFarmingInfoItem, index: number, amount: BN): web3.TransactionInstruction;
    getBorrowRemainingAccounts(targetInfo: SmartFarmingInfoItem, index: number): AccountMeta[];
    unStakeFarmPosition(userPublicKey: PublicKey, userInfoAccount: PublicKey, targetInfo: SmartFarmingInfoItem, userRewardAccount: PublicKey, shareAmount: BN, withdrawType: number): web3.TransactionInstruction[];
    unStakeFarmPositionOrca(userPublicKey: PublicKey, userInfoAccount: PublicKey, targetInfo: OrcaSmartFarmingInfoItem, userRewardAccount: PublicKey, shareAmount: BN, withdrawType: number): web3.TransactionInstruction[];
    unpackLpToTokens(userPublicKey: PublicKey, userInfoAccount: PublicKey, targetFarmInfo: SmartFarmingInfoItem): web3.TransactionInstruction;
    unpackLpToTokensOrca(userPublicKey: PublicKey, userInfoAccount: PublicKey, targetFarmInfo: OrcaSmartFarmingInfoItem): web3.TransactionInstruction;
    swapAndWithdraw(userPublicKey: PublicKey, userInfoAccount: PublicKey, targetFarmInfo: SmartFarmingInfoItem, userTokenAccount0: PublicKey, userTokenAccount1: PublicKey): web3.TransactionInstruction;
    swapAndWithdrawOrca(userPublicKey: PublicKey, userInfoAccount: PublicKey, targetFarmInfo: OrcaSmartFarmingInfoItem, userTokenAccount0: PublicKey, userTokenAccount1: PublicKey): web3.TransactionInstruction;
    repay(userPublicKey: PublicKey, userInfoAccount: PublicKey, targetFarmInfo: SmartFarmingInfoItem): web3.TransactionInstruction[];
    closeUserInfo(userPublicKey: PublicKey, poolInfo: PublicKey, userInfoAccount: PublicKey): web3.TransactionInstruction;
    claimRewards(userPublicKey: PublicKey, platform: string, poolName: string, userInfoAccount: PublicKey): Promise<web3.Transaction>;
}
