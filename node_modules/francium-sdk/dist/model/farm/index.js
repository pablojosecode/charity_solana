"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FranciumFarm = void 0;
const anchor_1 = require("@project-serum/anchor");
const config_1 = require("../../constants/farm/raydium/config");
const config_2 = require("../../constants/farm/orca/config");
const info_1 = require("../../constants/farm/raydium/info");
const info_2 = require("../../constants/farm/orca/info");
const web3_js_1 = require("@solana/web3.js");
const spl_token_1 = require("@solana/spl-token");
const tools_1 = require("../../utils/tools");
const lodash_1 = require("lodash");
const commitment = 'confirmed';
class FranciumFarm {
    constructor(config) {
        this.configs = {};
        this.programs = {};
        this.configs = {
            raydium: {
                idl: config_1.default,
                programId: info_1.lyfRaydiumProgramId,
                config: info_1.RAYDIUM_FARM_CONFIG
            },
            orca: {
                idl: config_2.default,
                programId: info_2.lyfOrcaProgramId,
                config: info_2.ORCA_FARM_CONFIG
            }
        };
        this.connection = config.connection;
    }
    getFarmPoolsInfo(pools) {
        return __awaiter(this, void 0, void 0, function* () {
            const strategyAccounts = pools.map(i => {
                const targetFarmInfo = this.getConfig(i.pair, i.lyfType || 'raydium');
                return targetFarmInfo.strategyAccount;
            });
            const res = yield this.connection.getMultipleAccountsInfo(strategyAccounts, 'confirmed');
            const decodeResult = res.map((i, index) => {
                const poolItem = pools[index];
                const program = this.getProgram(poolItem.lyfType || 'raydium');
                const strategyInfo = program.coder.accounts.decode('StrategyState', i.data);
                const strategyAccount = strategyAccounts[index];
                return Object.assign({ id: `${poolItem.pair}[${poolItem.from}]`, priceKey: poolItem.alias || poolItem.pair, strategyAccount, token0: poolItem.token0, token1: poolItem.token1, lpDecimals: poolItem.lyfType === 'orca' ? 6 : (0, tools_1.getTokenDecimals)(poolItem.token1) }, strategyInfo);
            });
            return decodeResult;
        });
    }
    getProgram(type = 'raydium') {
        if (this.programs[type]) {
            return this.programs[type];
        }
        else {
            const { idl, programId } = this.configs[type];
            const program = new anchor_1.Program(idl, programId, new anchor_1.Provider(this.connection, null, {
                skipPreflight: true,
                commitment,
                preflightCommitment: commitment
            }));
            this.programs[type] = program;
            return program;
        }
    }
    getConfig(pair, type = 'raydium') {
        const { config } = this.configs[type];
        return config[pair];
    }
    getSwapPoolId(pair, type = 'raydium') {
        var _a, _b;
        const config = this.getConfig(pair, type);
        return ((_a = config.raydiumInfo) === null || _a === void 0 ? void 0 : _a.ammId) || ((_b = config.ammInfo) === null || _b === void 0 ? void 0 : _b.swapPoolId);
    }
    getUserPositionsAll(userPublicKey) {
        return __awaiter(this, void 0, void 0, function* () {
            let pubkey = userPublicKey;
            if ((0, lodash_1.isString)(userPublicKey)) {
                pubkey = new web3_js_1.PublicKey(userPublicKey);
            }
            const orcaInfos = yield this.getUserPositionsByProgram('orca', pubkey);
            const raydiumInfos = yield this.getUserPositionsByProgram('raydium', pubkey);
            return {
                orca: orcaInfos,
                raydium: raydiumInfos
            };
        });
    }
    getUserPositionsByProgram(programType, userPublicKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const program = this.getProgram(programType || 'raydium');
            const decodeResult = [];
            const infos = yield this.connection.getProgramAccounts(program.programId, {
                filters: [
                    { dataSize: 285 },
                    {
                        memcmp: {
                            offset: 8 + 1 + 8 + 32,
                            bytes: userPublicKey.toBase58()
                        }
                    }
                ]
            });
            infos.forEach((item, index) => {
                const userInfo = program.coder.accounts.decode('UserInfo', item.account.data);
                decodeResult.push({
                    publicKey: item.pubkey,
                    data: userInfo
                });
            });
            return decodeResult;
        });
    }
    getUserPositions(pools, userPublicKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const userInfoAccounts = yield Promise.all(pools.map((i) => __awaiter(this, void 0, void 0, function* () {
                const program = this.getProgram(i.lyfType || 'raydium');
                const targetFarmInfo = this.getConfig(i.pair, i.lyfType || 'raydium');
                const userInfoAddress = yield program.account.userInfo.associatedAddress(userPublicKey, targetFarmInfo.strategyAccount);
                return userInfoAddress;
            })));
            const res = yield this.connection.getMultipleAccountsInfo(userInfoAccounts, 'confirmed');
            const decodeResult = res.map((i, index) => {
                const program = this.getProgram(pools[index].lyfType || 'raydium');
                if (i) {
                    const userInfo = program.coder.accounts.decode('UserInfo', i.data);
                    return userInfo;
                }
                return null;
            });
            return decodeResult;
        });
    }
    getBorrowParams(config, userMainAccount, userInfoAccount, type = 'raydium') {
        if (type === 'orca') {
            return this.getOrcaBorrowParams(config, userMainAccount, userInfoAccount);
        }
        return this.getRaydiumBorrowParams(config, userMainAccount, userInfoAccount);
    }
    getRaydiumBorrowParams(config, userMainAccount, userInfoAccount) {
        return [
            {
                accounts: {
                    userMainAccount: userMainAccount,
                    userInfoAccount: userInfoAccount,
                    strategyState: config.strategyAccount,
                    strategyAuthority: config.strategyAuthority,
                    strategyTknAccount0: config.strategyTknAccount0,
                    strategyTknAccount1: config.strategyTknAccount1,
                    lendingMarketAccount: config.lendingPoolConfig.marketInfoAccount,
                    lendingMarketAuthorityInfo: config.lendingPoolConfig.marketAuthority,
                    lendingPoolProgramId: config.lendingPoolConfig.programId,
                    lendingPoolInfoAccount0: config.lendingPoolConfig["0"].lendingPoolInfoAccount,
                    lendingPoolTknAccount0: config.lendingPoolConfig["0"].lendingPoolTknAccount,
                    lendingPoolCreditAccount0: config.lendingPoolConfig["0"].lendingPoolCreditAccount,
                    strategyCreditAccount0: config.strategyBorrowCreditAccount0,
                    lendingPoolInfoAccount1: config.lendingPoolConfig["1"].lendingPoolInfoAccount,
                    lendingPoolTknAccount1: config.lendingPoolConfig["1"].lendingPoolTknAccount,
                    lendingPoolCreditAccount1: config.lendingPoolConfig["1"].lendingPoolCreditAccount,
                    strategyCreditAccount1: config.strategyBorrowCreditAccount1,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    clock: web3_js_1.SYSVAR_CLOCK_PUBKEY,
                    ammId: config.raydiumInfo.ammId,
                    ammOpenOrders: config.raydiumInfo.ammOpenOrders,
                    ammTknAccount0: config.raydiumInfo.ammPcAccount,
                    ammTknAccount1: config.raydiumInfo.ammCoinAccount,
                    lpMintAccount: config.lpMint
                }
            }
        ];
    }
    getOrcaBorrowParams(config, userMainAccount, userInfoAccount) {
        return [{
                accounts: {
                    userMainAccount: userMainAccount,
                    userInfoAccount: userInfoAccount,
                    strategyState: config.strategyAccount,
                    strategyAuthority: config.strategyAuthority,
                    strategyTknAccount0: config.strategyTknAccount0,
                    strategyTknAccount1: config.strategyTknAccount1,
                    lendingMarketAccount: config.lendingPoolConfig.marketInfoAccount,
                    lendingMarketAuthorityInfo: config.lendingPoolConfig.marketAuthority,
                    lendingPoolProgramId: config.lendingPoolConfig.programId,
                    lendingPoolInfoAccount0: config.lendingPoolConfig["0"].lendingPoolInfoAccount,
                    lendingPoolTknAccount0: config.lendingPoolConfig["0"].lendingPoolTknAccount,
                    lendingPoolCreditAccount0: config.lendingPoolConfig["0"].lendingPoolCreditAccount,
                    strategyCreditAccount0: config.strategyBorrowCreditAccount0,
                    lendingPoolInfoAccount1: config.lendingPoolConfig["1"].lendingPoolInfoAccount,
                    lendingPoolTknAccount1: config.lendingPoolConfig["1"].lendingPoolTknAccount,
                    lendingPoolCreditAccount1: config.lendingPoolConfig["1"].lendingPoolCreditAccount,
                    strategyCreditAccount1: config.strategyBorrowCreditAccount1,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    clock: web3_js_1.SYSVAR_CLOCK_PUBKEY,
                    swapPoolId: config.ammInfo.swapPoolId,
                    swapPoolTknAccount0: config.ammInfo.swapTknVault0,
                    swapPoolTknAccount1: config.ammInfo.swapTknVault1,
                    lpMint: config.ammInfo.lpMint
                }
            }];
    }
    getSwapParams(config, userMainAccount, userInfoAccount, type = 'raydium') {
        if (type === 'orca') {
            return this.getOrcaSwapParams(config, userMainAccount, userInfoAccount);
        }
        return this.getRaydiumSwapParams(config, userMainAccount, userInfoAccount);
    }
    getRaydiumSwapParams(config, userMainAccount, userInfoAccount) {
        return [
            {
                direction: 0,
                amountIn: new anchor_1.BN(1),
                minAmountOut: new anchor_1.BN(0)
            },
            {
                accounts: {
                    userMainAccount: userMainAccount,
                    userInfo: userInfoAccount,
                    strategyState: config.strategyAccount,
                    strategyAuthority: config.strategyAuthority,
                    strategyTknAccount0: config.strategyTknAccount0,
                    strategyTknAccount1: config.strategyTknAccount1,
                    strategyLpAccount: config.strategyLpAccount,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    raydiumAmmProgramId: config.raydiumInfo.raydiumProgramId,
                    ammId: config.raydiumInfo.ammId,
                    ammAuthority: config.raydiumInfo.ammAuthority,
                    ammOpenOrders: config.raydiumInfo.ammOpenOrders,
                    ammTargetOrders: config.raydiumInfo.ammTargetOrders,
                    ammTknAccount0: config.raydiumInfo.ammPcAccount,
                    ammTknAccount1: config.raydiumInfo.ammCoinAccount,
                    lpMintAccount: config.lpMint,
                    serumProgramId: config.raydiumInfo.serumProgramId,
                    serumMarketId: config.raydiumInfo.serumMarketId,
                    serumBids: config.raydiumInfo.serumBids,
                    serumAsks: config.raydiumInfo.serumAsks,
                    serumEventQueue: config.raydiumInfo.serumEventQueue,
                    serumTknVault0: config.raydiumInfo.serumPCVault,
                    serumTknVault1: config.raydiumInfo.serumCoinVault,
                    serumVaultSinger: config.raydiumInfo.serumVaultSigner,
                    clock: web3_js_1.SYSVAR_CLOCK_PUBKEY
                }
            }
        ];
    }
    getOrcaSwapParams(config, userMainAccount, userInfoAccount) {
        return [{
                accounts: {
                    userMainAccount: userMainAccount,
                    userInfo: userInfoAccount,
                    strategyState: config.strategyAccount,
                    strategyAuthority: config.strategyAuthority,
                    strategyTknAccount0: config.strategyTknAccount0,
                    strategyTknAccount1: config.strategyTknAccount1,
                    strategyLpTknAccount: config.strategyLpTknAccount,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    ammProgramId: config.ammInfo.swapProgramId,
                    swapPoolId: config.ammInfo.swapPoolId,
                    swapPoolAuthority: config.ammInfo.swapPoolAuthority,
                    swapPoolTknAccount0: config.ammInfo.swapTknVault0,
                    swapPoolTknAccount1: config.ammInfo.swapTknVault1,
                    lpMint: config.ammInfo.lpMint,
                    swapPoolFeeTkn: config.ammInfo.swapFeeAccount
                }
            }];
    }
    getLiquidityParams(config, userMainAccount, userInfoAccount, type = 'raydium') {
        if (type === 'orca') {
            return this.getOrcaLiquidityParams(config, userMainAccount, userInfoAccount);
        }
        return this.getRaydiumLiquidityParams(config, userMainAccount, userInfoAccount);
    }
    getRaydiumLiquidityParams(config, userMainAccount, userInfoAccount) {
        return [
            {
                accounts: {
                    userMainAccount: userMainAccount,
                    userInfo: userInfoAccount,
                    strategyState: config.strategyAccount,
                    strategyAuthority: config.strategyAuthority,
                    strategyTknAccount0: config.strategyTknAccount0,
                    strategyTknAccount1: config.strategyTknAccount1,
                    strategyLpAccount: config.strategyLpAccount,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    raydiumAmmProgramId: config.raydiumInfo.raydiumProgramId,
                    ammId: config.raydiumInfo.ammId,
                    ammAuthority: config.raydiumInfo.ammAuthority,
                    ammOpenOrders: config.raydiumInfo.ammOpenOrders,
                    ammTargetOrders: config.raydiumInfo.ammTargetOrders,
                    ammTknAccount0: config.raydiumInfo.ammPcAccount,
                    ammTknAccount1: config.raydiumInfo.ammCoinAccount,
                    lpMintAccount: config.lpMint,
                    serumMarketId: config.raydiumInfo.serumMarketId,
                    userRewardsTknAccount: config.strategyTknAccount0,
                    strategyRewardsTknAccount: config.strategyTknAccount0,
                    clock: web3_js_1.SYSVAR_CLOCK_PUBKEY
                }
            }
        ];
    }
    getOrcaLiquidityParams(config, userMainAccount, userInfoAccount) {
        return [{
                accounts: {
                    userMainAccount: userMainAccount,
                    userInfo: userInfoAccount,
                    strategyState: config.strategyAccount,
                    strategyAuthority: config.strategyAuthority,
                    strategyTknAccount0: config.strategyTknAccount0,
                    strategyTknAccount1: config.strategyTknAccount1,
                    strategyLpTknAccount: config.strategyLpTknAccount,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    ammProgramId: config.ammInfo.swapProgramId,
                    swapPoolId: config.ammInfo.swapPoolId,
                    swapPoolAuthority: config.ammInfo.swapPoolAuthority,
                    swapPoolTknAccount0: config.ammInfo.swapTknVault0,
                    swapPoolTknAccount1: config.ammInfo.swapTknVault1,
                    lpMint: config.ammInfo.lpMint,
                    userFranciumRewardsTkn: config.strategyTknAccount0,
                    strategyFranciumRewardsTkn: config.strategyTknAccount0,
                    clock: web3_js_1.SYSVAR_CLOCK_PUBKEY
                }
            }];
    }
    getStakeLpParams(config, type = 'raydium') {
        if (type === 'orca') {
            return this.getOrcaStakeLpParams(config);
        }
        return this.getRaydiumStakeLpParams(config);
    }
    getRaydiumStakeLpParams(config) {
        return [
            {
                accounts: {
                    strategyState: config.strategyAccount,
                    strategyAuthority: config.strategyAuthority,
                    strategyLpAccount: config.strategyLpAccount,
                    strategyRewardTknAccount: config.strategRewardAccount,
                    strategyRewardTknAccountB: config.strategRewardAccountB,
                    strategyFarmInfo: config.strategyFarmInfo,
                    raydiumStakingProgramId: config.raydiumInfo.stakePoolProgramId,
                    poolId: config.raydiumInfo.stakePoolId,
                    poolAuthority: config.raydiumInfo.stakePoolAuthority,
                    poolLpAccount: config.raydiumInfo.stakePoolLpAccount,
                    poolRewardTknAccount: config.raydiumInfo.stakePoolRewardAccount,
                    poolRewardTknAccountB: config.raydiumInfo.stakePoolRewardAccountB,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    clock: web3_js_1.SYSVAR_CLOCK_PUBKEY
                }
            }
        ];
    }
    getOrcaStakeLpParams(config) {
        return [{
                accounts: {
                    strategyState: config.strategyAccount,
                    strategyAuthority: config.strategyAuthority,
                    strategyLpTknAccount: config.strategyLpTknAccount,
                    stakeProgramId: config.ammInfo.stakeProgramId,
                    stakePoolLpTknValut: config.ammInfo.stakePoolLpVault,
                    stakeFarmTknMint: config.ammInfo.stakePoolFarmTknMint,
                    strategyFarmTknAccount: config.strategyFarmTknAccount,
                    stakePoolFarmInfo: config.ammInfo.stakePoolFarmInfo,
                    strategyFarmInfo: config.strategyFarmInfo,
                    stakePoolRewardTknVault: config.ammInfo.stakePoolRewardsTknVault,
                    strategyRewardsTknAccount: config.strategyRewardTknAccount,
                    stakePoolAuthority: config.ammInfo.stakePoolAuthority,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    clock: web3_js_1.SYSVAR_CLOCK_PUBKEY
                }
            }];
    }
    getOrcaDoubleDipStakeParams(config) {
        return [{
                accounts: {
                    strategyState: config.strategyAccount,
                    strategyAuthority: config.strategyAuthority,
                    strategyFarmTknAccount: config.strategyFarmTknAccount,
                    stakeProgramId: config.ammInfo.stakeProgramId,
                    doubleDipStakePoolFarmTknValut: config.ammInfo.doubleDipPool.doubleDipStakePoolFarmTknVault,
                    doubleDipStakeFarmTknMint: config.ammInfo.doubleDipPool.doubleDipStakePoolFarmTknMint,
                    doubleDipStrategyFarmTknAccount: config.doubleDipStrategyFarmTknAccount,
                    doubleDipStakePoolFarmInfo: config.ammInfo.doubleDipPool.doubleDipStakePoolFarmInfo,
                    doubleDipStrategyFarmInfo: config.doubleDipStrategyFarmInfo,
                    doubleDipStakePoolRewardTknVault: config.ammInfo.doubleDipPool.doubleDipStakePoolRewardsTknVault,
                    doubleDipStrategyRewardsTknAccount: config.doubleDipStrategyRewardTknAccount,
                    doubleDipStakePoolAuthority: config.ammInfo.doubleDipPool.doubleDipStakePoolAuthority,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    clock: web3_js_1.SYSVAR_CLOCK_PUBKEY
                }
            }];
    }
    getUnstakeLpParams(config, userMainAccount, userInfoAccount, type = 'raydium') {
        if (type === 'orca') {
            return this.getOrcaUnstakeLpParams(config, userMainAccount, userInfoAccount, type);
        }
        return this.getRaydiumUnstakeLpParams(config, userMainAccount, userInfoAccount, type);
    }
    getRaydiumUnstakeLpParams(config, userMainAccount, userInfoAccount, type = 'raydium') {
        return [
            {
                accounts: {
                    userMainAccount: userMainAccount,
                    userInfo: userInfoAccount,
                    strategyState: config.strategyAccount,
                    strategyAuthority: config.strategyAuthority,
                    strategyLpAccount: config.strategyLpAccount,
                    strategyRewardTknAccount: config.strategRewardAccount,
                    strategyRewardTknAccountB: config.strategRewardAccountB,
                    strategyFarmInfo: config.strategyFarmInfo,
                    raydiumStakingProgramId: config.raydiumInfo.stakePoolProgramId,
                    poolId: config.raydiumInfo.stakePoolId,
                    poolAuthority: config.raydiumInfo.stakePoolAuthority,
                    poolLpAccount: config.raydiumInfo.stakePoolLpAccount,
                    poolRewardTknAccount: config.raydiumInfo.stakePoolRewardAccount,
                    poolRewardTknAccountB: config.raydiumInfo.stakePoolRewardAccountB,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    clock: web3_js_1.SYSVAR_CLOCK_PUBKEY,
                    lendingPoolInfoAccount0: config.lendingPoolConfig["0"].lendingPoolInfoAccount,
                    lendingPoolInfoAccount1: config.lendingPoolConfig["1"].lendingPoolInfoAccount,
                    userRewardsTknAccount: config.strategyTknAccount0,
                    strategyRewardsTknAccount: config.strategyTknAccount0
                }
            }
        ];
    }
    getOrcaUnstakeLpParams(config, userMainAccount, userInfoAccount, type = 'raydium') {
        return [{
                accounts: {
                    userMainAccount: userMainAccount,
                    userInfo: userInfoAccount,
                    strategyState: config.strategyAccount,
                    strategyAuthority: config.strategyAuthority,
                    strategyLpTknAccount: config.strategyLpTknAccount,
                    strategyFarmTknAccount: config.strategyFarmTknAccount,
                    strategyRewardsTknAccount: config.strategyRewardTknAccount,
                    strategyFarmInfo: config.strategyFarmInfo,
                    stakeProgramId: config.ammInfo.stakeProgramId,
                    stakePoolLpTkn: config.ammInfo.stakePoolLpVault,
                    stakeFarmTknMint: config.ammInfo.stakePoolFarmTknMint,
                    stakePoolFarmInfo: config.ammInfo.stakePoolFarmInfo,
                    stakePoolRewardTknVault: config.ammInfo.stakePoolRewardsTknVault,
                    stakePoolAuthority: config.ammInfo.stakePoolAuthority,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    clock: web3_js_1.SYSVAR_CLOCK_PUBKEY,
                    lendingPoolInfoAccount0: config.lendingPoolConfig["0"].lendingPoolInfoAccount,
                    lendingPoolInfoAccount1: config.lendingPoolConfig["1"].lendingPoolInfoAccount,
                    userFranciumRewardsTknAccount: config.strategyLpTknAccount,
                    strategyFranciumRewardsTknAccount: config.strategyLpTknAccount
                }
            }];
    }
    getOrcaDoubleDipUnstakeParams(config) {
        return [{
                accounts: {
                    strategyState: config.strategyAccount,
                    strategyAuthority: config.strategyAuthority,
                    strategyFarmTknAccount: config.strategyFarmTknAccount,
                    stakeProgramId: config.ammInfo.stakeProgramId,
                    doubleDipStakePoolFarmTknValut: config.ammInfo.doubleDipPool.doubleDipStakePoolFarmTknVault,
                    doubleDipStakeFarmTknMint: config.ammInfo.doubleDipPool.doubleDipStakePoolFarmTknMint,
                    doubleDipStrategyFarmTknAccount: config.doubleDipStrategyFarmTknAccount,
                    doubleDipStakePoolFarmInfo: config.ammInfo.doubleDipPool.doubleDipStakePoolFarmInfo,
                    doubleDipStrategyFarmInfo: config.doubleDipStrategyFarmInfo,
                    doubleDipStakePoolRewardTknVault: config.ammInfo.doubleDipPool.doubleDipStakePoolRewardsTknVault,
                    doubleDipStrategyRewardsTknAccount: config.doubleDipStrategyRewardTknAccount,
                    doubleDipStakePoolAuthority: config.ammInfo.doubleDipPool.doubleDipStakePoolAuthority,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    clock: web3_js_1.SYSVAR_CLOCK_PUBKEY
                }
            }];
    }
    getRemoveLiquidityParams(config, userMainAccount, userInfoAccount, type = 'raydium') {
        if (type === 'orca') {
            return this.getOrcaRemoveLiquidityParams(config, userMainAccount, userInfoAccount, type);
        }
        return this.getRaydiumRemoveLiquidityParams(config, userMainAccount, userInfoAccount, type);
    }
    getRaydiumRemoveLiquidityParams(config, userMainAccount, userInfoAccount, type = 'raydium') {
        return [
            {
                accounts: {
                    userMainAccount: userMainAccount,
                    userInfo: userInfoAccount,
                    strategyState: config.strategyAccount,
                    strategyAuthority: config.strategyAuthority,
                    strategyTknAccount0: config.strategyTknAccount0,
                    strategyTknAccount1: config.strategyTknAccount1,
                    strategyLpAccount: config.strategyLpAccount,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    raydiumAmmProgramId: config.raydiumInfo.raydiumProgramId,
                    ammId: config.raydiumInfo.ammId,
                    ammAuthority: config.raydiumInfo.ammAuthority,
                    ammOpenOrders: config.raydiumInfo.ammOpenOrders,
                    ammTargetOrders: config.raydiumInfo.ammTargetOrders,
                    ammTknAccount0: config.raydiumInfo.ammPcAccount,
                    ammTknAccount1: config.raydiumInfo.ammCoinAccount,
                    lpMintAccount: config.lpMint,
                    ammWithdrawQueue: config.raydiumInfo.poolWithdrawQueue,
                    ammPoolTempLpAccount: config.raydiumInfo.poolTempLpTokenAccount,
                    serumProgramId: config.raydiumInfo.serumProgramId,
                    serumMarketId: config.raydiumInfo.serumMarketId,
                    serumTknVault1: config.raydiumInfo.serumCoinVault,
                    serumTknVault0: config.raydiumInfo.serumPCVault,
                    serumVaultSinger: config.raydiumInfo.serumVaultSigner
                },
                remainingAccounts: [
                    { pubkey: config.raydiumInfo.serumEventQueue, isSigner: false, isWritable: true },
                    { pubkey: config.raydiumInfo.serumBids, isSigner: false, isWritable: true },
                    { pubkey: config.raydiumInfo.serumAsks, isSigner: false, isWritable: true },
                ]
            }
        ];
    }
    getOrcaRemoveLiquidityParams(config, userMainAccount, userInfoAccount, type = 'raydium') {
        return [{
                accounts: {
                    userMainAccount: userMainAccount,
                    userInfo: userInfoAccount,
                    strategyState: config.strategyAccount,
                    strategyAuthority: config.strategyAuthority,
                    strategyTknAccount0: config.strategyTknAccount0,
                    strategyTknAccount1: config.strategyTknAccount1,
                    strategyLpTknAccount: config.strategyLpTknAccount,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    ammProgramId: config.ammInfo.swapProgramId,
                    swapPoolId: config.ammInfo.swapPoolId,
                    swapPoolAuthority: config.ammInfo.swapPoolAuthority,
                    swapPoolTkn0: config.ammInfo.swapTknVault0,
                    swapPoolTkn1: config.ammInfo.swapTknVault1,
                    swapPoolFeeTkn: config.ammInfo.swapFeeAccount,
                    lpMint: config.ammInfo.lpMint
                }
            }];
    }
    getSwapAndWithdrawParams(config, userMainAccount, userInfoAccount, userTokenAccount0, userTokenAccount1, type = 'raydium') {
        if (type === 'orca') {
            return this.getOrcaSwapAndWithdrawParams(config, userMainAccount, userInfoAccount, userTokenAccount0, userTokenAccount1);
        }
        return this.getRaydiumSwapAndWithdrawParams(config, userMainAccount, userInfoAccount, userTokenAccount0, userTokenAccount1);
    }
    getRaydiumSwapAndWithdrawParams(config, userMainAccount, userInfoAccount, userTokenAccount0, userTokenAccount1, type = 'raydium') {
        return [
            {
                accounts: {
                    userMainAccount: userMainAccount,
                    userInfo: userInfoAccount,
                    userTknAccount0: userTokenAccount0,
                    userTknAccount1: userTokenAccount1,
                    strategyState: config.strategyAccount,
                    strategyAuthority: config.strategyAuthority,
                    strategyTknAccount0: config.strategyTknAccount0,
                    strategyTknAccount1: config.strategyTknAccount1,
                    strategyLpAccount: config.strategyLpAccount,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    raydiumAmmProgramId: config.raydiumInfo.raydiumProgramId,
                    ammId: config.raydiumInfo.ammId,
                    ammAuthority: config.raydiumInfo.ammAuthority,
                    ammOpenOrders: config.raydiumInfo.ammOpenOrders,
                    ammTargetOrders: config.raydiumInfo.ammTargetOrders,
                    ammTknAccount1: config.raydiumInfo.ammCoinAccount,
                    ammTknAccount0: config.raydiumInfo.ammPcAccount,
                    lpMintAccount: config.lpMint,
                    serumProgramId: config.raydiumInfo.serumProgramId,
                    serumMarketId: config.raydiumInfo.serumMarketId,
                    serumBids: config.raydiumInfo.serumBids,
                    serumAsks: config.raydiumInfo.serumAsks,
                    serumEventQueue: config.raydiumInfo.serumEventQueue,
                    serumTknVault1: config.raydiumInfo.serumCoinVault,
                    serumTknVault0: config.raydiumInfo.serumPCVault,
                    serumVaultSinger: config.raydiumInfo.serumVaultSigner
                }
            }
        ];
    }
    getOrcaSwapAndWithdrawParams(config, userMainAccount, userInfoAccount, userTokenAccount0, userTokenAccount1, type = 'raydium') {
        return [{
                accounts: {
                    userMainAccount: userMainAccount,
                    userInfo: userInfoAccount,
                    userTknAccount0: userTokenAccount0,
                    userTknAccount1: userTokenAccount1,
                    strategyState: config.strategyAccount,
                    strategyAuthority: config.strategyAuthority,
                    strategyTknAccount0: config.strategyTknAccount0,
                    strategyTknAccount1: config.strategyTknAccount1,
                    strategyLpTknAccount: config.strategyLpTknAccount,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    ammProgramId: config.ammInfo.swapProgramId,
                    swapPoolId: config.ammInfo.swapPoolId,
                    swapPoolAuthority: config.ammInfo.swapPoolAuthority,
                    swapPoolTkn0: config.ammInfo.swapTknVault0,
                    swapPoolTkn1: config.ammInfo.swapTknVault1,
                    swapPoolFeeTkn: config.ammInfo.swapFeeAccount,
                    lpMint: config.ammInfo.lpMint
                }
            }];
    }
    getRepayParams(config, userMainAccount, type = 'raydium') {
        if (type === 'orca') {
            return this.getOrcaRepayParams(config, userMainAccount);
        }
        return this.getRaydiumRepayParams(config, userMainAccount);
    }
    getRaydiumRepayParams(config, userMainAccount) {
        return [
            {
                accounts: {
                    userMainAccount: userMainAccount,
                    strategyState: config.strategyAccount,
                    strategyAuthority: config.strategyAuthority,
                    strategyTknAccount0: config.strategyTknAccount0,
                    strategyTknAccount1: config.strategyTknAccount1,
                    lendingMarketAccount: config.lendingPoolConfig.marketInfoAccount,
                    lendingMarketAuthorityInfo: config.lendingPoolConfig.marketAuthority,
                    lendingPoolProgramId: config.lendingPoolConfig.programId,
                    lendingPoolInfoAccount0: config.lendingPoolConfig["0"].lendingPoolInfoAccount,
                    lendingPoolTknAccount0: config.lendingPoolConfig["0"].lendingPoolTknAccount,
                    lendingPoolCreditMint0: config.lendingPoolConfig["0"].lendingPoolCreditMint,
                    lendingPoolCreditAccount0: config.lendingPoolConfig["0"].lendingPoolCreditAccount,
                    strategyCreditAccount0: config.strategyBorrowCreditAccount0,
                    lendingPoolInfoAccount1: config.lendingPoolConfig["1"].lendingPoolInfoAccount,
                    lendingPoolTknAccount1: config.lendingPoolConfig["1"].lendingPoolTknAccount,
                    lendingPoolCreditMint1: config.lendingPoolConfig["1"].lendingPoolCreditMint,
                    lendingPoolCreditAccount1: config.lendingPoolConfig["1"].lendingPoolCreditAccount,
                    strategyCreditAccount1: config.strategyBorrowCreditAccount1,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    clock: web3_js_1.SYSVAR_CLOCK_PUBKEY
                }
            }
        ];
    }
    getOrcaRepayParams(config, userMainAccount) {
        return [{
                accounts: {
                    userMainAccount: userMainAccount,
                    strategyState: config.strategyAccount,
                    strategyAuthority: config.strategyAuthority,
                    strategyTknAccount0: config.strategyTknAccount0,
                    strategyTknAccount1: config.strategyTknAccount1,
                    lendingMarketAccount: config.lendingPoolConfig.marketInfoAccount,
                    lendingMarketAuthorityInfo: config.lendingPoolConfig.marketAuthority,
                    lendingPoolProgramId: config.lendingPoolConfig.programId,
                    lendingPoolInfoAccount0: config.lendingPoolConfig["0"].lendingPoolInfoAccount,
                    lendingPoolTknAccount0: config.lendingPoolConfig["0"].lendingPoolTknAccount,
                    lendingPoolCreditMint0: config.lendingPoolConfig["0"].lendingPoolCreditMint,
                    lendingPoolCreditAccount0: config.lendingPoolConfig["0"].lendingPoolCreditAccount,
                    strategyCreditAccount0: config.strategyBorrowCreditAccount0,
                    lendingPoolInfoAccount1: config.lendingPoolConfig["1"].lendingPoolInfoAccount,
                    lendingPoolTknAccount1: config.lendingPoolConfig["1"].lendingPoolTknAccount,
                    lendingPoolCreditMint1: config.lendingPoolConfig["1"].lendingPoolCreditMint,
                    lendingPoolCreditAccount1: config.lendingPoolConfig["1"].lendingPoolCreditAccount,
                    strategyCreditAccount1: config.strategyBorrowCreditAccount1,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    clock: web3_js_1.SYSVAR_CLOCK_PUBKEY
                }
            }];
    }
}
exports.FranciumFarm = FranciumFarm;
