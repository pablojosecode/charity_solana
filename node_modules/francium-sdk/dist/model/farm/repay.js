"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildRepayTransactions = void 0;
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const tools_1 = require("../../utils/tools");
const token_1 = require("../../utils/trx/token");
function buildRepayTransactions(connection, pair, lyfType, userPublicKey, farm, configs) {
    var _a, _b, _c, _d;
    return __awaiter(this, void 0, void 0, function* () {
        const trx = new web3_js_1.Transaction();
        const targetFarmInfo = farm.getConfig(pair, lyfType);
        const program = farm.getProgram(lyfType);
        const parsedTokenAccounts = yield (0, token_1.getParsedTokenAccounts)(connection, userPublicKey);
        let userTknAccount0 = (_a = parsedTokenAccounts[targetFarmInfo.tknMint0]) === null || _a === void 0 ? void 0 : _a.tokenAccountAddress;
        let userTknAccount1 = (_b = parsedTokenAccounts[targetFarmInfo.tknMint1]) === null || _b === void 0 ? void 0 : _b.tokenAccountAddress;
        if ((0, tools_1.isNativeMint)(targetFarmInfo.tknMint0)) {
            userTknAccount0 = (_c = parsedTokenAccounts[spl_token_1.NATIVE_MINT.toBase58()]) === null || _c === void 0 ? void 0 : _c.tokenAccountAddress;
        }
        else if ((0, tools_1.isNativeMint)(targetFarmInfo.tknMint1)) {
            userTknAccount1 = (_d = parsedTokenAccounts[spl_token_1.NATIVE_MINT.toBase58()]) === null || _d === void 0 ? void 0 : _d.tokenAccountAddress;
        }
        else {
        }
        if (!userTknAccount0) {
            userTknAccount0 = (yield (0, token_1.createAssociatedTokenAccount)(targetFarmInfo.tknMint0, userPublicKey, trx)).toBase58();
        }
        if (!userTknAccount1) {
            userTknAccount1 = (yield (0, token_1.createAssociatedTokenAccount)(targetFarmInfo.tknMint1, userPublicKey, trx)).toBase58();
        }
        const ix_lending_update_0 = new web3_js_1.TransactionInstruction({
            keys: [
                {
                    pubkey: targetFarmInfo.lendingPoolConfig.marketInfoAccount,
                    isWritable: true,
                    isSigner: false
                },
                {
                    pubkey: targetFarmInfo.lendingPoolConfig["0"].lendingPoolInfoAccount,
                    isWritable: true,
                    isSigner: false
                },
                {
                    pubkey: web3_js_1.SYSVAR_CLOCK_PUBKEY,
                    isWritable: false,
                    isSigner: false
                },
            ],
            programId: targetFarmInfo.lendingPoolConfig.programId,
            data: Buffer.alloc(1, 12),
        });
        const ix_lending_update_1 = new web3_js_1.TransactionInstruction({
            keys: [
                {
                    pubkey: targetFarmInfo.lendingPoolConfig.marketInfoAccount,
                    isWritable: true,
                    isSigner: false
                },
                {
                    pubkey: targetFarmInfo.lendingPoolConfig["1"].lendingPoolInfoAccount,
                    isWritable: true,
                    isSigner: false
                },
                {
                    pubkey: web3_js_1.SYSVAR_CLOCK_PUBKEY,
                    isWritable: false,
                    isSigner: false
                },
            ],
            programId: targetFarmInfo.lendingPoolConfig.programId,
            data: Buffer.alloc(1, 12),
        });
        trx.add(ix_lending_update_0, ix_lending_update_1);
        if (configs.amount0.gtn(0)) {
            if ((0, tools_1.isNativeMint)(targetFarmInfo.tknMint0)) {
                const instructions = (0, tools_1.transferToWSOL)(configs.amount0, new web3_js_1.PublicKey(userTknAccount0), userPublicKey);
                trx.add(...instructions);
            }
            const ix_user_repay0 = yield program.instruction.userRepay({
                repaySide: 0,
                repayAmount: configs.amount0
            }, {
                accounts: {
                    userMainAccount: userPublicKey,
                    userInfoAccount: configs.currentUserInfoAccount,
                    userTknAccount0: userTknAccount0,
                    userTknAccount1: userTknAccount1,
                    strategyState: targetFarmInfo.strategyAccount,
                    strategyTknAccount0: targetFarmInfo.strategyTknAccount0,
                    strategyTknAccount1: targetFarmInfo.strategyTknAccount1,
                    lendingPoolInfoAccount0: targetFarmInfo.lendingPoolConfig["0"].lendingPoolInfoAccount,
                    lendingPoolInfoAccount1: targetFarmInfo.lendingPoolConfig["1"].lendingPoolInfoAccount,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID
                }
            });
            trx.add(ix_user_repay0);
        }
        if (configs.amount1.gtn(0)) {
            if ((0, tools_1.isNativeMint)(targetFarmInfo.tknMint1)) {
                const instructions = (0, tools_1.transferToWSOL)(configs.amount1, new web3_js_1.PublicKey(userTknAccount1), userPublicKey);
                trx.add(...instructions);
            }
            const ix_user_repay1 = yield program.instruction.userRepay({
                repaySide: 1,
                repayAmount: configs.amount1
            }, {
                accounts: {
                    userMainAccount: userPublicKey,
                    userInfoAccount: configs.currentUserInfoAccount,
                    userTknAccount0: userTknAccount0,
                    userTknAccount1: userTknAccount1,
                    strategyState: targetFarmInfo.strategyAccount,
                    strategyTknAccount0: targetFarmInfo.strategyTknAccount0,
                    strategyTknAccount1: targetFarmInfo.strategyTknAccount1,
                    lendingPoolInfoAccount0: targetFarmInfo.lendingPoolConfig["0"].lendingPoolInfoAccount,
                    lendingPoolInfoAccount1: targetFarmInfo.lendingPoolConfig["1"].lendingPoolInfoAccount,
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID
                }
            });
            trx.add(ix_user_repay1);
        }
        const ix_repay_borrowed_coin = program.instruction.repayBorrowedCoin({
            accounts: {
                userMainAccount: userPublicKey,
                strategyState: targetFarmInfo.strategyAccount,
                strategyAuthority: targetFarmInfo.strategyAuthority,
                strategyTknAccount0: targetFarmInfo.strategyTknAccount0,
                strategyTknAccount1: targetFarmInfo.strategyTknAccount1,
                lendingMarketAccount: targetFarmInfo.lendingPoolConfig.marketInfoAccount,
                lendingMarketAuthorityInfo: targetFarmInfo.lendingPoolConfig.marketAuthority,
                lendingPoolProgramId: targetFarmInfo.lendingPoolConfig.programId,
                lendingPoolInfoAccount0: targetFarmInfo.lendingPoolConfig["0"].lendingPoolInfoAccount,
                lendingPoolTknAccount0: targetFarmInfo.lendingPoolConfig["0"].lendingPoolTknAccount,
                lendingPoolCreditMint0: targetFarmInfo.lendingPoolConfig["0"].lendingPoolCreditMint,
                lendingPoolCreditAccount0: targetFarmInfo.lendingPoolConfig["0"].lendingPoolCreditAccount,
                strategyCreditAccount0: targetFarmInfo.strategyBorrowCreditAccount0,
                lendingPoolInfoAccount1: targetFarmInfo.lendingPoolConfig["1"].lendingPoolInfoAccount,
                lendingPoolTknAccount1: targetFarmInfo.lendingPoolConfig["1"].lendingPoolTknAccount,
                lendingPoolCreditMint1: targetFarmInfo.lendingPoolConfig["1"].lendingPoolCreditMint,
                lendingPoolCreditAccount1: targetFarmInfo.lendingPoolConfig["1"].lendingPoolCreditAccount,
                strategyCreditAccount1: targetFarmInfo.strategyBorrowCreditAccount1,
                tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                clock: web3_js_1.SYSVAR_CLOCK_PUBKEY,
            }
        });
        const ix_repay_borrowed_pc = program.instruction.repayBorrowedPc({
            accounts: {
                userMainAccount: userPublicKey,
                strategyState: targetFarmInfo.strategyAccount,
                strategyAuthority: targetFarmInfo.strategyAuthority,
                strategyTknAccount0: targetFarmInfo.strategyTknAccount0,
                strategyTknAccount1: targetFarmInfo.strategyTknAccount1,
                lendingMarketAccount: targetFarmInfo.lendingPoolConfig.marketInfoAccount,
                lendingMarketAuthorityInfo: targetFarmInfo.lendingPoolConfig.marketAuthority,
                lendingPoolProgramId: targetFarmInfo.lendingPoolConfig.programId,
                lendingPoolInfoAccount0: targetFarmInfo.lendingPoolConfig["0"].lendingPoolInfoAccount,
                lendingPoolTknAccount0: targetFarmInfo.lendingPoolConfig["0"].lendingPoolTknAccount,
                lendingPoolCreditMint0: targetFarmInfo.lendingPoolConfig["0"].lendingPoolCreditMint,
                lendingPoolCreditAccount0: targetFarmInfo.lendingPoolConfig["0"].lendingPoolCreditAccount,
                strategyCreditAccount0: targetFarmInfo.strategyBorrowCreditAccount0,
                lendingPoolInfoAccount1: targetFarmInfo.lendingPoolConfig["1"].lendingPoolInfoAccount,
                lendingPoolTknAccount1: targetFarmInfo.lendingPoolConfig["1"].lendingPoolTknAccount,
                lendingPoolCreditMint1: targetFarmInfo.lendingPoolConfig["1"].lendingPoolCreditMint,
                lendingPoolCreditAccount1: targetFarmInfo.lendingPoolConfig["1"].lendingPoolCreditAccount,
                strategyCreditAccount1: targetFarmInfo.strategyBorrowCreditAccount1,
                tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                clock: web3_js_1.SYSVAR_CLOCK_PUBKEY,
            }
        });
        trx.add(ix_repay_borrowed_coin, ix_repay_borrowed_pc);
        return trx;
    });
}
exports.buildRepayTransactions = buildRepayTransactions;
