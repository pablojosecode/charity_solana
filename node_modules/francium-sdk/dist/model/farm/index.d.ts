import { Program, web3 } from '@project-serum/anchor';
import { PublicKey, Connection } from '@solana/web3.js';
export declare class FranciumFarm {
    configs: {};
    programs: {};
    connection: Connection;
    constructor(config: {
        connection: Connection;
    });
    getFarmPoolsInfo(pools: any[]): Promise<any[]>;
    getProgram(type?: string): Program;
    getConfig(pair: string, type?: string): any;
    getSwapPoolId(pair: string, type?: string): any;
    getUserPositionsAll(userPublicKey: PublicKey | string): Promise<{
        orca: {
            publicKey: web3.PublicKey;
            data: any;
        }[];
        raydium: {
            publicKey: web3.PublicKey;
            data: any;
        }[];
    }>;
    getUserPositionsByProgram(programType: string, userPublicKey: PublicKey): Promise<{
        publicKey: PublicKey;
        data: any;
    }[]>;
    getUserPositions(pools: any[], userPublicKey: PublicKey): Promise<any[]>;
    getBorrowParams(config: any, userMainAccount: PublicKey, userInfoAccount: PublicKey, type?: string): {
        accounts: {
            userMainAccount: web3.PublicKey;
            userInfoAccount: web3.PublicKey;
            strategyState: any;
            strategyAuthority: any;
            strategyTknAccount0: any;
            strategyTknAccount1: any;
            lendingMarketAccount: any;
            lendingMarketAuthorityInfo: any;
            lendingPoolProgramId: any;
            lendingPoolInfoAccount0: any;
            lendingPoolTknAccount0: any;
            lendingPoolCreditAccount0: any;
            strategyCreditAccount0: any;
            lendingPoolInfoAccount1: any;
            lendingPoolTknAccount1: any;
            lendingPoolCreditAccount1: any;
            strategyCreditAccount1: any;
            tokenProgramId: web3.PublicKey;
            clock: web3.PublicKey;
            swapPoolId: any;
            swapPoolTknAccount0: any;
            swapPoolTknAccount1: any;
            lpMint: any;
        };
    }[] | {
        accounts: {
            userMainAccount: web3.PublicKey;
            userInfoAccount: web3.PublicKey;
            strategyState: any;
            strategyAuthority: any;
            strategyTknAccount0: any;
            strategyTknAccount1: any;
            lendingMarketAccount: any;
            lendingMarketAuthorityInfo: any;
            lendingPoolProgramId: any;
            lendingPoolInfoAccount0: any;
            lendingPoolTknAccount0: any;
            lendingPoolCreditAccount0: any;
            strategyCreditAccount0: any;
            lendingPoolInfoAccount1: any;
            lendingPoolTknAccount1: any;
            lendingPoolCreditAccount1: any;
            strategyCreditAccount1: any;
            tokenProgramId: web3.PublicKey;
            clock: web3.PublicKey;
            ammId: any;
            ammOpenOrders: any;
            ammTknAccount0: any;
            ammTknAccount1: any;
            lpMintAccount: any;
        };
    }[];
    private getRaydiumBorrowParams;
    private getOrcaBorrowParams;
    getSwapParams(config: any, userMainAccount: PublicKey, userInfoAccount: PublicKey, type?: string): {
        accounts: {
            userMainAccount: web3.PublicKey;
            userInfo: web3.PublicKey;
            strategyState: any;
            strategyAuthority: any;
            strategyTknAccount0: any;
            strategyTknAccount1: any;
            strategyLpTknAccount: any;
            tokenProgramId: web3.PublicKey;
            ammProgramId: any;
            swapPoolId: any;
            swapPoolAuthority: any;
            swapPoolTknAccount0: any;
            swapPoolTknAccount1: any;
            lpMint: any;
            swapPoolFeeTkn: any;
        };
    }[] | ({
        direction: number;
        amountIn: any;
        minAmountOut: any;
        accounts?: undefined;
    } | {
        accounts: {
            userMainAccount: web3.PublicKey;
            userInfo: web3.PublicKey;
            strategyState: any;
            strategyAuthority: any;
            strategyTknAccount0: any;
            strategyTknAccount1: any;
            strategyLpAccount: any;
            tokenProgramId: web3.PublicKey;
            raydiumAmmProgramId: any;
            ammId: any;
            ammAuthority: any;
            ammOpenOrders: any;
            ammTargetOrders: any;
            ammTknAccount0: any;
            ammTknAccount1: any;
            lpMintAccount: any;
            serumProgramId: any;
            serumMarketId: any;
            serumBids: any;
            serumAsks: any;
            serumEventQueue: any;
            serumTknVault0: any;
            serumTknVault1: any;
            serumVaultSinger: any;
            clock: web3.PublicKey;
        };
        direction?: undefined;
        amountIn?: undefined;
        minAmountOut?: undefined;
    })[];
    private getRaydiumSwapParams;
    private getOrcaSwapParams;
    getLiquidityParams(config: any, userMainAccount: PublicKey, userInfoAccount: PublicKey, type?: string): {
        accounts: {
            userMainAccount: web3.PublicKey;
            userInfo: web3.PublicKey;
            strategyState: any;
            strategyAuthority: any;
            strategyTknAccount0: any;
            strategyTknAccount1: any;
            strategyLpTknAccount: any;
            tokenProgramId: web3.PublicKey;
            ammProgramId: any;
            swapPoolId: any;
            swapPoolAuthority: any;
            swapPoolTknAccount0: any;
            swapPoolTknAccount1: any;
            lpMint: any;
            userFranciumRewardsTkn: any;
            strategyFranciumRewardsTkn: any;
            clock: web3.PublicKey;
        };
    }[] | {
        accounts: {
            userMainAccount: web3.PublicKey;
            userInfo: web3.PublicKey;
            strategyState: any;
            strategyAuthority: any;
            strategyTknAccount0: any;
            strategyTknAccount1: any;
            strategyLpAccount: any;
            tokenProgramId: web3.PublicKey;
            raydiumAmmProgramId: any;
            ammId: any;
            ammAuthority: any;
            ammOpenOrders: any;
            ammTargetOrders: any;
            ammTknAccount0: any;
            ammTknAccount1: any;
            lpMintAccount: any;
            serumMarketId: any;
            userRewardsTknAccount: any;
            strategyRewardsTknAccount: any;
            clock: web3.PublicKey;
        };
    }[];
    private getRaydiumLiquidityParams;
    private getOrcaLiquidityParams;
    getStakeLpParams(config: any, type?: string): {
        accounts: {
            strategyState: any;
            strategyAuthority: any;
            strategyLpTknAccount: any;
            stakeProgramId: any;
            stakePoolLpTknValut: any;
            stakeFarmTknMint: any;
            strategyFarmTknAccount: any;
            stakePoolFarmInfo: any;
            strategyFarmInfo: any;
            stakePoolRewardTknVault: any;
            strategyRewardsTknAccount: any;
            stakePoolAuthority: any;
            tokenProgramId: web3.PublicKey;
            clock: web3.PublicKey;
        };
    }[] | {
        accounts: {
            strategyState: any;
            strategyAuthority: any;
            strategyLpAccount: any;
            strategyRewardTknAccount: any;
            strategyRewardTknAccountB: any;
            strategyFarmInfo: any;
            raydiumStakingProgramId: any;
            poolId: any;
            poolAuthority: any;
            poolLpAccount: any;
            poolRewardTknAccount: any;
            poolRewardTknAccountB: any;
            tokenProgramId: web3.PublicKey;
            clock: web3.PublicKey;
        };
    }[];
    private getRaydiumStakeLpParams;
    private getOrcaStakeLpParams;
    getOrcaDoubleDipStakeParams(config: any): {
        accounts: {
            strategyState: any;
            strategyAuthority: any;
            strategyFarmTknAccount: any;
            stakeProgramId: any;
            doubleDipStakePoolFarmTknValut: any;
            doubleDipStakeFarmTknMint: any;
            doubleDipStrategyFarmTknAccount: any;
            doubleDipStakePoolFarmInfo: any;
            doubleDipStrategyFarmInfo: any;
            doubleDipStakePoolRewardTknVault: any;
            doubleDipStrategyRewardsTknAccount: any;
            doubleDipStakePoolAuthority: any;
            tokenProgramId: web3.PublicKey;
            clock: web3.PublicKey;
        };
    }[];
    getUnstakeLpParams(config: any, userMainAccount: PublicKey, userInfoAccount: PublicKey, type?: string): {
        accounts: {
            userMainAccount: web3.PublicKey;
            userInfo: web3.PublicKey;
            strategyState: any;
            strategyAuthority: any;
            strategyLpTknAccount: any;
            strategyFarmTknAccount: any;
            strategyRewardsTknAccount: any;
            strategyFarmInfo: any;
            stakeProgramId: any;
            stakePoolLpTkn: any;
            stakeFarmTknMint: any;
            stakePoolFarmInfo: any;
            stakePoolRewardTknVault: any;
            stakePoolAuthority: any;
            tokenProgramId: web3.PublicKey;
            clock: web3.PublicKey;
            lendingPoolInfoAccount0: any;
            lendingPoolInfoAccount1: any;
            userFranciumRewardsTknAccount: any;
            strategyFranciumRewardsTknAccount: any;
        };
    }[] | {
        accounts: {
            userMainAccount: web3.PublicKey;
            userInfo: web3.PublicKey;
            strategyState: any;
            strategyAuthority: any;
            strategyLpAccount: any;
            strategyRewardTknAccount: any;
            strategyRewardTknAccountB: any;
            strategyFarmInfo: any;
            raydiumStakingProgramId: any;
            poolId: any;
            poolAuthority: any;
            poolLpAccount: any;
            poolRewardTknAccount: any;
            poolRewardTknAccountB: any;
            tokenProgramId: web3.PublicKey;
            clock: web3.PublicKey;
            lendingPoolInfoAccount0: any;
            lendingPoolInfoAccount1: any;
            userRewardsTknAccount: any;
            strategyRewardsTknAccount: any;
        };
    }[];
    private getRaydiumUnstakeLpParams;
    private getOrcaUnstakeLpParams;
    getOrcaDoubleDipUnstakeParams(config: any): {
        accounts: {
            strategyState: any;
            strategyAuthority: any;
            strategyFarmTknAccount: any;
            stakeProgramId: any;
            doubleDipStakePoolFarmTknValut: any;
            doubleDipStakeFarmTknMint: any;
            doubleDipStrategyFarmTknAccount: any;
            doubleDipStakePoolFarmInfo: any;
            doubleDipStrategyFarmInfo: any;
            doubleDipStakePoolRewardTknVault: any;
            doubleDipStrategyRewardsTknAccount: any;
            doubleDipStakePoolAuthority: any;
            tokenProgramId: web3.PublicKey;
            clock: web3.PublicKey;
        };
    }[];
    getRemoveLiquidityParams(config: any, userMainAccount: PublicKey, userInfoAccount: PublicKey, type?: string): {
        accounts: {
            userMainAccount: web3.PublicKey;
            userInfo: web3.PublicKey;
            strategyState: any;
            strategyAuthority: any;
            strategyTknAccount0: any;
            strategyTknAccount1: any;
            strategyLpTknAccount: any;
            tokenProgramId: web3.PublicKey;
            ammProgramId: any;
            swapPoolId: any;
            swapPoolAuthority: any;
            swapPoolTkn0: any;
            swapPoolTkn1: any;
            swapPoolFeeTkn: any;
            lpMint: any;
        };
    }[] | {
        accounts: {
            userMainAccount: web3.PublicKey;
            userInfo: web3.PublicKey;
            strategyState: any;
            strategyAuthority: any;
            strategyTknAccount0: any;
            strategyTknAccount1: any;
            strategyLpAccount: any;
            tokenProgramId: web3.PublicKey;
            raydiumAmmProgramId: any;
            ammId: any;
            ammAuthority: any;
            ammOpenOrders: any;
            ammTargetOrders: any;
            ammTknAccount0: any;
            ammTknAccount1: any;
            lpMintAccount: any;
            ammWithdrawQueue: any;
            ammPoolTempLpAccount: any;
            serumProgramId: any;
            serumMarketId: any;
            serumTknVault1: any;
            serumTknVault0: any;
            serumVaultSinger: any;
        };
        remainingAccounts: {
            pubkey: any;
            isSigner: boolean;
            isWritable: boolean;
        }[];
    }[];
    private getRaydiumRemoveLiquidityParams;
    private getOrcaRemoveLiquidityParams;
    getSwapAndWithdrawParams(config: any, userMainAccount: PublicKey, userInfoAccount: PublicKey, userTokenAccount0: PublicKey, userTokenAccount1: PublicKey, type?: string): {
        accounts: {
            userMainAccount: web3.PublicKey;
            userInfo: web3.PublicKey;
            userTknAccount0: web3.PublicKey;
            userTknAccount1: web3.PublicKey;
            strategyState: any;
            strategyAuthority: any;
            strategyTknAccount0: any;
            strategyTknAccount1: any;
            strategyLpTknAccount: any;
            tokenProgramId: web3.PublicKey;
            ammProgramId: any;
            swapPoolId: any;
            swapPoolAuthority: any;
            swapPoolTkn0: any;
            swapPoolTkn1: any;
            swapPoolFeeTkn: any;
            lpMint: any;
        };
    }[] | {
        accounts: {
            userMainAccount: web3.PublicKey;
            userInfo: web3.PublicKey;
            userTknAccount0: web3.PublicKey;
            userTknAccount1: web3.PublicKey;
            strategyState: any;
            strategyAuthority: any;
            strategyTknAccount0: any;
            strategyTknAccount1: any;
            strategyLpAccount: any;
            tokenProgramId: web3.PublicKey;
            raydiumAmmProgramId: any;
            ammId: any;
            ammAuthority: any;
            ammOpenOrders: any;
            ammTargetOrders: any;
            ammTknAccount1: any;
            ammTknAccount0: any;
            lpMintAccount: any;
            serumProgramId: any;
            serumMarketId: any;
            serumBids: any;
            serumAsks: any;
            serumEventQueue: any;
            serumTknVault1: any;
            serumTknVault0: any;
            serumVaultSinger: any;
        };
    }[];
    private getRaydiumSwapAndWithdrawParams;
    private getOrcaSwapAndWithdrawParams;
    getRepayParams(config: any, userMainAccount: PublicKey, type?: string): {
        accounts: {
            userMainAccount: web3.PublicKey;
            strategyState: any;
            strategyAuthority: any;
            strategyTknAccount0: any;
            strategyTknAccount1: any;
            lendingMarketAccount: any;
            lendingMarketAuthorityInfo: any;
            lendingPoolProgramId: any;
            lendingPoolInfoAccount0: any;
            lendingPoolTknAccount0: any;
            lendingPoolCreditMint0: any;
            lendingPoolCreditAccount0: any;
            strategyCreditAccount0: any;
            lendingPoolInfoAccount1: any;
            lendingPoolTknAccount1: any;
            lendingPoolCreditMint1: any;
            lendingPoolCreditAccount1: any;
            strategyCreditAccount1: any;
            tokenProgramId: web3.PublicKey;
            clock: web3.PublicKey;
        };
    }[];
    private getRaydiumRepayParams;
    private getOrcaRepayParams;
}
