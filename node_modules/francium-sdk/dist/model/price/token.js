"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTokenPrice = void 0;
const axios_1 = require("axios");
const lodash_1 = require("lodash");
const price_1 = require("../../constants/price");
function getTokenPrice() {
    return __awaiter(this, void 0, void 0, function* () {
        const priceMap = yield axios_1.default.get('https://api.coingecko.com/api/v3/simple/price', {
            params: {
                ids: price_1.default.map(i => i.id).join(','),
                vs_currencies: 'usd'
            }
        });
        const res = {
            USDC: 1,
            USDT: 1,
            wUST: 1,
        };
        try {
            (0, lodash_1.forEach)(priceMap.data, (value, key) => {
                const price = value.usd;
                const targetItem = price_1.default.find(i => i.id === key);
                res[targetItem.token] = price;
            });
            res.whETH = res.ETH;
        }
        catch (err) {
        }
        return res;
    });
}
exports.getTokenPrice = getTokenPrice;
