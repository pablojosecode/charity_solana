"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_js_1 = require("@solana/web3.js");
const token_1 = require("../../utils/trx/token");
const spl_token_1 = require("@solana/spl-token");
const utils_1 = require("./utils");
const raydium_1 = require("../../constants/auto/raydium");
const anchor_1 = require("@project-serum/anchor");
function depositAuto(connection, pair, lyfType, userPublicKey, hub, configs) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const program = hub.getProgram(lyfType);
        const pubkeyConfig = hub.getConfig(pair, lyfType);
        const trx1 = new web3_js_1.Transaction();
        const trx2 = new web3_js_1.Transaction();
        const trx3 = new web3_js_1.Transaction();
        const trx4 = new web3_js_1.Transaction();
        let userPositionInfo = configs === null || configs === void 0 ? void 0 : configs.userPositionPublicKey;
        const parsedTokenAccounts = yield (0, token_1.getParsedTokenAccounts)(connection, userPublicKey);
        let userTknAccount0 = (_a = parsedTokenAccounts[pubkeyConfig.tknMint0]) === null || _a === void 0 ? void 0 : _a.tokenAccountAddress;
        let userTknAccount1 = (_b = parsedTokenAccounts[pubkeyConfig.tknMint1]) === null || _b === void 0 ? void 0 : _b.tokenAccountAddress;
        function buildAccounts() {
            return __awaiter(this, void 0, void 0, function* () {
                if (!userTknAccount0) {
                    userTknAccount0 = (yield (0, token_1.createAssociatedTokenAccount)(pubkeyConfig.tknMint0, userPublicKey, trx1)).toBase58();
                }
                if (!userTknAccount1) {
                    userTknAccount1 = (yield (0, token_1.createAssociatedTokenAccount)(pubkeyConfig.tknMint1, userPublicKey, trx1)).toBase58();
                }
                if (!userPositionInfo) {
                    const nonce = new anchor_1.BN(Math.trunc(Date.now() / 1000));
                    const poolInfoAccount = new web3_js_1.PublicKey(pubkeyConfig.poolInfoAccount);
                    const [user, bump] = yield (0, utils_1.findUserPositionInfoPDA)(poolInfoAccount, userPublicKey, nonce);
                    userPositionInfo = user;
                    const ix = yield program.methods
                        .initUserPosition(nonce).accounts({
                        userMainAccount: userPublicKey,
                        marketInfo: new web3_js_1.PublicKey(raydium_1.MarketInfo.MarketInfoAccount),
                        poolInfo: poolInfoAccount,
                        userPositionInfo: userPositionInfo,
                        systemProgram: web3_js_1.SystemProgram.programId,
                    }).instruction();
                    trx1.add(ix);
                }
            });
        }
        yield buildAccounts();
        const additionalComputeBudgetInstruction = web3_js_1.ComputeBudgetProgram.setComputeUnitLimit({
            units: 400000
        });
        const depositIx = yield program.methods
            .preDeposit(configs.amount0, configs.amount1 || new anchor_1.BN(0)).accounts({
            userMainAccount: userPublicKey,
            userPositionInfo: userPositionInfo,
            poolInfo: new web3_js_1.PublicKey(pubkeyConfig.poolInfoAccount),
            poolAuthority: new web3_js_1.PublicKey(pubkeyConfig.poolAuthority),
            userTokenAccount0: userTknAccount0,
            userTokenAccount1: userTknAccount1,
            poolTokenAccount0: new web3_js_1.PublicKey(pubkeyConfig.poolTknAccount0),
            poolTokenAccount1: new web3_js_1.PublicKey(pubkeyConfig.poolTknAccount1),
            poolLpAccount: new web3_js_1.PublicKey(pubkeyConfig.poolLpAccount),
            tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
            ammProgramId: new web3_js_1.PublicKey(pubkeyConfig.raydiumProgramId),
            ammId: new web3_js_1.PublicKey(pubkeyConfig.ammId),
            ammAuthority: new web3_js_1.PublicKey(pubkeyConfig.ammAuthority),
            ammOpenOrders: new web3_js_1.PublicKey(pubkeyConfig.ammOpenOrders),
            ammTargetOrders: new web3_js_1.PublicKey(pubkeyConfig.ammTargetOrders),
            ammTknAccount0: new web3_js_1.PublicKey(pubkeyConfig.ammPcAccount),
            ammTknAccount1: new web3_js_1.PublicKey(pubkeyConfig.ammCoinAccount),
            lpMintAccount: new web3_js_1.PublicKey(pubkeyConfig.lpMint),
            ammWithdrawQueue: new web3_js_1.PublicKey(pubkeyConfig.poolWithdrawQueue),
            ammPoolTempLpAccount: new web3_js_1.PublicKey(pubkeyConfig.poolTempLpTokenAccount),
            serumProgramId: new web3_js_1.PublicKey(pubkeyConfig.serumProgramId),
            serumMarketId: new web3_js_1.PublicKey(pubkeyConfig.serumMarketId),
            serumTknVault1: new web3_js_1.PublicKey(pubkeyConfig.serumCoinVault),
            serumTknVault0: new web3_js_1.PublicKey(pubkeyConfig.serumPCVault),
            serumVaultSinger: new web3_js_1.PublicKey(pubkeyConfig.serumVaultSigner),
            serumEventQ: new web3_js_1.PublicKey(pubkeyConfig.serumEventQueue),
            serumBid: new web3_js_1.PublicKey(pubkeyConfig.serumBids),
            serumAsk: new web3_js_1.PublicKey(pubkeyConfig.serumAsks),
        }).instruction();
        trx1.add(additionalComputeBudgetInstruction, depositIx);
        function buildNewInvest() {
            return __awaiter(this, void 0, void 0, function* () {
                const ix0 = yield program.methods.userBorrow().accounts({
                    userMainAccount: userPublicKey,
                    userPositionInfo: userPositionInfo,
                    poolInfo: new web3_js_1.PublicKey(pubkeyConfig.poolInfoAccount),
                    poolAuthority: new web3_js_1.PublicKey(pubkeyConfig.poolAuthority),
                    userTokenAccount0: userTknAccount0,
                    userTokenAccount1: userTknAccount1,
                    poolTokenAccount0: new web3_js_1.PublicKey(pubkeyConfig.poolTknAccount0),
                    poolTokenAccount1: new web3_js_1.PublicKey(pubkeyConfig.poolTknAccount1),
                    poolCreditAccount0: new web3_js_1.PublicKey(pubkeyConfig.poolBorrowingCreditTokenAccount0),
                    poolCreditAccount1: new web3_js_1.PublicKey(pubkeyConfig.poolBorrowingCreditTokenAccount1),
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    lendingProgramId: new web3_js_1.PublicKey(raydium_1.LendingInfo.programId),
                    lendingMarket: new web3_js_1.PublicKey(raydium_1.LendingInfo.marketInfoAccount),
                    lendingMarketAuthority: new web3_js_1.PublicKey(raydium_1.LendingInfo.marketAuthority),
                    lendingPoolInfoAccount0: new web3_js_1.PublicKey(pubkeyConfig.lendingPool0.lendingPoolInfoAccount),
                    lendingPoolTknAccount0: new web3_js_1.PublicKey(pubkeyConfig.lendingPool0.lendingPoolTknAccount),
                    lendingPoolCreditAccount0: new web3_js_1.PublicKey(pubkeyConfig.lendingPool0.lendingPoolCreditAccount),
                    lendingPoolInfoAccount1: new web3_js_1.PublicKey(pubkeyConfig.lendingPool1.lendingPoolInfoAccount),
                    lendingPoolTknAccount1: new web3_js_1.PublicKey(pubkeyConfig.lendingPool1.lendingPoolTknAccount),
                    lendingPoolCreditAccount1: new web3_js_1.PublicKey(pubkeyConfig.lendingPool1.lendingPoolCreditAccount),
                    systemClock: web3_js_1.SYSVAR_CLOCK_PUBKEY,
                }).instruction();
                const ix1 = yield program.methods.userAddLiquidity().accounts({
                    userMainAccount: userPublicKey,
                    userPositionInfo: userPositionInfo,
                    poolInfo: new web3_js_1.PublicKey(pubkeyConfig.poolInfoAccount),
                    poolAuthority: new web3_js_1.PublicKey(pubkeyConfig.poolAuthority),
                    userTokenAccount0: userTknAccount0,
                    userTokenAccount1: userTknAccount1,
                    poolTokenAccount0: new web3_js_1.PublicKey(pubkeyConfig.poolTknAccount0),
                    poolTokenAccount1: new web3_js_1.PublicKey(pubkeyConfig.poolTknAccount1),
                    poolLpAccount: new web3_js_1.PublicKey(pubkeyConfig.poolLpAccount),
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    ammProgramId: new web3_js_1.PublicKey(pubkeyConfig.raydiumProgramId),
                    ammId: new web3_js_1.PublicKey(pubkeyConfig.ammId),
                    ammAuthority: new web3_js_1.PublicKey(pubkeyConfig.ammAuthority),
                    ammOpenOrders: new web3_js_1.PublicKey(pubkeyConfig.ammOpenOrders),
                    ammTargetOrders: new web3_js_1.PublicKey(pubkeyConfig.ammTargetOrders),
                    ammTknAccount0: new web3_js_1.PublicKey(pubkeyConfig.ammPcAccount),
                    ammTknAccount1: new web3_js_1.PublicKey(pubkeyConfig.ammCoinAccount),
                    lpMintAccount: new web3_js_1.PublicKey(pubkeyConfig.lpMint),
                    ammWithdrawQueue: new web3_js_1.PublicKey(pubkeyConfig.poolWithdrawQueue),
                    ammPoolTempLpAccount: new web3_js_1.PublicKey(pubkeyConfig.poolTempLpTokenAccount),
                    serumProgramId: new web3_js_1.PublicKey(pubkeyConfig.serumProgramId),
                    serumMarketId: new web3_js_1.PublicKey(pubkeyConfig.serumMarketId),
                    serumTknVault1: new web3_js_1.PublicKey(pubkeyConfig.serumCoinVault),
                    serumTknVault0: new web3_js_1.PublicKey(pubkeyConfig.serumPCVault),
                    serumVaultSinger: new web3_js_1.PublicKey(pubkeyConfig.serumVaultSigner),
                    serumEventQ: new web3_js_1.PublicKey(pubkeyConfig.serumEventQueue),
                    serumBid: new web3_js_1.PublicKey(pubkeyConfig.serumBids),
                    serumAsk: new web3_js_1.PublicKey(pubkeyConfig.serumAsks),
                }).instruction();
                const ix2 = yield program.methods.finishDeposit().accounts({
                    userMainAccount: userPublicKey,
                    userPositionInfo: userPositionInfo,
                    poolInfo: new web3_js_1.PublicKey(pubkeyConfig.poolInfoAccount),
                    poolAuthority: new web3_js_1.PublicKey(pubkeyConfig.poolAuthority),
                    poolTokenAccount0: new web3_js_1.PublicKey(pubkeyConfig.poolTknAccount0),
                    poolTokenAccount1: new web3_js_1.PublicKey(pubkeyConfig.poolTknAccount1),
                    poolLpAccount: new web3_js_1.PublicKey(pubkeyConfig.poolLpAccount),
                    poolRewardsTokenAccount: new web3_js_1.PublicKey(pubkeyConfig.poolRewardsTokenAccount),
                    poolRewardsTokenAccountB: new web3_js_1.PublicKey(pubkeyConfig.poolRewardsTokenAccountB),
                    poolFarmInfo: new web3_js_1.PublicKey(pubkeyConfig.poolFarmInfo),
                    tokenProgramId: spl_token_1.TOKEN_PROGRAM_ID,
                    lendingProgramId: new web3_js_1.PublicKey(raydium_1.LendingInfo.programId),
                    lendingMarket: new web3_js_1.PublicKey(raydium_1.LendingInfo.marketInfoAccount),
                    lendingPoolInfoAccount0: new web3_js_1.PublicKey(pubkeyConfig.lendingPool0.lendingPoolInfoAccount),
                    lendingPoolInfoAccount1: new web3_js_1.PublicKey(pubkeyConfig.lendingPool1.lendingPoolInfoAccount),
                    stakingProgramId: new web3_js_1.PublicKey(pubkeyConfig.stakePoolProgramId),
                    stakingPoolId: new web3_js_1.PublicKey(pubkeyConfig.stakePoolId),
                    stakingPoolAuthority: new web3_js_1.PublicKey(pubkeyConfig.stakePoolAuthority),
                    stakingPoolLpAccount: new web3_js_1.PublicKey(pubkeyConfig.stakePoolLpAccount),
                    stakingPoolRewardsTknAccount: new web3_js_1.PublicKey(pubkeyConfig.stakePoolRewardAccount),
                    stakingPoolRewardsTknAccountB: new web3_js_1.PublicKey(pubkeyConfig.stakePoolRewardAccountB),
                    systemClock: web3_js_1.SYSVAR_CLOCK_PUBKEY,
                    ammId: new web3_js_1.PublicKey(pubkeyConfig.ammId),
                    ammOpenOrders: new web3_js_1.PublicKey(pubkeyConfig.ammOpenOrders),
                    ammTknAccount0: new web3_js_1.PublicKey(pubkeyConfig.ammPcAccount),
                    ammTknAccount1: new web3_js_1.PublicKey(pubkeyConfig.ammCoinAccount),
                    lpMintAccount: new web3_js_1.PublicKey(pubkeyConfig.lpMint),
                }).instruction();
                trx2.add(additionalComputeBudgetInstruction, ix0);
                trx3.add(ix1);
                trx4.add(ix2);
            });
        }
        yield buildNewInvest();
        return [trx1, trx2, trx3, trx4];
    });
}
exports.default = depositAuto;
