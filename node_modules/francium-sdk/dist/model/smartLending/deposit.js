"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.smartLendingDeposit = void 0;
const anchor_1 = require("@project-serum/anchor");
const token_instructions_1 = require("@project-serum/serum/lib/token-instructions");
const web3_js_1 = require("@solana/web3.js");
const pools_1 = require("../../constants/smartLending/pools");
function smartLendingDeposit(connection, amount, pool, lendHub, userPublicKey, configs) {
    return __awaiter(this, void 0, void 0, function* () {
        const targetLendInfo = pools_1.smartLendingPools[pool];
        if (!targetLendInfo) {
            throw new Error(`no LEND info for ${pool}`);
        }
        const trx = new web3_js_1.Transaction();
        let userInfoAccount = configs.userInfoAccount;
        if (!userInfoAccount) {
            const [userAccount, ixs] = yield lendHub.initUserInfo(userPublicKey, pool);
            userInfoAccount = userAccount;
            const checkRes = yield connection.getAccountInfo(userInfoAccount);
            if (!checkRes) {
                trx.add(...ixs);
            }
        }
        const [userLiquidityTokenAccount, userRewardsTokenAccount, newAccount] = yield lendHub.initUserAccount(userPublicKey, pool, amount, trx);
        const ix = yield lendHub.stakeWithLockupTime(userPublicKey, pool, {
            userInfoAccount,
            userLiquidityTokenAccount,
            userRewardsTokenAccount,
            lockupTime: new anchor_1.BN(configs.lockupTime),
            liquidityAmount: amount
        });
        trx.add(ix);
        if (newAccount) {
            trx.add((0, token_instructions_1.closeAccount)({
                source: newAccount.publicKey,
                destination: userPublicKey,
                owner: userPublicKey
            }));
        }
        console.log(trx);
        return {
            trx,
            signers: newAccount
        };
    });
}
exports.smartLendingDeposit = smartLendingDeposit;
