import { BN, Program, web3 } from '@project-serum/anchor';
import { Connection, PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';
import { SmartLendingInfoItem } from '../../constants/smartLending/pools';
import BigNumber from 'bignumber.js';
export interface FormattedUserInfoItem {
    pool: string;
    decimals: number;
    perSharesAmount: number;
    userShareAmount: BigNumber;
    userLiquidityAmount: number;
    lockupExpiration: number;
    userStaked: number;
    userInfoAccount: PublicKey;
    pendingRewards?: {
        token: string;
        amount: number;
    }[];
}
export declare class FranciumSmartLending {
    private idl;
    program: Program;
    connection: Connection;
    config: {
        [pool: string]: SmartLendingInfoItem;
    };
    constructor(config: {
        connection: Connection;
    });
    getPoolStatus(poolName: string): Promise<import("@project-serum/anchor/dist/cjs/program/namespace/types").TypeDef<import("@project-serum/anchor/dist/cjs/idl").IdlTypeDef, import("@project-serum/anchor").IdlTypes<import("@project-serum/anchor").Idl>>>;
    getAllPoolStatus(): Promise<{
        pool: any;
        poolInfoAccount: any;
        info: any;
        formatData: {
            maxAPR: number;
            rewards_per_year: number;
            totalLiquidity: number;
            maxLockupDuration: number;
            totalWorkingBalance: number;
            maxCapacityLimit: number;
            currentAmount: number;
            rewardInfo: {
                token: string;
                decimals: number;
                rewardsPerSecond: number;
            }[];
        };
    }[]>;
    getUserPositions(userPublicKey: PublicKey): Promise<{
        publicKey: any;
        account: any;
    }[]>;
    getFormattedUserPositions(userPublicKey?: PublicKey): Promise<{
        pool: {
            pool: any;
            poolInfoAccount: any;
            info: any;
            formatData: {
                maxAPR: number;
                rewards_per_year: number;
                totalLiquidity: number;
                maxLockupDuration: number;
                totalWorkingBalance: number;
                maxCapacityLimit: number;
                currentAmount: number;
                rewardInfo: {
                    token: string;
                    decimals: number;
                    rewardsPerSecond: number;
                }[];
            };
        }[];
        user: FormattedUserInfoItem[];
    }>;
    initUserInfo(userPublicKey: PublicKey, poolName: string): Promise<[PublicKey, TransactionInstruction[]]>;
    initUserAccount(userPublicKey: PublicKey, poolName: string, amount: BN, trx?: Transaction): Promise<any[]>;
    unStake(userPublicKey: PublicKey, poolName: string, configs: {
        userInfoAccount: PublicKey;
        userLiquidityTokenAccount: PublicKey;
        userRewardsTokenAccount: PublicKey;
        shareAmount: BN;
    }): Promise<web3.TransactionInstruction>;
    closeUserInfo(userPublicKey: PublicKey, poolInfo: PublicKey, userInfoAccount: PublicKey): Promise<web3.TransactionInstruction>;
    stakeWithLockupTime(userPublicKey: PublicKey, poolName: string, configs: {
        userInfoAccount: PublicKey;
        userLiquidityTokenAccount: PublicKey;
        userRewardsTokenAccount: PublicKey;
        liquidityAmount: BN;
        lockupTime: BN;
    }): Promise<web3.TransactionInstruction>;
    getDepositVaultStakeAccounts(poolName: string): {
        pubkey: any;
        isSigner: boolean;
        isWritable: boolean;
    }[];
    getWithdrawVaultStakeAccounts(poolName: string): {
        pubkey: any;
        isSigner: boolean;
        isWritable: boolean;
    }[];
    claimRewards(userPublicKey: PublicKey, poolName: string, userInfoAccount: PublicKey): Promise<web3.Transaction>;
}
