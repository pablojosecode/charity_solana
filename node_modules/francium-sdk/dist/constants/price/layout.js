"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AMM_INFO_LAYOUT_V4 = exports.MINT_LAYOUT = exports.ACCOUNT_LAYOUT = void 0;
const borsh_1 = require("@project-serum/borsh");
exports.ACCOUNT_LAYOUT = (0, borsh_1.struct)([
    (0, borsh_1.publicKey)('mint'),
    (0, borsh_1.publicKey)('owner'),
    (0, borsh_1.u64)('amount'),
    (0, borsh_1.u32)('delegateOption'),
    (0, borsh_1.publicKey)('delegate'),
    (0, borsh_1.u8)('state'),
    (0, borsh_1.u32)('isNativeOption'),
    (0, borsh_1.u64)('isNative'),
    (0, borsh_1.u64)('delegatedAmount'),
    (0, borsh_1.u32)('closeAuthorityOption'),
    (0, borsh_1.publicKey)('closeAuthority')
]);
exports.MINT_LAYOUT = (0, borsh_1.struct)([
    (0, borsh_1.u32)('mintAuthorityOption'),
    (0, borsh_1.publicKey)('mintAuthority'),
    (0, borsh_1.u64)('supply'),
    (0, borsh_1.u8)('decimals'),
    (0, borsh_1.bool)('initialized'),
    (0, borsh_1.u32)('freezeAuthorityOption'),
    (0, borsh_1.publicKey)('freezeAuthority')
]);
exports.AMM_INFO_LAYOUT_V4 = (0, borsh_1.struct)([
    (0, borsh_1.u64)('status'),
    (0, borsh_1.u64)('nonce'),
    (0, borsh_1.u64)('orderNum'),
    (0, borsh_1.u64)('depth'),
    (0, borsh_1.u64)('coinDecimals'),
    (0, borsh_1.u64)('pcDecimals'),
    (0, borsh_1.u64)('state'),
    (0, borsh_1.u64)('resetFlag'),
    (0, borsh_1.u64)('minSize'),
    (0, borsh_1.u64)('volMaxCutRatio'),
    (0, borsh_1.u64)('amountWaveRatio'),
    (0, borsh_1.u64)('coinLotSize'),
    (0, borsh_1.u64)('pcLotSize'),
    (0, borsh_1.u64)('minPriceMultiplier'),
    (0, borsh_1.u64)('maxPriceMultiplier'),
    (0, borsh_1.u64)('systemDecimalsValue'),
    (0, borsh_1.u64)('minSeparateNumerator'),
    (0, borsh_1.u64)('minSeparateDenominator'),
    (0, borsh_1.u64)('tradeFeeNumerator'),
    (0, borsh_1.u64)('tradeFeeDenominator'),
    (0, borsh_1.u64)('pnlNumerator'),
    (0, borsh_1.u64)('pnlDenominator'),
    (0, borsh_1.u64)('swapFeeNumerator'),
    (0, borsh_1.u64)('swapFeeDenominator'),
    (0, borsh_1.u64)('needTakePnlCoin'),
    (0, borsh_1.u64)('needTakePnlPc'),
    (0, borsh_1.u64)('totalPnlPc'),
    (0, borsh_1.u64)('totalPnlCoin'),
    (0, borsh_1.u128)('poolTotalDepositPc'),
    (0, borsh_1.u128)('poolTotalDepositCoin'),
    (0, borsh_1.u128)('swapCoinInAmount'),
    (0, borsh_1.u128)('swapPcOutAmount'),
    (0, borsh_1.u64)('swapCoin2PcFee'),
    (0, borsh_1.u128)('swapPcInAmount'),
    (0, borsh_1.u128)('swapCoinOutAmount'),
    (0, borsh_1.u64)('swapPc2CoinFee'),
    (0, borsh_1.publicKey)('poolCoinTokenAccount'),
    (0, borsh_1.publicKey)('poolPcTokenAccount'),
    (0, borsh_1.publicKey)('coinMintAddress'),
    (0, borsh_1.publicKey)('pcMintAddress'),
    (0, borsh_1.publicKey)('lpMintAddress'),
    (0, borsh_1.publicKey)('ammOpenOrders'),
    (0, borsh_1.publicKey)('serumMarket'),
    (0, borsh_1.publicKey)('serumProgramId'),
    (0, borsh_1.publicKey)('ammTargetOrders'),
    (0, borsh_1.publicKey)('poolWithdrawQueue'),
    (0, borsh_1.publicKey)('poolTempLpTokenAccount'),
    (0, borsh_1.publicKey)('ammOwner'),
    (0, borsh_1.publicKey)('pnlOwner')
]);
