/// <reference types="@solana/web3.js" />
import { FranciumSDK } from './main';
import { ORCA_FARM_CONFIG } from './constants/farm/orca/info';
import { RAYDIUM_FARM_CONFIG } from './constants/farm/raydium/info';
import { getTokenDecimals, splitMultipleAccountsInfo } from './utils/tools';
import { getAmountByDecimals, getAprInfo } from './utils/math';
import * as rebalanceKit from './utils/rebalance';
import RAYDIUM_FARM_IDL from './constants/farm/raydium/config';
import ORCA_FARM_IDL from './constants/farm/orca/config';
export default FranciumSDK;
export declare const LENDING_CONFIG: {
    [x: string]: import("./constants/lend/pools").LendInfoItem;
};
export declare const LENDING_REWARD_CONFIG: {
    [x: string]: import("./constants/lend/rewards").LendRewardInfo;
};
export { ORCA_FARM_CONFIG, RAYDIUM_FARM_CONFIG, RAYDIUM_FARM_IDL, ORCA_FARM_IDL };
export declare const PRICE_CONFIG: {
    id: string;
    token: string;
}[];
export declare const TOKENS_LIST: {
    SOL: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    WSOL: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    BTC: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    ETH: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    USDT: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    WUSDT: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    USDC: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    WUSDC: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    YFI: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    LINK: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    ALEPH: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    SXP: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    HGET: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    CREAM: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    UBXT: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    HNT: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    FRONT: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    AKRO: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    HXRO: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    UNI: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    SRM: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    FTT: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    TOMO: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    KARMA: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    LUA: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    MATH: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    KEEP: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    SWAG: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    FIDA: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    KIN: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    MAPS: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    OXY: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    RAY: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    COPE: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    STEP: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    MEDIA: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    ROPE: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    MER: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    LIKE: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    ATLAS: {
        symbol: string;
        name: string;
        decimals: number;
        mintAddress: import("@solana/web3.js").PublicKey;
    };
    POLIS: {
        symbol: string;
        name: string;
        decimals: number;
        mintAddress: import("@solana/web3.js").PublicKey;
    };
    ORCA: {
        symbol: string;
        name: string;
        decimals: number;
        mintAddress: import("@solana/web3.js").PublicKey;
    };
    mSOL: {
        symbol: string;
        name: string;
        decimals: number;
        mintAddress: import("@solana/web3.js").PublicKey;
    };
    MNDE: {
        symbol: string;
        name: string;
        decimals: number;
        mintAddress: import("@solana/web3.js").PublicKey;
    };
    NINJA: {
        symbol: string;
        name: string;
        decimals: number;
        mintAddress: import("@solana/web3.js").PublicKey;
    };
    whETH: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    SBR: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    LIQ: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    PORT: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    SAMO: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    ABR: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    weSUSHI: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    weUNI: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    STARS: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    weDYDX: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    weAXS: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    weSHIB: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    SLND: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    weMANA: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    weSAND: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    CAVE: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    GENE: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    SONAR: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    DFL: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    wbWBNB: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    REAL: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    MBS: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    stSOL: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    wLDO: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    PRISM: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    SHDW: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    BASIS: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    GRAPE: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    wUST: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    wLUNA: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    SLC: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    MEAN: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    ZBC: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    ATS: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    GST: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    GMT: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    prANA: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    RATIO: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    TTT: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    RUN: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
    SLCL: {
        symbol: string;
        name: string;
        mintAddress: import("@solana/web3.js").PublicKey;
        decimals: number;
    };
};
export declare const FARM_POOLS_CONFIG: ({
    id: string;
    strategyName: string;
    pair: string;
    alias: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    marketCap: number;
    lpDecimal: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    lyfType: string;
    borrowList: string[];
    orca: {
        tokenBDecimal: number;
        poolKey: string;
    };
    isNew: boolean;
} | {
    id: string;
    strategyName: string;
    alias: string;
    pair: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    lpDecimal: number;
    marketCap: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    borrowList: string[];
    isNew: boolean;
    lyfType?: undefined;
    orca?: undefined;
} | {
    id: string;
    strategyName: string;
    pair: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    marketCap: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    lpDecimal?: undefined;
    lyfType?: undefined;
    borrowList?: undefined;
    orca?: undefined;
    isNew?: undefined;
    alias?: undefined;
    stable?: undefined;
    isInnovation?: undefined;
} | {
    id: string;
    strategyName: string;
    pair: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    lpDecimal: number;
    marketCap: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    lyfType?: undefined;
    borrowList?: undefined;
    orca?: undefined;
    isNew?: undefined;
    alias?: undefined;
    stable?: undefined;
    isInnovation?: undefined;
} | {
    id: string;
    strategyName: string;
    pair: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    marketCap: number;
    lpDecimal: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    lyfType: string;
    borrowList: string[];
    orca: {
        bonus: number;
        tokenBDecimal?: undefined;
        isDoubleDip?: undefined;
        poolKey?: undefined;
        rewardToken?: undefined;
        rewardDecimal?: undefined;
    };
    isNew: boolean;
    alias?: undefined;
    stable?: undefined;
    isInnovation?: undefined;
} | {
    id: string;
    strategyName: string;
    pair: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    lpDecimal: number;
    marketCap: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    borrowList: string[];
    lyfType?: undefined;
    orca?: undefined;
    isNew?: undefined;
    alias?: undefined;
    stable?: undefined;
    isInnovation?: undefined;
} | {
    id: string;
    strategyName: string;
    pair: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    marketCap: number;
    lpDecimal: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    lyfType: string;
    borrowList: string[];
    orca: {
        bonus: number;
        tokenBDecimal: number;
        isDoubleDip?: undefined;
        poolKey?: undefined;
        rewardToken?: undefined;
        rewardDecimal?: undefined;
    };
    isNew: boolean;
    alias?: undefined;
    stable?: undefined;
    isInnovation?: undefined;
} | {
    id: string;
    strategyName: string;
    pair: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    marketCap: number;
    lpDecimal: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    lyfType: string;
    borrowList: string[];
    orca: {
        tokenBDecimal: number;
        bonus?: undefined;
        isDoubleDip?: undefined;
        poolKey?: undefined;
        rewardToken?: undefined;
        rewardDecimal?: undefined;
    };
    isNew: boolean;
    alias?: undefined;
    stable?: undefined;
    isInnovation?: undefined;
} | {
    id: string;
    strategyName: string;
    pair: string;
    alias: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    marketCap: number;
    lpDecimal: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    lyfType: string;
    borrowList: string[];
    orca: {
        tokenBDecimal: number;
        isDoubleDip: boolean;
        bonus?: undefined;
        poolKey?: undefined;
        rewardToken?: undefined;
        rewardDecimal?: undefined;
    };
    isNew: boolean;
    stable?: undefined;
    isInnovation?: undefined;
} | {
    id: string;
    strategyName: string;
    pair: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    lpDecimal: number;
    marketCap: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    borrowList: string[];
    isNew: boolean;
    lyfType?: undefined;
    orca?: undefined;
    alias?: undefined;
    stable?: undefined;
    isInnovation?: undefined;
} | {
    id: string;
    strategyName: string;
    pair: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    marketCap: number;
    lpDecimal: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    lyfType: string;
    borrowList: string[];
    orca: {
        tokenBDecimal: number;
        isDoubleDip: boolean;
        poolKey: string;
        bonus?: undefined;
        rewardToken?: undefined;
        rewardDecimal?: undefined;
    };
    isNew: boolean;
    alias?: undefined;
    stable?: undefined;
    isInnovation?: undefined;
} | {
    id: string;
    strategyName: string;
    pair: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    marketCap: number;
    lpDecimal: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    lyfType: string;
    borrowList: string[];
    orca: {
        tokenBDecimal: number;
        isDoubleDip: boolean;
        rewardToken: string;
        rewardDecimal: number;
        poolKey: string;
        bonus?: undefined;
    };
    isNew: boolean;
    alias?: undefined;
    stable?: undefined;
    isInnovation?: undefined;
} | {
    id: string;
    strategyName: string;
    pair: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    marketCap: number;
    lpDecimal: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    lyfType: string;
    borrowList: string[];
    orca: {
        tokenBDecimal: number;
        poolKey: string;
        bonus?: undefined;
        isDoubleDip?: undefined;
        rewardToken?: undefined;
        rewardDecimal?: undefined;
    };
    isNew: boolean;
    alias?: undefined;
    stable?: undefined;
    isInnovation?: undefined;
} | {
    id: string;
    strategyName: string;
    alias: string;
    pair: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    marketCap: number;
    lpDecimal: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    lyfType: string;
    borrowList: string[];
    orca: {
        tokenBDecimal: number;
        isDoubleDip: boolean;
        rewardToken: string;
        rewardDecimal: number;
        poolKey: string;
        bonus?: undefined;
    };
    isNew: boolean;
    stable?: undefined;
    isInnovation?: undefined;
} | {
    id: string;
    strategyName: string;
    pair: string;
    alias: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    marketCap: number;
    lpDecimal: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    lyfType: string;
    borrowList: string[];
    orca: {
        bonus?: undefined;
        tokenBDecimal?: undefined;
        isDoubleDip?: undefined;
        poolKey?: undefined;
        rewardToken?: undefined;
        rewardDecimal?: undefined;
    };
    isNew: boolean;
    stable?: undefined;
    isInnovation?: undefined;
} | {
    id: string;
    strategyName: string;
    pair: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    marketCap: number;
    lpDecimal: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    lyfType: string;
    borrowList: string[];
    orca: {
        tokenBDecimal: number;
        isDoubleDip: boolean;
        rewardToken: string;
        rewardDecimal: number;
        bonus?: undefined;
        poolKey?: undefined;
    };
    isNew: boolean;
    alias?: undefined;
    stable?: undefined;
    isInnovation?: undefined;
} | {
    id: string;
    strategyName: string;
    pair: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    marketCap: number;
    lpDecimal: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    lyfType: string;
    borrowList: string[];
    orca: {
        tokenBDecimal: number;
        isDoubleDip: boolean;
        rewardToken: string;
        rewardDecimal: number;
        poolKey: string;
        bonus?: undefined;
    };
    isNew: boolean;
    stable: boolean;
    alias?: undefined;
    isInnovation?: undefined;
} | {
    id: string;
    strategyName: string;
    alias: string;
    pair: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    marketCap: number;
    lpDecimal: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    lyfType: string;
    borrowList: string[];
    orca: {
        tokenBDecimal: number;
        isDoubleDip: boolean;
        rewardToken: string;
        rewardDecimal: number;
        bonus?: undefined;
        poolKey?: undefined;
    };
    isNew: boolean;
    stable?: undefined;
    isInnovation?: undefined;
} | {
    id: string;
    strategyName: string;
    pair: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    marketCap: number;
    lpDecimal: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    lyfType: string;
    borrowList: string[];
    orca: {
        tokenBDecimal: number;
        isDoubleDip: boolean;
        rewardToken: string;
        rewardDecimal: number;
        bonus?: undefined;
        poolKey?: undefined;
    };
    isNew: boolean;
    isInnovation: boolean;
    alias?: undefined;
    stable?: undefined;
} | {
    id: string;
    strategyName: string;
    pair: string;
    alias: any;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    marketCap: number;
    lpDecimal: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    lyfType: string;
    borrowList: string[];
    orca: {
        bonus?: undefined;
        tokenBDecimal?: undefined;
        isDoubleDip?: undefined;
        poolKey?: undefined;
        rewardToken?: undefined;
        rewardDecimal?: undefined;
    };
    isNew: boolean;
    isInnovation: boolean;
    stable?: undefined;
} | {
    id: string;
    strategyName: string;
    pair: string;
    alias: any;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    marketCap: number;
    lpDecimal: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    lyfType: string;
    borrowList: string[];
    orca: {
        tokenBDecimal: number;
        poolKey: string;
        bonus?: undefined;
        isDoubleDip?: undefined;
        rewardToken?: undefined;
        rewardDecimal?: undefined;
    };
    isNew: boolean;
    isInnovation: boolean;
    stable?: undefined;
} | {
    id: string;
    strategyName: string;
    pair: string;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    lpDecimal: number;
    marketCap: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    borrowList: string[];
    isNew: boolean;
    isInnovation: boolean;
    lyfType?: undefined;
    orca?: undefined;
    alias?: undefined;
    stable?: undefined;
} | {
    id: string;
    strategyName: string;
    pair: string;
    alias: any;
    author: string;
    from: string;
    yieldFarmingAPR: number;
    strategyAPR: number;
    tradingFeeAPR: number;
    borrowAPR: number;
    maxLeverage: number;
    minLeverage: number;
    marketCap: number;
    lpDecimal: number;
    token0: string;
    token1: string;
    status: string;
    version: number;
    lyfType: string;
    borrowList: string[];
    orca: {
        tokenBDecimal: number;
        poolKey: string;
        isDoubleDip: boolean;
        rewardToken: string;
        rewardDecimal: number;
        bonus?: undefined;
    };
    isNew: boolean;
    stable: boolean;
    isInnovation?: undefined;
})[];
export declare const utils: {
    getTokenDecimals: typeof getTokenDecimals;
    getAmountByDecimals: typeof getAmountByDecimals;
    splitMultipleAccountsInfo: typeof splitMultipleAccountsInfo;
    getAprInfo: typeof getAprInfo;
    rebalanceKit: typeof rebalanceKit;
};
