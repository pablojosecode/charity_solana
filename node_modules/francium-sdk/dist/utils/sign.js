"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendWalletTransaction = exports.send2TransactionsListOneByOneWithErrorCatch = void 0;
const base58 = require("bs58");
function send2TransactionsListOneByOneWithErrorCatch(trxs, connection, wallet, onTrxSended, onTrxConfirmed, beforeSign) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const { blockhash } = yield connection.getRecentBlockhash();
        trxs.forEach((trx, index) => {
            trx.recentBlockhash = blockhash;
            trx.feePayer = wallet.publicKey;
            if (beforeSign) {
                beforeSign(trx, index);
            }
        });
        console.log('------ start sign ------', trxs);
        const signed = yield wallet.signAllTransactions(trxs);
        console.info('----- Sign end -----');
        const stateInfos = [];
        for (let index = 0; index < signed.length; index++) {
            const signedTrx = signed[index];
            const txid = yield connection.sendRawTransaction(signedTrx.serialize(), {
                skipPreflight: true,
                preflightCommitment: 'confirmed'
            });
            console.info('----- Send Trx -----', txid);
            if (onTrxSended) {
                onTrxSended(index, txid);
            }
            const stateInfo = {
                state: 'success',
                msg: '',
                signature: base58.encode(signedTrx.signature),
                total: signed.length
            };
            try {
                const confirmResponse = yield connection.confirmTransaction(txid, 'confirmed');
                if ((_a = confirmResponse === null || confirmResponse === void 0 ? void 0 : confirmResponse.value) === null || _a === void 0 ? void 0 : _a.err) {
                    stateInfo.state = 'error';
                    stateInfo.msg = 'Transaction Error';
                }
            }
            catch (err) {
                console.info('----- Confirm Timeout -----', err);
                stateInfo.state = 'timeout';
                stateInfo.msg = `Transaction was not confirmed in 30 seconds. Bots 🤖️ will help complete unfinished transactions. You could retry manually either.`;
            }
            finally {
                stateInfos.push(stateInfo);
            }
            console.log('confirmResponse', stateInfo);
            if (onTrxConfirmed) {
                onTrxConfirmed(index, txid, stateInfo);
            }
        }
        return stateInfos;
    });
}
exports.send2TransactionsListOneByOneWithErrorCatch = send2TransactionsListOneByOneWithErrorCatch;
function sendWalletTransaction(trx, connection, wallet, signers) {
    return __awaiter(this, void 0, void 0, function* () {
        const { blockhash } = yield connection.getRecentBlockhash();
        trx.recentBlockhash = blockhash;
        trx.feePayer = wallet.publicKey;
        if (signers && signers.length) {
            trx.partialSign(...signers);
        }
        console.log('start signed', trx);
        const signed = yield wallet.signTransaction(trx);
        console.log('start send');
        const txid = yield connection.sendRawTransaction(signed.serialize(), {
            skipPreflight: true,
            preflightCommitment: 'confirmed'
        });
        console.log('start confirm', txid);
        const r = yield connection.confirmTransaction(txid, 'confirmed');
        console.log('trx confirmed', r, txid);
        return { txid, response: r };
    });
}
exports.sendWalletTransaction = sendWalletTransaction;
