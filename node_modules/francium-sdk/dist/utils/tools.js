"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferToWSOL = exports.isNativeMint = exports.splitMultipleAccountsInfo = exports.findAssociatedTokenAddress = exports.getTokenMintAddress = exports.getTokenDecimals = void 0;
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const tokens_1 = require("../constants/tokens");
function getTokenDecimals(token) {
    var _a;
    if (token === 'SOL') {
        return 9;
    }
    return ((_a = tokens_1.TOKENS[token]) === null || _a === void 0 ? void 0 : _a.decimals) || 6;
}
exports.getTokenDecimals = getTokenDecimals;
function getTokenMintAddress(token) {
    var _a;
    return (_a = tokens_1.TOKENS[token]) === null || _a === void 0 ? void 0 : _a.mintAddress;
}
exports.getTokenMintAddress = getTokenMintAddress;
function findAssociatedTokenAddress(walletAddress, tokenMintAddress) {
    return __awaiter(this, void 0, void 0, function* () {
        const [publicKey] = yield web3_js_1.PublicKey.findProgramAddress([walletAddress.toBuffer(), spl_token_1.TOKEN_PROGRAM_ID.toBuffer(), tokenMintAddress.toBuffer()], spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID);
        return publicKey;
    });
}
exports.findAssociatedTokenAddress = findAssociatedTokenAddress;
function splitMultipleAccountsInfo(connection, accountList) {
    return __awaiter(this, void 0, void 0, function* () {
        const MAX = 100;
        const info = [];
        const totalSplit = Math.ceil(accountList.length / 100);
        for (let index = 0; index < totalSplit; index++) {
            const accounts = accountList.slice(index * MAX, (index + 1) * MAX);
            const multipleInfo = yield connection.getMultipleAccountsInfo(accounts, 'confirmed');
            info.push(...multipleInfo);
        }
        return info;
    });
}
exports.splitMultipleAccountsInfo = splitMultipleAccountsInfo;
function isNativeMint(publicKey) {
    if (!publicKey) {
        return false;
    }
    if (publicKey.toBase58() === spl_token_1.NATIVE_MINT.toBase58()) {
        return true;
    }
    return false;
}
exports.isNativeMint = isNativeMint;
function transferToWSOL(amount, WSOLAccount, userPublicKey) {
    const ins1 = web3_js_1.SystemProgram.transfer({
        fromPubkey: userPublicKey,
        toPubkey: WSOLAccount,
        lamports: Number(amount.toString())
    });
    const ins2 = new web3_js_1.TransactionInstruction({
        keys: [
            { pubkey: WSOLAccount, isSigner: false, isWritable: true }
        ],
        programId: spl_token_1.TOKEN_PROGRAM_ID,
        data: Buffer.from([17]),
    });
    return [ins1, ins2];
}
exports.transferToWSOL = transferToWSOL;
