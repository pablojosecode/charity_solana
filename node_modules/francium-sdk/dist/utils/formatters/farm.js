"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatFarmUserPositionByPrice = exports.formatFarmUserPosition = void 0;
const BN = require("bn.js");
const math_1 = require("../math");
const tools_1 = require("../tools");
function formatFarmUserPosition(poolInfo, userInfo, userInfoPublicKey) {
    const totalLP = poolInfo === null || poolInfo === void 0 ? void 0 : poolInfo.totalLp;
    const totalShares = poolInfo === null || poolInfo === void 0 ? void 0 : poolInfo.totalShares;
    const userShares = userInfo === null || userInfo === void 0 ? void 0 : userInfo.lpShares;
    const userLP = totalShares.eq(new BN(0)) ? 0 : userShares.mul(totalLP).div(totalShares);
    const poolBorrowRate0 = poolInfo === null || poolInfo === void 0 ? void 0 : poolInfo.cumulatedBorrowRate0;
    const userBorrowRate0 = userInfo === null || userInfo === void 0 ? void 0 : userInfo.cumulatedBorrowRate0;
    const poolBorrowRate1 = poolInfo === null || poolInfo === void 0 ? void 0 : poolInfo.cumulatedBorrowRate1;
    const userBorrowRate1 = userInfo === null || userInfo === void 0 ? void 0 : userInfo.cumulatedBorrowRate1;
    const userBorrowed0 = userInfo === null || userInfo === void 0 ? void 0 : userInfo.borrowed0.add(userInfo === null || userInfo === void 0 ? void 0 : userInfo.pendingRepay0).mul(poolBorrowRate0).div(userBorrowRate0);
    const userBorrowed1 = userInfo === null || userInfo === void 0 ? void 0 : userInfo.borrowed1.add(userInfo === null || userInfo === void 0 ? void 0 : userInfo.pendingRepay1).mul(poolBorrowRate1).div(userBorrowRate1);
    return {
        id: poolInfo.id,
        lpAmount: userLP,
        lpShares: userShares,
        priceKey: poolInfo.priceKey,
        lpDecimals: poolInfo.lpDecimals,
        userInfoPublicKey,
        pcMint: (0, tools_1.getTokenMintAddress)(poolInfo.token0),
        coinMint: (0, tools_1.getTokenMintAddress)(poolInfo.token1),
        borrowed: [
            {
                symbol: poolInfo.token0,
                amount: userBorrowed0,
                mint: (0, tools_1.getTokenMintAddress)(poolInfo.token0)
            },
            {
                symbol: poolInfo.token1,
                amount: userBorrowed1,
                mint: (0, tools_1.getTokenMintAddress)(poolInfo.token1)
            }
        ]
    };
}
exports.formatFarmUserPosition = formatFarmUserPosition;
function formatFarmUserPositionByPrice(poolInfo, userInfo, userInfoPublicKey, configs) {
    const totalLP = poolInfo === null || poolInfo === void 0 ? void 0 : poolInfo.totalLp;
    const totalShares = poolInfo === null || poolInfo === void 0 ? void 0 : poolInfo.totalShares;
    const userShares = userInfo === null || userInfo === void 0 ? void 0 : userInfo.lpShares;
    const userLP = totalShares.eq(new BN(0)) ? new BN(0) : userShares.mul(totalLP).div(totalShares);
    const poolBorrowRate0 = poolInfo === null || poolInfo === void 0 ? void 0 : poolInfo.cumulatedBorrowRate0;
    const userBorrowRate0 = userInfo === null || userInfo === void 0 ? void 0 : userInfo.cumulatedBorrowRate0;
    const poolBorrowRate1 = poolInfo === null || poolInfo === void 0 ? void 0 : poolInfo.cumulatedBorrowRate1;
    const userBorrowRate1 = userInfo === null || userInfo === void 0 ? void 0 : userInfo.cumulatedBorrowRate1;
    const decimals0 = (0, tools_1.getTokenDecimals)(poolInfo.token0);
    const decimals1 = (0, tools_1.getTokenDecimals)(poolInfo.token1);
    const token0Price = configs.priceList[poolInfo.token0];
    const token1Price = configs.priceList[poolInfo.token1];
    const userBorrowed0 = userInfo === null || userInfo === void 0 ? void 0 : userInfo.borrowed0.add(userInfo === null || userInfo === void 0 ? void 0 : userInfo.pendingRepay0).mul(poolBorrowRate0).div(userBorrowRate0);
    const userBorrowed1 = userInfo === null || userInfo === void 0 ? void 0 : userInfo.borrowed1.add(userInfo === null || userInfo === void 0 ? void 0 : userInfo.pendingRepay1).mul(poolBorrowRate1).div(userBorrowRate1);
    const lpEquity = (0, math_1.getAmountByDecimals)(userLP, poolInfo === null || poolInfo === void 0 ? void 0 : poolInfo.lpDecimals) * configs.LPPriceList[poolInfo === null || poolInfo === void 0 ? void 0 : poolInfo.priceKey].priceAmm;
    const token0Equity = (0, math_1.getAmountByDecimals)(userInfo === null || userInfo === void 0 ? void 0 : userInfo.tkn0, decimals0) * token0Price;
    const token1Equity = (0, math_1.getAmountByDecimals)(userInfo === null || userInfo === void 0 ? void 0 : userInfo.tkn1, decimals1) * token1Price;
    const totalPositionValue = lpEquity + token0Equity + token1Equity;
    const debtValue = (0, math_1.getAmountByDecimals)(userBorrowed0, decimals0) * token0Price + (0, math_1.getAmountByDecimals)(userBorrowed1, decimals1) * token1Price;
    const equityValue = totalPositionValue - debtValue;
    return {
        id: poolInfo.id,
        lpAmount: userLP,
        lpShares: userShares,
        priceKey: poolInfo.priceKey,
        lpDecimals: poolInfo.lpDecimals,
        userInfo,
        userInfoPublicKey,
        pcMint: (0, tools_1.getTokenMintAddress)(poolInfo.token0),
        coinMint: (0, tools_1.getTokenMintAddress)(poolInfo.token1),
        borrowed: [
            {
                symbol: poolInfo.token0,
                amount: userBorrowed0,
                mint: (0, tools_1.getTokenMintAddress)(poolInfo.token0)
            },
            {
                symbol: poolInfo.token1,
                amount: userBorrowed1,
                mint: (0, tools_1.getTokenMintAddress)(poolInfo.token1)
            }
        ],
        totalPositionValue,
        debtValue,
        equityValue
    };
}
exports.formatFarmUserPositionByPrice = formatFarmUserPositionByPrice;
