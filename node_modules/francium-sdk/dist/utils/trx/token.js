"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getParsedTokenAccounts = exports.createAssociatedTokenAccount = void 0;
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const tools_1 = require("../tools");
function createAssociatedTokenAccount(tokenMintAddress, owner, transaction) {
    return __awaiter(this, void 0, void 0, function* () {
        const associatedTokenAddress = yield (0, tools_1.findAssociatedTokenAddress)(owner, tokenMintAddress);
        if (transaction) {
            const keys = [
                {
                    pubkey: owner,
                    isSigner: true,
                    isWritable: true
                },
                {
                    pubkey: associatedTokenAddress,
                    isSigner: false,
                    isWritable: true
                },
                {
                    pubkey: owner,
                    isSigner: false,
                    isWritable: false
                },
                {
                    pubkey: tokenMintAddress,
                    isSigner: false,
                    isWritable: false
                },
                {
                    pubkey: web3_js_1.SystemProgram.programId,
                    isSigner: false,
                    isWritable: false
                },
                {
                    pubkey: spl_token_1.TOKEN_PROGRAM_ID,
                    isSigner: false,
                    isWritable: false
                },
                {
                    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,
                    isSigner: false,
                    isWritable: false
                }
            ];
            transaction.add(new web3_js_1.TransactionInstruction({
                keys,
                programId: spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID,
                data: Buffer.from([])
            }));
        }
        return associatedTokenAddress;
    });
}
exports.createAssociatedTokenAccount = createAssociatedTokenAccount;
function getParsedTokenAccounts(connection, userPublicKey) {
    return __awaiter(this, void 0, void 0, function* () {
        if (userPublicKey) {
            const r = yield connection.getParsedTokenAccountsByOwner(userPublicKey, {
                programId: spl_token_1.TOKEN_PROGRAM_ID
            }, 'confirmed');
            const tokenAccounts = {};
            r.value.forEach(tokenAccountInfo => {
                const tokenAccountAddress = tokenAccountInfo.pubkey.toBase58();
                const parsedInfo = tokenAccountInfo.account.data.parsed.info;
                const mintAddress = parsedInfo.mint;
                tokenAccounts[mintAddress] = {
                    tokenAccountAddress
                };
            });
            return tokenAccounts;
        }
    });
}
exports.getParsedTokenAccounts = getParsedTokenAccounts;
